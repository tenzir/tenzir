let $uuid_pattern = r"^[0-9a-f]{8}-[0-9a-f]{4}-V[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
let $v1_pattern = $uuid_pattern.replace("V", "1")
let $v4_pattern = $uuid_pattern.replace("V", "4")
let $v6_pattern = $uuid_pattern.replace("V", "6")
let $v7_pattern = $uuid_pattern.replace("V", "7")

from {x: 1}
nil_uuid = uuid(version="nil")
v1_uuid = uuid(version="v1")
v4_uuid = uuid(version="v4")
v6_uuid = uuid(version="v6")
v7_uuid = uuid(version="v7")
default_uuid = uuid()

// Verify nil UUID is exactly the expected value
is_nil = (nil_uuid == "00000000-0000-0000-0000-000000000000")

// Verify UUID formats using regex
// UUID format: xxxxxxxx-xxxx-Vxxx-xxxx-xxxxxxxxxxxx where V is the version
v1_format_valid = v1_uuid.match_regex($v1_pattern)
v4_format_valid = v4_uuid.match_regex($v4_pattern)
v6_format_valid = v6_uuid.match_regex($v6_pattern)
v7_format_valid = v7_uuid.match_regex($v7_pattern)

// Verify default UUID is v4 format
default_is_v4 = default_uuid.match_regex($v4_pattern)

// Verify nil UUID doesn't match any non-nil format
nil_not_v1 = not nil_uuid.match_regex($v1_pattern)
nil_not_v4 = not nil_uuid.match_regex($v4_pattern)
nil_not_v6 = not nil_uuid.match_regex($v6_pattern)
nil_not_v7 = not nil_uuid.match_regex($v7_pattern)

// Drop the actual UUID values to focus on validation results
drop v1_uuid, v4_uuid, v6_uuid, v7_uuid, default_uuid
