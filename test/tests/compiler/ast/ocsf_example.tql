activity_name = "Launch"
activity_id = 1
actor.process = {
  file: {
    path: path,
    parent_folder: std::path::parent(src.event_data.ParentImage),
    name: std::path::file_name(src.event_data.ParentImage),
    "type": "Unknown",
    type_id: 0,
  },
  pid: int(src.event_data.ParentProcessId),
}
drop src.event_data.ParentImage, src.event_data.ParentProcessId
actor.user = {
  account_type: "Windows Account",
  account_type_id: 2,
  domain: src.user.domain,
  name: src.user.name,
  uid: src.user.identifier,
}
drop src.user.domain, src.user.name, src.user.identifier
category_name = "System Activity"
category_uid = ocsf::category_uid(category_name)
class_name = "Process Activity"
class_uid = ocsf::class_uid(class_name)
device = {
  hostname: src.computer_name,
  os: {
    name: "Windows",
    "type": "Windows",
    type_id: 100,
  },
  "type": "Unknown",
  type_id: 0,
}
drop src.computer_name
message = "A new process has been created."
metadata = {
  original_time: src.event_data.UtcTime,
  product: {
    feature: {
      name: "Security",
    },
    name: "Microsoft Windows",
    vendor_name: "Microsoft",
  },
  profiles: ["host"],
  uid: src.record_id,
  version: "1.1.0",
}
drop src.event_data.UtcTime, src.record_id
process = {
  cmd_line: src.event_data.CommandLine,
  file: {
    path: src.event_data.Image,
    parent_folder: std::path::parent(src.event_data.Image),
    name: std::path::file_name(src.event_data.Image),
    "type": "Unknown",
    type_id: 0,
  },
  pid: int(src.event_data.ProcessId),
}
drop src.event_data.CommandLine, src.event_data.Image, src.event_data.ProcessId
severity = "Informational"
severity_id = 1
status = "Success"
status_id = 1
time = round(time(metadata.original_time).timestamp() * 1000)
type_name = "Process Activity: Launch"
type_uid = 100701
unmapped = src
drop src
