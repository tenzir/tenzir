// Test operator precedence and complex arithmetic expressions
result1 = 1 + 2 * 3 - 4 / 2
result2 = (1 + 2) * 3 - 4 / 2
result3 = 1 - 2 * 3 + 4 and x > 5
result4 = a + b * c == d or e < f and g != h

// Test unary operators
positive = +42
negative = -value
logical_not = not condition
combined_unary = not -x > 0

// Test range operations
string_contains = "World" in "Hello World"
list_contains = 5 in [1, 2, 3, 4, 5]
ip_in_subnet = 192.168.1.100 in 192.168.1.0/24
subnet_in_subnet = 192.168.1.0/28 in 192.168.0.0/16

// Test negated range operations
string_not_contains = "Planet" not in "Hello World"
list_not_contains = 10 not in [1, 2, 3, 4, 5]
ip_not_in_subnet = 10.0.0.1 not in 192.168.0.0/16

// Test empty constructs
empty_record = {}
empty_list = []
empty_with_comment = {} // Empty record

// Test trailing commas
record_with_trailing = {
  name: "John",
  age: 30,
  city: "New York",
}

list_with_trailing = [
  1,
  2,
  3,
]

// Test complex nested structures
complex_nested = {
  user: {
    id: 123,
    profile: {
      name: "Alice",
      preferences: {
        theme: "dark",
        notifications: true,
      },
    },
    tags: ["admin", "power-user"],
  },
  metadata: {
    created: 2024-01-01T00:00:00Z,
    modified: now(),
    version: 1.2,
  },
  permissions: [
    {action: "read", resource: "users"},
    {action: "write", resource: "posts"},
  ],
}

// Test mixed record and list operations
user_data = {
  name: "Bob",
  scores: [85, 92, 78, 95],
  details: {
    joined: 2023-06-15,
    active: true,
  },
}

// Test chained field access
deep_value = user.profile.settings.theme
deeper_value = data.nested.very.deep.field.value
list_access = users[0].profile.name
dynamic_access = records[index]["field name"]

// Test complex expressions with multiple operators
complex_condition = (
  timestamp > now() - 1h and
  severity in ["high", "critical"] and
  source_ip not in 192.168.0.0/16 and
  user.role == "admin"
)

// Test arithmetic with different types
time_calc = now() + 1h - 30min
duration_calc = 2h * 3 + 15min
mixed_calc = count * 1.5 + offset

// Test function calls with complex arguments
complex_function = hash_sha256(
  user.id.string() + ":" + timestamp.string()
)

aggregated = summarize(
  total = sum(amount),
  average = mean(score),
  unique_users = count_distinct(user_id)
)

// Test record field access variations
dot_access = record.field
bracket_access = record["field"]
dynamic_bracket = record[field_name]
optional_access = record.field?
optional_bracket = record["field"]?

// Test list slicing and indexing
first_element = list[0]
last_element = list[-1]
slice_range = list[1:5]
slice_with_step = list[::2]