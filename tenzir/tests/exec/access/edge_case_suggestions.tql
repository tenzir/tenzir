// test: exec  
// error: false
// timeout: 10

// Test edge cases for field suggestions
from {
  a: "short1",
  ab: "short2", 
  abc: "medium",
  very_long_field_name: "long",
  field_with_numbers123: "numbers",
  field_with_underscores_: "underscores",
  CamelCaseField: "camel",
  field123: "mixed"
}
select (
  // Short field names with typos
  typo_a = b,                        // single char diff - should suggest 'a' 
  typo_ab = ac,                      // single char diff - should suggest 'ab'
  typo_abc1 = abd,                   // single char diff - should suggest 'abc'
  typo_abc2 = abcd,                  // single char addition - should suggest 'abc' 
  
  // Long field name with typos
  long_typo1 = very_long_field_nam,  // missing 'e' - should suggest very_long_field_name
  long_typo2 = very_lng_field_name,  // missing 'o' - should suggest very_long_field_name
  
  // Numbers and underscores
  numbers_typo1 = field_with_numbers12,  // missing '3' - should suggest field_with_numbers123
  underscore_typo = field_with_underscores, // missing '_' - should suggest field_with_underscores_
  
  // Case sensitivity
  case_typo1 = camelcasefield,       // wrong case - should suggest CamelCaseField
  case_typo2 = CAMELCASEFIELD,       // wrong case - should suggest CamelCaseField
  
  // Mixed numbers and letters
  mixed_typo1 = field12,             // missing '3' - should suggest field123
  mixed_typo2 = fild123,             // missing 'e' - should suggest field123
  
  // Empty record case - test with record that has no fields
  empty_access = {}.nonexistent_field,
  
  // Test similarity threshold - these should be too different
  too_different1 = xyz,              // completely different
  too_different2 = this["qwertyuiop"], // way too different
  
  // Test with suppression
  suppressed1 = nonexistent_field?,
  suppressed2 = this["also_nonexistent"]?
)