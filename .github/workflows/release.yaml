name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version identifier for the release (e.g., v5.3.0)"
        required: true
        type: string
      title:
        description: 'Title of the release (e.g., "Tenzir Node v5.3.0")'
        required: true
        type: string
      description:
        description: "Description of the release"
        required: true
        type: string

jobs:
  create:
    name: Create
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v4.0.0
        with:
          poetry-version: latest

      - name: Generate an app token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.TENZIR_AUTOBUMPER_APP_ID }}
          private-key: ${{ secrets.TENZIR_AUTOBUMPER_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Set up GPG for signing
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.TENZIR_BOT_GPG_SIGNING_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Configure Git
        run: |
          git config --global user.name "tenzir-bot"
          git config --global user.email "engineering@tenzir.com"

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Error: Version must follow semver format (e.g., v1.2.3 or v1.2.3-beta1)"
            exit 1
          fi

      - name: Check if release already exists
        run: |
          if [ -f "changelog/releases/${{ github.event.inputs.version }}.yaml" ]; then
            echo "Error: Release file for ${{ github.event.inputs.version }} already exists"
            exit 1
          fi
          if git tag -l | grep -q "^${{ github.event.inputs.version }}$"; then
            echo "Error: Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi

      - name: Run release script
        run: |
          ./changelog/release.py "${{ github.event.inputs.version }}" \
            --title "${{ github.event.inputs.title }}" \
            --description "${{ github.event.inputs.description }}"

      - name: Update version.json and poetry version
        run: |
          # Extract version without 'v' prefix
          VERSION_NUMBER=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')

          # Update tenzir-version in version.json using jq
          jq --arg version "${VERSION_NUMBER}" '.["tenzir-version"] = $version' version.json > version.json.tmp
          mv version.json.tmp version.json

          # Update poetry version
          pushd python
          poetry version "${VERSION_NUMBER}"
          popd

          echo "Updated version.json with tenzir-version: ${VERSION_NUMBER}"
          echo "Updated poetry version to: ${VERSION_NUMBER}"

      - name: Verify release file was created
        run: |
          if [ ! -f "changelog/releases/${{ github.event.inputs.version }}.yaml" ]; then
            echo "Error: Release file was not created"
            exit 1
          fi
          echo "Release file created successfully:"
          cat "changelog/releases/${{ github.event.inputs.version }}.yaml"

          echo "Updated version.json:"
          cat "version.json"

      - name: Commit release file
        env:
          GITHUB_APP_TOKEN: ${{ steps.generate_token.outputs.token }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Setup git
          git config --global user.name 'tenzir-bot'
          git config --global user.email 'engineering@tenzir.com'
          git remote set-url origin https://x-access-token:${GITHUB_APP_TOKEN}@github.com/${{ github.repository }}.git

          # Commit changes
          git add --all
          git commit -s -m "Release Tenzir Node ${{ github.event.inputs.version }}"

      - name: Create signed annotated tag
        run: |
          git tag -a -s "${{ github.event.inputs.version }}" \
            -m "Tenzir Node ${{ github.event.inputs.version }}: ${{ github.event.inputs.title }}"

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin "${{ github.event.inputs.version }}"

      - name: Update latest branch
        run: |
          git checkout -B latest
          git push origin latest --force

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Format version for changelog URL (replace dots with dashes, remove 'v' prefix)
          VERSION_FOR_URL=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//' | sed 's/\./-/g')
          CHANGELOG_URL="https://docs.tenzir.com/changelog/node/v${VERSION_FOR_URL}/"

          # Create release notes with changelog link
          RELEASE_NOTES="${{ github.event.inputs.description }}

          For a detailed list of all changes, view [the changelog](${CHANGELOG_URL})."

          gh release create "${{ github.event.inputs.version }}" \
            --title "${{ github.event.inputs.title }}" \
            --notes "$RELEASE_NOTES"

      - name: Output success message
        run: |
          echo "üéâ Release ${{ github.event.inputs.version }} created successfully!"
          echo "üìÅ Release file: changelog/releases/${{ github.event.inputs.version }}.yaml"
          echo "üè∑Ô∏è Tag: ${{ github.event.inputs.version }}"
          echo "üåø Latest branch updated"
          echo "üìã GitHub release: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }}"
