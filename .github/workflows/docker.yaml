name: Docker
on:
  workflow_call:
    inputs:
      config:
        type: string
        required: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  build:
    name: Build (${{ matrix.build.tag }})
    runs-on: ${{ matrix.build.runner }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - runner: ubuntu-latest
            arch: linux/amd64
            tag: amd64
          - runner: ubicloud-standard-4-arm
            arch: linux/arm64
            tag: arm64
    steps:
      - name: Prevent pushing protected editions to public repos
        run: |
          # Create 'name registry' pairs
          jq -r '.editions[] | select(.registries | length > 0) | .name as $name | .registries[]? // .registries | [ $name, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name registry; do
            # Explicitly allow tenzir, demo and dev images.
            [[ "${name}" =~ ^tenzir(|-dev|-deps|-node|-de|-node-de|-demo)$ ]] && continue
            # Explicitly allow private registries.
            [[ "${registry}" == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" ]] && continue
            echo "::error Pushing ${name} to ${registry} is forbidden"
            exit 1
          done
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --recursive libtenzir
          git submodule update --init --recursive plugins
          git submodule update --init --recursive tenzir
      - name: Tailscale
        if: false
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.66.4
          args: --ssh
      - name: Configure
        id: cfg
        run: |
          # Configure
          echo '::notice inputs = ${{ toJSON(fromJSON(inputs.config)) }}'
          echo "::notice checking registries..."
          echo "needs-docker-hub=false" >> "$GITHUB_OUTPUT"
          echo "needs-ecr=false" >> "$GITHUB_OUTPUT"
          jq -r '.editions | map( .registries[]) | unique | .[]
                 | if . == "docker.io" then
                     "needs-docker-hub=true"
                   elif . == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" then
                     "needs-ecr=true"
                   else
                     empty
                   end
                 | @sh' \
                 <<< '${{ inputs.config }}' >> "${GITHUB_OUTPUT}"
      - name: Configure ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TENZIR_PLUGINS_DEPLOY_KEY }}
      - name: Update submodules
        run: |
          git submodule update --init --recursive contrib/tenzir-plugins
      # Login to ghcr before the build because we use it for caching.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 1
      - name: Login to Docker Hub
        if: steps.cfg.outputs.needs-docker-hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Configure AWS Credentials
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-tenzir-ce-github-access
          aws-region: eu-west-1
      - name: Login to AWS ECR
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and Push Intermediate Stages
        env:
          BUILDX_GIT_LABELS: full
          CACHE_REGISTRY: ghcr.io/tenzir/tenzir
        run: |
          # Define intermediate stages to cache
          stages=(
            "aws-sdk-cpp-package"
            "google-cloud-cpp-package"
            "arrow-package"
            "fluent-bit-package"
            "arrow-adbc-package"
            "dependencies"
          )

          # Build and push each intermediate stage
          for stage in "${stages[@]}"; do
            echo "::notice Building and caching stage: ${stage}"
            docker buildx build . \
              --target "${stage}" \
              --tag "${CACHE_REGISTRY}:${{ matrix.build.tag }}-cache-${stage}" \
              --platform ${{ matrix.build.arch }} \
              --push \
              --cache-from "type=registry,ref=${CACHE_REGISTRY}:${{ matrix.build.tag }}-cache-${stage}" \
              --cache-to "type=inline"
          done
      - name: Build Docker Images
        env:
          BUILDX_GIT_LABELS: full
          CACHE_REGISTRY: ghcr.io/tenzir/tenzir
        run: |
          cmake_version_args="-DTENZIR_VERSION_BUILD_METADATA:STRING=${{ fromJSON(inputs.config).version-build-metadata }}"

          # Build cache-from arguments for all intermediate stages
          cache_from_args=""
          stages=(
            "aws-sdk-cpp-package"
            "google-cloud-cpp-package"
            "arrow-package"
            "fluent-bit-package"
            "arrow-adbc-package"
            "dependencies"
          )

          for stage in "${stages[@]}"; do
            cache_from_args="${cache_from_args} --cache-from type=registry,ref=${CACHE_REGISTRY}:${{ matrix.build.tag }}-cache-${stage}"
          done

          # Also use the general build cache
          cache_from_args="${cache_from_args} --cache-from type=registry,ref=${CACHE_REGISTRY}:${{ matrix.build.tag }}-build-cache"

          jq -r '.editions[] | .name as $name | .target as $target | .registries[]? | [ $name, $target, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name target registry; do
            for tag in ${{ join(fromJSON(inputs.config).tags, ' ') }}; do
              docker buildx build . \
                -t "${registry}/tenzir/${name}:${{ matrix.build.tag }}-${tag}" --target "${target}" \
                --platform ${{ matrix.build.arch }} --push \
                --build-arg "TENZIR_BUILD_OPTIONS=${cmake_version_args}" \
                ${cache_from_args} \
                --cache-to "type=registry,mode=max,ref=${CACHE_REGISTRY}:${{ matrix.build.tag }}-build-cache"
            done
          done

  push-manifest:
    name: Push Manifest
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Configure
        id: cfg
        run: |
          # Configure
          echo '::notice inputs = ${{ toJSON(fromJSON(inputs.config)) }}'
          echo "::notice checking registries..."
          echo "needs-docker-hub=false" >> "$GITHUB_OUTPUT"
          echo "needs-ecr=false" >> "$GITHUB_OUTPUT"
          jq -r '.editions | map( .registries[]) | unique | .[]
                 | if . == "docker.io" then
                     "needs-docker-hub=true"
                   elif . == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" then
                     "needs-ecr=true"
                   else
                     empty
                   end
                 | @sh' \
                 <<< '${{ inputs.config }}' >> "${GITHUB_OUTPUT}"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: steps.cfg.outputs.needs-docker-hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Configure AWS Credentials
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-tenzir-ce-github-access
          aws-region: eu-west-1
      - name: Login to AWS ECR
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Create and push manifest
        env:
          BUILDX_GIT_LABELS: full
        run: |
          cmake_version_args="-DTENZIR_VERSION_BUILD_METADATA:STRING=${{ fromJSON(inputs.config).version-build-metadata }}"
          jq -r '.editions[] | .name as $name | .target as $target | .registries[]? | [ $name, $target, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name target registry; do
            for tag in ${{ join(fromJSON(inputs.config).tags, ' ') }}; do
              echo "::notice Creating manifest for ${registry}/tenzir/${name}:${tag}"
              docker buildx imagetools create \
                --tag "${registry}/tenzir/${name}:${tag}" \
                "${registry}/tenzir/${name}:amd64-${tag}" \
                "${registry}/tenzir/${name}:arm64-${tag}"
            done
          done
