//    _   _____   __________
//   | | / / _ | / __/_  __/     Visibility
//   | |/ / __ |_\ \  / /          Across
//   |___/_/ |_/___/ /_/       Space and Time
//
// SPDX-FileCopyrightText: (c) 2021 The Tenzir Contributors
// SPDX-License-Identifier: BSD-3-Clause

#include "tenzir/detail/installdirs.hpp"

#include "tenzir/detail/assert.hpp"
#include "tenzir/detail/env.hpp"
#include "tenzir/detail/process.hpp"
#include "tenzir/detail/string.hpp"

#include <string_view>

namespace tenzir::detail {

namespace {

std::filesystem::path install_libdir() {
  return detail::objectpath()->parent_path();
}

/// Returns the install prefix and a possible suffix for the current library
/// location. The suffix is only applied to archive, library, and binary
/// directories for multi-config generators.
std::pair<std::filesystem::path, std::filesystem::path>
install_prefix_and_suffix() {
  if (auto runtime_prefix = detail::getenv("TENZIR_RUNTIME_PREFIX")) {
    return {*runtime_prefix, {}};
  }
  auto prefix_from_libdir = [](const auto& libdir) {
    auto err = std::error_code{};
    auto prefix = libdir / "@TENZIR_LIBDIR_TO_PREFIX@";
    prefix = std::filesystem::canonical(prefix, err);
    TENZIR_ASSERT(!err);
    return prefix;
  };
  const auto libdir = install_libdir();
  if (std::string_view configuration_types = "@CMAKE_CONFIGURATION_TYPES@";
      !configuration_types.empty())
    for (const auto& configuration_type :
         detail::split(configuration_types, ";"))
      if (libdir.filename() == configuration_type)
        return {prefix_from_libdir(libdir.parent_path()), libdir.filename()};
  return {prefix_from_libdir(libdir), {}};
}

} // namespace

std::filesystem::path install_configdir() {
  const auto [prefix, _] = install_prefix_and_suffix();
  std::error_code err{};
  // We are permissive for the config file paths, in case the prefix does not
  // contain the package name.
  if (prefix == "/usr") {
    return "/etc/tenzir";
  }
  return prefix / "@CMAKE_INSTALL_RELATIVE_SYSCONFDIR@/tenzir";
}

std::filesystem::path install_datadir() {
  const auto [prefix, _] = install_prefix_and_suffix();
  return prefix / "@CMAKE_INSTALL_RELATIVE_DATADIR@/tenzir";
}

std::filesystem::path install_libexecdir() {
  const auto [prefix, suffix] = install_prefix_and_suffix();
  return prefix / "@CMAKE_INSTALL_RELATIVE_LIBEXECDIR@" / suffix;
}

std::filesystem::path install_plugindir() {
  const auto [prefix, suffix] = install_prefix_and_suffix();
  return prefix / "@CMAKE_INSTALL_RELATIVE_LIBDIR@/tenzir/plugins" / suffix;
}

} // namespace tenzir::detail
