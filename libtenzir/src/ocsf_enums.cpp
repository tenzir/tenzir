// This file was generated by `ocsf-schemas.py`. Do not edit.

#include "tenzir/ocsf_enums.hpp"

namespace tenzir {

namespace {

auto int_to_string = boost::unordered_flat_map<
  std::string_view, boost::unordered_flat_map<int64_t, std::string_view>>
#include "tenzir/ocsf_enums.inc"
  ;

auto string_to_int = std::invoke([] {
  auto result = boost::unordered_flat_map<
    std::string_view, boost::unordered_flat_map<std::string_view, int64_t>>{};
  for (const auto& [enum_id, forward_map] : int_to_string) {
    auto& entry = result[enum_id];
    for (const auto& [value, name] : forward_map) {
      entry[name] = value;
    }
  }
  return result;
});

} // namespace

auto get_ocsf_int_to_string(std::string_view enum_id)
  -> std::optional<std::reference_wrapper<
    const boost::unordered_flat_map<int64_t, std::string_view>>> {
  auto it = int_to_string.find(enum_id);
  if (it != int_to_string.end()) {
    return std::cref(it->second);
  }
  return std::nullopt;
}

auto get_ocsf_string_to_int(std::string_view enum_id)
  -> std::optional<std::reference_wrapper<
    const boost::unordered_flat_map<std::string_view, int64_t>>> {
  auto it = string_to_int.find(enum_id);
  if (it != string_to_int.end()) {
    return std::cref(it->second);
  }
  return std::nullopt;
}

} // namespace tenzir
