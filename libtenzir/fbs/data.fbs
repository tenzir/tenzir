namespace tenzir.fbs.data;

struct Boolean {
  value: bool;
}

struct Int64 {
  value: long;
}

struct UInt64 {
  value: ulong;
}

struct Double {
  value: double;
}

struct Duration {
  ns: long;
}

struct Time {
  time_since_epoch: Duration;
}

table String {
  value: string;
}

table Blob {
  value: [ubyte];
}

table PatternOptions {
  case_insensitive: bool;
}

table Pattern {
  value: string;
  options: PatternOptions;
}

struct IP {
  bytes: [ubyte:16];
}

struct Subnet {
  ip: IP;
  length: ubyte;
}

struct Enumeration {
  value: uint;
}

table List {
  values: [tenzir.fbs.Data] (required);
}

table MapEntry {
  key: tenzir.fbs.Data (required);
  value: tenzir.fbs.Data (required);
}

table Map {
  entries: [MapEntry] (required);
}

table RecordField {
  name: string (required);
  data: tenzir.fbs.Data (required);
}

table Record {
  fields: [RecordField] (required);
}

table SecretLiteral {
  value: string (required);
}

table SecretName {
  value: string (required);
}

table SecretConcatenation {
  secrets: [Secret] (required);
}

enum SecretTransformations : uint8 {
  encode_base64, decode_base64,
}
table SecretTransformed {
  secret: Secret (required);
  transformation: SecretTransformations;
}

union SecretUnion {
  literal: SecretLiteral,
  name: SecretName,
  concatenation: SecretConcatenation,
  transformed: SecretTransformed,
}

table Secret {
  data: SecretUnion (required);
}

/// The sum data of all possible types.
union Data {
  boolean: Boolean,
  int64: Int64,
  uint64: UInt64,
  double_: Double,
  duration: Duration,
  time: Time,
  string: String,
  pattern: Pattern,
  ip: IP,
  subnet: Subnet,
  enumeration: Enumeration,
  list: List,
  map: Map,
  record: Record,
  blob: Blob,
  secret: Secret,
}

namespace tenzir.fbs;

table Data {
  data: data.Data;
}

root_type Data;
