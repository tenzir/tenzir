"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[44916],{15680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>d});var n=t(96540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(t),y=o,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||a;return t?n.createElement(d,p(p({ref:r},c),{},{components:t})):n.createElement(d,p({ref:r},c))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,p=new Array(a);p[0]=y;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[m]="string"==typeof e?e:o,p[1]=i;for(var l=2;l<a;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7874:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>v,contentTitle:()=>f,default:()=>P,frontMatter:()=>d,metadata:()=>g,toc:()=>h});var n=t(15680),o=Object.defineProperty,a=Object.defineProperties,p=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,r,t)=>r in e?o(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,m=(e,r)=>{for(var t in r||(r={}))s.call(r,t)&&c(e,t,r[t]);if(i)for(var t of i(r))l.call(r,t)&&c(e,t,r[t]);return e},u=(e,r)=>a(e,p(r)),y=(e,r)=>{var t={};for(var n in e)s.call(e,n)&&r.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))r.indexOf(n)<0&&l.call(e,n)&&(t[n]=e[n]);return t};const d={sidebar_custom_props:{format:{parser:!0,printer:!0}}},f="parquet",g={unversionedId:"formats/parquet",id:"version-v4.32/formats/parquet",title:"parquet",description:"Reads events from a Parquet file. Writes events to a Parquet file.",source:"@site/versioned_docs/version-v4.32/formats/parquet.md",sourceDirName:"formats",slug:"/formats/parquet",permalink:"/v4.32/formats/parquet",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.32/formats/parquet.md",tags:[],version:"v4.32",frontMatter:{sidebar_custom_props:{format:{parser:!0,printer:!0}}},sidebar:"docsSidebar",previous:{title:"lines",permalink:"/v4.32/formats/lines"},next:{title:"pcap",permalink:"/v4.32/formats/pcap"}},v={},h=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>--compression-type</code> (Printer)",id:"--compression-type-printer",level:3},{value:"<code>--compression-level</code> (Printer)",id:"--compression-level-printer",level:3},{value:"Examples",id:"examples",level:2}],b={toc:h},O="wrapper";function P(e){var r=e,{components:t}=r,o=y(r,["components"]);return(0,n.yg)(O,u(m(m({},b),o),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",m({},{id:"parquet"}),"parquet"),(0,n.yg)("p",null,"Reads events from a ",(0,n.yg)("a",m({parentName:"p"},{href:"https://parquet.apache.org/"}),"Parquet")," file. Writes events to a ",(0,n.yg)("a",m({parentName:"p"},{href:"https://parquet.apache.org/"}),"Parquet")," file."),(0,n.yg)("h2",m({},{id:"synopsis"}),"Synopsis"),(0,n.yg)("p",null,"Parser:"),(0,n.yg)("pre",null,(0,n.yg)("code",m({parentName:"pre"},{}),"parquet\n")),(0,n.yg)("p",null,"Printer:"),(0,n.yg)("pre",null,(0,n.yg)("code",m({parentName:"pre"},{}),"parquet [\u2014compression-type=<type>] [\u2014compression-level=<level>]\n")),(0,n.yg)("h2",m({},{id:"description"}),"Description"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"parquet")," format provides both a parser and a printer for Parquet files."),(0,n.yg)("p",null,(0,n.yg)("a",m({parentName:"p"},{href:"https://parquet.apache.org/"}),"Apache Parquet")," is a columnar storage format that a variety of data\ntools support."),(0,n.yg)("admonition",m({},{title:"MMAP Parsing",type:"tip"}),(0,n.yg)("p",{parentName:"admonition"},"When using the parser with the ",(0,n.yg)("inlineCode",{parentName:"p"},"file")," connector, we\nrecommend passing the ",(0,n.yg)("inlineCode",{parentName:"p"},"--mmap")," option to ",(0,n.yg)("inlineCode",{parentName:"p"},"file")," to give the parser full control\nover the reads, which leads to better performance and memory usage.")),(0,n.yg)("admonition",m({},{title:"Limitation",type:"warning"}),(0,n.yg)("p",{parentName:"admonition"},"Tenzir currently assumes that all Parquet files use metadata recognized by\nTenzir. We plan to lift this restriction in the future.")),(0,n.yg)("h3",m({},{id:"--compression-type-printer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"--compression-type")," (Printer)"),(0,n.yg)("p",null,"Specifies an optional compression type. Supported options are ",(0,n.yg)("inlineCode",{parentName:"p"},"zstd")," for\n",(0,n.yg)("a",m({parentName:"p"},{href:"http://facebook.github.io/zstd/"}),"Zstandard")," compression, ",(0,n.yg)("inlineCode",{parentName:"p"},"brotli")," for ",(0,n.yg)("a",m({parentName:"p"},{href:"https://www.brotli.org"}),"brotli"),"\ncompression, ",(0,n.yg)("inlineCode",{parentName:"p"},"gzip")," for ",(0,n.yg)("a",m({parentName:"p"},{href:"https://www.gzip.org"}),"gzip")," compression, and ",(0,n.yg)("inlineCode",{parentName:"p"},"snappy")," for\n",(0,n.yg)("a",m({parentName:"p"},{href:"https://google.github.io/snappy/"}),"snappy")," compression."),(0,n.yg)("admonition",m({},{type:"info"}),(0,n.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"Why would I use this over the ",(0,n.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"compress")," operator?"),(0,n.yg)("p",{parentName:"admonition"},"The Parquet format offers more efficient compression compared to the\n",(0,n.yg)("inlineCode",{parentName:"p"},"compress")," operator. This is because it compresses the data column-by-column,\nleaving metadata that needs to be accessed frequently uncompressed.")),(0,n.yg)("h3",m({},{id:"--compression-level-printer"}),(0,n.yg)("inlineCode",{parentName:"h3"},"--compression-level")," (Printer)"),(0,n.yg)("p",null,"An optional compression level for the corresponding compression type. This\noption is ignored if no compression type is specified."),(0,n.yg)("p",null,"Defaults to the compression type's default compression level."),(0,n.yg)("h2",m({},{id:"examples"}),"Examples"),(0,n.yg)("p",null,"Read a Parquet file via the ",(0,n.yg)("inlineCode",{parentName:"p"},"from")," operator:"),(0,n.yg)("pre",null,(0,n.yg)("code",m({parentName:"pre"},{}),"from file --mmap /tmp/data.prq read parquet\n")),(0,n.yg)("p",null,"Write a Zstd-compressed Parquet file via the ",(0,n.yg)("inlineCode",{parentName:"p"},"to")," operator:"),(0,n.yg)("pre",null,(0,n.yg)("code",m({parentName:"pre"},{}),"to /tmp/suricata.parquet write parquet --compression-type zstd\n")))}P.isMDXComponent=!0}}]);