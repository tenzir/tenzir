"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37399],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},g=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,d=m["".concat(o,".").concat(u)]||m[u]||h[u]||r;return n?a.createElement(d,p(p({ref:t},g),{},{components:n})):a.createElement(d,p({ref:t},g))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,p=new Array(r);p[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:i,p[1]=l;for(var s=2;s<r;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61134:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>y,default:()=>v,frontMatter:()=>d,metadata:()=>c,toc:()=>N});var a=n(15680),i=Object.defineProperty,r=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,g=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&g(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&g(e,n,t[n]);return e},h=(e,t)=>r(e,p(t)),u=(e,t)=>{var n={};for(var a in e)o.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n};const d={id:"changelog",title:"Changelog"},y=void 0,c={type:"mdx",permalink:"/changelog",source:"@site/src/pages/changelog.md",title:"Changelog",description:"\x3c!--",frontMatter:{id:"changelog",title:"Changelog"}},N=[{value:"Next",id:"next",level:2},{value:"Changes",id:"changes",level:3},{value:"v4.32.1",id:"v4321",level:2},{value:"Features",id:"features",level:3},{value:"Bug Fixes",id:"bug-fixes",level:3},{value:"v4.32.0",id:"v4320",level:2},{value:"Features",id:"features-1",level:3},{value:"Bug Fixes",id:"bug-fixes-1",level:3},{value:"v4.31.2",id:"v4312",level:2},{value:"Features",id:"features-2",level:3},{value:"Bug Fixes",id:"bug-fixes-2",level:3},{value:"v4.31.0",id:"v4310",level:2},{value:"Features",id:"features-3",level:3},{value:"Bug Fixes",id:"bug-fixes-3",level:3},{value:"v4.30.3",id:"v4303",level:2},{value:"Features",id:"features-4",level:3},{value:"Bug Fixes",id:"bug-fixes-4",level:3},{value:"v4.30.2",id:"v4302",level:2},{value:"Bug Fixes",id:"bug-fixes-5",level:3},{value:"v4.30.1",id:"v4301",level:2},{value:"Changes",id:"changes-1",level:3},{value:"Features",id:"features-5",level:3},{value:"v4.30.0",id:"v4300",level:2},{value:"Changes",id:"changes-2",level:3},{value:"Features",id:"features-6",level:3},{value:"Bug Fixes",id:"bug-fixes-6",level:3},{value:"v4.29.2",id:"v4292",level:2},{value:"Changes",id:"changes-3",level:3},{value:"Features",id:"features-7",level:3},{value:"Bug Fixes",id:"bug-fixes-7",level:3},{value:"v4.29.1",id:"v4291",level:2},{value:"Features",id:"features-8",level:3},{value:"Bug Fixes",id:"bug-fixes-8",level:3},{value:"v4.29.0",id:"v4290",level:2},{value:"Changes",id:"changes-4",level:3},{value:"Features",id:"features-9",level:3},{value:"Bug Fixes",id:"bug-fixes-9",level:3},{value:"v4.28.2",id:"v4282",level:2},{value:"Features",id:"features-10",level:3},{value:"Bug Fixes",id:"bug-fixes-10",level:3},{value:"v4.28.0",id:"v4280",level:2},{value:"Changes",id:"changes-5",level:3},{value:"Features",id:"features-11",level:3},{value:"Bug Fixes",id:"bug-fixes-11",level:3},{value:"v4.27.0",id:"v4270",level:2},{value:"Changes",id:"changes-6",level:3},{value:"Features",id:"features-12",level:3},{value:"Bug Fixes",id:"bug-fixes-12",level:3},{value:"v4.26.0",id:"v4260",level:2},{value:"Changes",id:"changes-7",level:3},{value:"Features",id:"features-13",level:3},{value:"Bug Fixes",id:"bug-fixes-13",level:3},{value:"v4.25.0",id:"v4250",level:2},{value:"Changes",id:"changes-8",level:3},{value:"Features",id:"features-14",level:3},{value:"Bug Fixes",id:"bug-fixes-14",level:3},{value:"v4.24.1",id:"v4241",level:2},{value:"Bug Fixes",id:"bug-fixes-15",level:3},{value:"v4.24.0",id:"v4240",level:2},{value:"Changes",id:"changes-9",level:3},{value:"Features",id:"features-15",level:3},{value:"Bug Fixes",id:"bug-fixes-16",level:3},{value:"v4.23.1",id:"v4231",level:2},{value:"Bug Fixes",id:"bug-fixes-17",level:3},{value:"v4.23.0",id:"v4230",level:2},{value:"Changes",id:"changes-10",level:3},{value:"Features",id:"features-16",level:3},{value:"Bug Fixes",id:"bug-fixes-18",level:3},{value:"v4.22.2",id:"v4222",level:2},{value:"Features",id:"features-17",level:3},{value:"Bug Fixes",id:"bug-fixes-19",level:3},{value:"v4.22.1",id:"v4221",level:2},{value:"Features",id:"features-18",level:3},{value:"Bug Fixes",id:"bug-fixes-20",level:3},{value:"v4.22.0",id:"v4220",level:2},{value:"Features",id:"features-19",level:3},{value:"Bug Fixes",id:"bug-fixes-21",level:3},{value:"v4.21.1",id:"v4211",level:2},{value:"Features",id:"features-20",level:3},{value:"Bug Fixes",id:"bug-fixes-22",level:3},{value:"v4.21.0",id:"v4210",level:2},{value:"Changes",id:"changes-11",level:3},{value:"Features",id:"features-21",level:3},{value:"Bug Fixes",id:"bug-fixes-23",level:3},{value:"v4.20.3",id:"v4203",level:2},{value:"Bug Fixes",id:"bug-fixes-24",level:3},{value:"v4.20.2",id:"v4202",level:2},{value:"Bug Fixes",id:"bug-fixes-25",level:3},{value:"v4.20.1",id:"v4201",level:2},{value:"Bug Fixes",id:"bug-fixes-26",level:3},{value:"v4.20.0",id:"v4200",level:2},{value:"Changes",id:"changes-12",level:3},{value:"Features",id:"features-22",level:3},{value:"Bug Fixes",id:"bug-fixes-27",level:3},{value:"v4.19.6",id:"v4196",level:2},{value:"Features",id:"features-23",level:3},{value:"Bug Fixes",id:"bug-fixes-28",level:3},{value:"v4.19.5",id:"v4195",level:2},{value:"Bug Fixes",id:"bug-fixes-29",level:3},{value:"v4.19.4",id:"v4194",level:2},{value:"Bug Fixes",id:"bug-fixes-30",level:3},{value:"v4.19.3",id:"v4193",level:2},{value:"Bug Fixes",id:"bug-fixes-31",level:3},{value:"v4.19.2",id:"v4192",level:2},{value:"Changes",id:"changes-13",level:3},{value:"Features",id:"features-24",level:3},{value:"Bug Fixes",id:"bug-fixes-32",level:3},{value:"v4.19.1",id:"v4191",level:2},{value:"Bug Fixes",id:"bug-fixes-33",level:3},{value:"v4.19.0",id:"v4190",level:2},{value:"Changes",id:"changes-14",level:3},{value:"Features",id:"features-25",level:3},{value:"Bug Fixes",id:"bug-fixes-34",level:3},{value:"v4.18.5",id:"v4185",level:2},{value:"Bug Fixes",id:"bug-fixes-35",level:3},{value:"v4.18.4",id:"v4184",level:2},{value:"Bug Fixes",id:"bug-fixes-36",level:3},{value:"v4.18.3",id:"v4183",level:2},{value:"Changes",id:"changes-15",level:3},{value:"Bug Fixes",id:"bug-fixes-37",level:3},{value:"v4.18.2",id:"v4182",level:2},{value:"Bug Fixes",id:"bug-fixes-38",level:3},{value:"v4.18.1",id:"v4181",level:2},{value:"Features",id:"features-26",level:3},{value:"Bug Fixes",id:"bug-fixes-39",level:3},{value:"v4.18.0",id:"v4180",level:2},{value:"Changes",id:"changes-16",level:3},{value:"Features",id:"features-27",level:3},{value:"Bug Fixes",id:"bug-fixes-40",level:3},{value:"v4.17.4",id:"v4174",level:2},{value:"Bug Fixes",id:"bug-fixes-41",level:3},{value:"v4.17.3",id:"v4173",level:2},{value:"Features",id:"features-28",level:3},{value:"Bug Fixes",id:"bug-fixes-42",level:3},{value:"v4.17.2",id:"v4172",level:2},{value:"Bug Fixes",id:"bug-fixes-43",level:3},{value:"v4.17.1",id:"v4171",level:2},{value:"Bug Fixes",id:"bug-fixes-44",level:3},{value:"v4.17.0",id:"v4170",level:2},{value:"Changes",id:"changes-17",level:3},{value:"Features",id:"features-29",level:3},{value:"Bug Fixes",id:"bug-fixes-45",level:3},{value:"v4.16.0",id:"v4160",level:2},{value:"Changes",id:"changes-18",level:3},{value:"Features",id:"features-30",level:3},{value:"Bug Fixes",id:"bug-fixes-46",level:3},{value:"v4.15.2",id:"v4152",level:2},{value:"Bug Fixes",id:"bug-fixes-47",level:3},{value:"v4.15.1",id:"v4151",level:2},{value:"Bug Fixes",id:"bug-fixes-48",level:3},{value:"v4.15.0",id:"v4150",level:2},{value:"Features",id:"features-31",level:3},{value:"Bug Fixes",id:"bug-fixes-49",level:3},{value:"v4.14.0",id:"v4140",level:2},{value:"Changes",id:"changes-19",level:3},{value:"Features",id:"features-32",level:3},{value:"Bug Fixes",id:"bug-fixes-50",level:3},{value:"v4.13.1",id:"v4131",level:2},{value:"Bug Fixes",id:"bug-fixes-51",level:3},{value:"v4.13.0",id:"v4130",level:2},{value:"Changes",id:"changes-20",level:3},{value:"Features",id:"features-33",level:3},{value:"Bug Fixes",id:"bug-fixes-52",level:3},{value:"v4.12.2",id:"v4122",level:2},{value:"Features",id:"features-34",level:3},{value:"Bug Fixes",id:"bug-fixes-53",level:3},{value:"v4.12.1",id:"v4121",level:2},{value:"Bug Fixes",id:"bug-fixes-54",level:3},{value:"v4.12.0",id:"v4120",level:2},{value:"Changes",id:"changes-21",level:3},{value:"Features",id:"features-35",level:3},{value:"Bug Fixes",id:"bug-fixes-55",level:3},{value:"v4.11.2",id:"v4112",level:2},{value:"Changes",id:"changes-22",level:3},{value:"Bug Fixes",id:"bug-fixes-56",level:3},{value:"v4.11.0",id:"v4110",level:2},{value:"Changes",id:"changes-23",level:3},{value:"Features",id:"features-36",level:3},{value:"Bug Fixes",id:"bug-fixes-57",level:3},{value:"v4.10.4",id:"v4104",level:2},{value:"Bug Fixes",id:"bug-fixes-58",level:3},{value:"v4.10.3",id:"v4103",level:2},{value:"Changes",id:"changes-24",level:3},{value:"Bug Fixes",id:"bug-fixes-59",level:3},{value:"v4.10.1",id:"v4101",level:2},{value:"Bug Fixes",id:"bug-fixes-60",level:3},{value:"v4.10.0",id:"v4100",level:2},{value:"Changes",id:"changes-25",level:3},{value:"Features",id:"features-37",level:3},{value:"Bug Fixes",id:"bug-fixes-61",level:3},{value:"v4.9.0",id:"v490",level:2},{value:"Changes",id:"changes-26",level:3},{value:"Features",id:"features-38",level:3},{value:"Bug Fixes",id:"bug-fixes-62",level:3},{value:"v4.8.2",id:"v482",level:2},{value:"Bug Fixes",id:"bug-fixes-63",level:3},{value:"v4.8.1",id:"v481",level:2},{value:"Features",id:"features-39",level:3},{value:"Bug Fixes",id:"bug-fixes-64",level:3},{value:"v4.8.0",id:"v480",level:2},{value:"Changes",id:"changes-27",level:3},{value:"Features",id:"features-40",level:3},{value:"Bug Fixes",id:"bug-fixes-65",level:3},{value:"v4.7.1",id:"v471",level:2},{value:"Bug Fixes",id:"bug-fixes-66",level:3},{value:"v4.7.0",id:"v470",level:2},{value:"Changes",id:"changes-28",level:3},{value:"Features",id:"features-41",level:3},{value:"Bug Fixes",id:"bug-fixes-67",level:3},{value:"v4.6.4",id:"v464",level:2},{value:"Changes",id:"changes-29",level:3},{value:"Features",id:"features-42",level:3},{value:"Bug Fixes",id:"bug-fixes-68",level:3},{value:"v4.6.3",id:"v463",level:2},{value:"Bug Fixes",id:"bug-fixes-69",level:3},{value:"v4.6.0",id:"v460",level:2},{value:"Changes",id:"changes-30",level:3},{value:"Features",id:"features-43",level:3},{value:"Bug Fixes",id:"bug-fixes-70",level:3},{value:"v4.5.0",id:"v450",level:2},{value:"Changes",id:"changes-31",level:3},{value:"Features",id:"features-44",level:3},{value:"Bug Fixes",id:"bug-fixes-71",level:3},{value:"v4.4.0",id:"v440",level:2},{value:"Changes",id:"changes-32",level:3},{value:"Features",id:"features-45",level:3},{value:"Bug Fixes",id:"bug-fixes-72",level:3},{value:"v4.3.0",id:"v430",level:2},{value:"Changes",id:"changes-33",level:3},{value:"Features",id:"features-46",level:3},{value:"Bug Fixes",id:"bug-fixes-73",level:3},{value:"v4.2.0",id:"v420",level:2},{value:"Changes",id:"changes-34",level:3},{value:"Features",id:"features-47",level:3},{value:"Bug Fixes",id:"bug-fixes-74",level:3},{value:"v4.1.0",id:"v410",level:2},{value:"Changes",id:"changes-35",level:3},{value:"Features",id:"features-48",level:3},{value:"Bug Fixes",id:"bug-fixes-75",level:3},{value:"v4.0.1",id:"v401",level:2},{value:"Features",id:"features-49",level:3},{value:"v4.0.0",id:"v400",level:2},{value:"Breaking Changes",id:"breaking-changes",level:3},{value:"Changes",id:"changes-36",level:3},{value:"Features",id:"features-50",level:3},{value:"Bug Fixes",id:"bug-fixes-76",level:3},{value:"v3.1.0",id:"v310",level:2},{value:"Changes",id:"changes-37",level:3},{value:"Features",id:"features-51",level:3},{value:"Bug Fixes",id:"bug-fixes-77",level:3},{value:"v3.0.4",id:"v304",level:2},{value:"Bug Fixes",id:"bug-fixes-78",level:3},{value:"v3.0.3",id:"v303",level:2},{value:"Changes",id:"changes-38",level:3},{value:"Features",id:"features-52",level:3},{value:"v3.0.2",id:"v302",level:2},{value:"Bug Fixes",id:"bug-fixes-79",level:3},{value:"v3.0.1",id:"v301",level:2},{value:"Features",id:"features-53",level:3},{value:"Bug Fixes",id:"bug-fixes-80",level:3},{value:"v3.0.0",id:"v300",level:2},{value:"Breaking Changes",id:"breaking-changes-1",level:3},{value:"Changes",id:"changes-39",level:3},{value:"Features",id:"features-54",level:3},{value:"Bug Fixes",id:"bug-fixes-81",level:3},{value:"v2.4.2",id:"v242",level:2},{value:"Changes",id:"changes-40",level:3},{value:"v2.4.1",id:"v241",level:2},{value:"Features",id:"features-55",level:3},{value:"v2.4.0",id:"v240",level:2},{value:"Changes",id:"changes-41",level:3},{value:"Features",id:"features-56",level:3},{value:"Bug Fixes",id:"bug-fixes-82",level:3},{value:"v2.3.1",id:"v231",level:2},{value:"Bug Fixes",id:"bug-fixes-83",level:3},{value:"v2.3.0",id:"v230",level:2},{value:"Changes",id:"changes-42",level:3},{value:"Features",id:"features-57",level:3},{value:"Bug Fixes",id:"bug-fixes-84",level:3},{value:"v2.2.0",id:"v220",level:2},{value:"Changes",id:"changes-43",level:3},{value:"Features",id:"features-58",level:3},{value:"Bug Fixes",id:"bug-fixes-85",level:3},{value:"v2.1.0",id:"v210",level:2},{value:"Changes",id:"changes-44",level:3},{value:"Features",id:"features-59",level:3},{value:"Bug Fixes",id:"bug-fixes-86",level:3},{value:"v2.0.0",id:"v200",level:2},{value:"Breaking Changes",id:"breaking-changes-2",level:3},{value:"Changes",id:"changes-45",level:3},{value:"Features",id:"features-60",level:3},{value:"Bug Fixes",id:"bug-fixes-87",level:3},{value:"v1.1.2",id:"v112",level:2},{value:"Bug Fixes",id:"bug-fixes-88",level:3},{value:"v1.1.1",id:"v111",level:2},{value:"Bug Fixes",id:"bug-fixes-89",level:3},{value:"v1.1.0",id:"v110",level:2},{value:"Changes",id:"changes-46",level:3},{value:"Features",id:"features-61",level:3},{value:"Bug Fixes",id:"bug-fixes-90",level:3},{value:"v1.0.0",id:"v100",level:2},{value:"Changes",id:"changes-47",level:3},{value:"Features",id:"features-62",level:3},{value:"Bug Fixes",id:"bug-fixes-91",level:3},{value:"2021.12.16",id:"20211216",level:2},{value:"Changes",id:"changes-48",level:3},{value:"Features",id:"features-63",level:3},{value:"Bug Fixes",id:"bug-fixes-92",level:3},{value:"2021.11.18",id:"20211118",level:2},{value:"Changes",id:"changes-49",level:3},{value:"Features",id:"features-64",level:3},{value:"Bug Fixes",id:"bug-fixes-93",level:3},{value:"2021.09.30",id:"20210930",level:2},{value:"Changes",id:"changes-50",level:3},{value:"Features",id:"features-65",level:3},{value:"Bug Fixes",id:"bug-fixes-94",level:3},{value:"2021.08.26",id:"20210826",level:2},{value:"Changes",id:"changes-51",level:3},{value:"Features",id:"features-66",level:3},{value:"Bug Fixes",id:"bug-fixes-95",level:3},{value:"2021.07.29",id:"20210729",level:2},{value:"Changes",id:"changes-52",level:3},{value:"Features",id:"features-67",level:3},{value:"Bug Fixes",id:"bug-fixes-96",level:3},{value:"2021.06.24",id:"20210624",level:2},{value:"Breaking Changes",id:"breaking-changes-3",level:3},{value:"Changes",id:"changes-53",level:3},{value:"Features",id:"features-68",level:3},{value:"Bug Fixes",id:"bug-fixes-97",level:3},{value:"2021.05.27",id:"20210527",level:2},{value:"Breaking Changes",id:"breaking-changes-4",level:3},{value:"Changes",id:"changes-54",level:3},{value:"Features",id:"features-69",level:3},{value:"Bug Fixes",id:"bug-fixes-98",level:3},{value:"2021.04.29",id:"20210429",level:2},{value:"Breaking Changes",id:"breaking-changes-5",level:3},{value:"Changes",id:"changes-55",level:3},{value:"Features",id:"features-70",level:3},{value:"Bug Fixes",id:"bug-fixes-99",level:3},{value:"2021.03.25",id:"20210325",level:2},{value:"Breaking Changes",id:"breaking-changes-6",level:3},{value:"Changes",id:"changes-56",level:3},{value:"Features",id:"features-71",level:3},{value:"Bug Fixes",id:"bug-fixes-100",level:3},{value:"2021.02.24",id:"20210224",level:2},{value:"Breaking Changes",id:"breaking-changes-7",level:3},{value:"Changes",id:"changes-57",level:3},{value:"Experimental Features",id:"experimental-features",level:3},{value:"Features",id:"features-72",level:3},{value:"Bug Fixes",id:"bug-fixes-101",level:3},{value:"2021.01.28",id:"20210128",level:2},{value:"Breaking Changes",id:"breaking-changes-8",level:3},{value:"Changes",id:"changes-58",level:3},{value:"Experimental Features",id:"experimental-features-1",level:3},{value:"Features",id:"features-73",level:3},{value:"Bug Fixes",id:"bug-fixes-102",level:3},{value:"2020.12.16",id:"20201216",level:2},{value:"Breaking Changes",id:"breaking-changes-9",level:3},{value:"Changes",id:"changes-59",level:3},{value:"Experimental Features",id:"experimental-features-2",level:3},{value:"Features",id:"features-74",level:3},{value:"Bug Fixes",id:"bug-fixes-103",level:3},{value:"2020.10.29",id:"20201029",level:2},{value:"Changes",id:"changes-60",level:3},{value:"Experimental Features",id:"experimental-features-3",level:3},{value:"Features",id:"features-75",level:3},{value:"Bug Fixes",id:"bug-fixes-104",level:3},{value:"2020.09.30",id:"20200930",level:2},{value:"Breaking Changes",id:"breaking-changes-10",level:3},{value:"Changes",id:"changes-61",level:3},{value:"Experimental Features",id:"experimental-features-4",level:3},{value:"Features",id:"features-76",level:3},{value:"Bug Fixes",id:"bug-fixes-105",level:3},{value:"2020.08.28",id:"20200828",level:2},{value:"Breaking Changes",id:"breaking-changes-11",level:3},{value:"Changes",id:"changes-62",level:3},{value:"Features",id:"features-77",level:3},{value:"Bug Fixes",id:"bug-fixes-106",level:3},{value:"2020.07.28",id:"20200728",level:2},{value:"Breaking Changes",id:"breaking-changes-12",level:3},{value:"Changes",id:"changes-63",level:3},{value:"Features",id:"features-78",level:3},{value:"Bug Fixes",id:"bug-fixes-107",level:3},{value:"2020.06.25",id:"20200625",level:2},{value:"Changes",id:"changes-64",level:3},{value:"Experimental Features",id:"experimental-features-5",level:3},{value:"Features",id:"features-79",level:3},{value:"Bug Fixes",id:"bug-fixes-108",level:3},{value:"2020.05.28",id:"20200528",level:2},{value:"Changes",id:"changes-65",level:3},{value:"Experimental Features",id:"experimental-features-6",level:3},{value:"Features",id:"features-80",level:3},{value:"Bug Fixes",id:"bug-fixes-109",level:3},{value:"2020.04.29",id:"20200429",level:2},{value:"Changes",id:"changes-66",level:3},{value:"Features",id:"features-81",level:3},{value:"Bug Fixes",id:"bug-fixes-110",level:3},{value:"2020.03.26",id:"20200326",level:2},{value:"Changes",id:"changes-67",level:3},{value:"Features",id:"features-82",level:3},{value:"2020.02.27",id:"20200227",level:2},{value:"Changes",id:"changes-68",level:3},{value:"Features",id:"features-83",level:3},{value:"Bug Fixes",id:"bug-fixes-111",level:3},{value:"2020.01.31",id:"20200131",level:2},{value:"Changes",id:"changes-69",level:3},{value:"Features",id:"features-84",level:3},{value:"Bug Fixes",id:"bug-fixes-112",level:3},{value:"0.2 - 2019.10.30",id:"02---20191030",level:2},{value:"Changes",id:"changes-70",level:3},{value:"Features",id:"features-85",level:3},{value:"Bug Fixes",id:"bug-fixes-113",level:3},{value:"0.1 - 2019.02.28",id:"01---20190228",level:2}],f={toc:N},b="wrapper";function v(e){var t=e,{components:n}=t,i=u(t,["components"]);return(0,a.yg)(b,h(m(m({},f),i),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",m({},{id:"changelog"}),"Changelog"),(0,a.yg)("p",null,"This changelog documents all notable changes to Tenzir and is updated on every release."),(0,a.yg)("h2",m({},{id:"next"}),"Next"),(0,a.yg)("h3",m({},{id:"changes"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"TQL2 is now the default and only option for writing pipelines with Tenzir. The environment variable ",(0,a.yg)("inlineCode",{parentName:"li"},"TENZIR_TQL2"),", the configuration option ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.tql2")," have no more effect. Using the command-line option ",(0,a.yg)("inlineCode",{parentName:"li"},"--tql2")," results in an error.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5086"}),"#5086"))),(0,a.yg)("h2",m({},{id:"v4321"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.32.1"}),"v4.32.1")),(0,a.yg)("h3",m({},{id:"features"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"to_google_secops")," operator now has two additonal configuration options to set the ",(0,a.yg)("inlineCode",{parentName:"li"},"max_request_size")," and the ",(0,a.yg)("inlineCode",{parentName:"li"},"batch_timeout"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5108"}),"#5108"))),(0,a.yg)("h3",m({},{id:"bug-fixes"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The default max request size has been changed from ",(0,a.yg)("inlineCode",{parentName:"li"},"4MB")," to ",(0,a.yg)("inlineCode",{parentName:"li"},"1MB")," for ",(0,a.yg)("inlineCode",{parentName:"li"},"to_google_secops")," to align with the API.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5108"}),"#5108"))),(0,a.yg)("h2",m({},{id:"v4320"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.32.0"}),"v4.32.0")),(0,a.yg)("h3",m({},{id:"features-1"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},".?")," operator is a new alternative to the ",(0,a.yg)("inlineCode",{parentName:"p"},".")," operator that allows field access without warnings when the field does not exist or the parent record is ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),". For example, both ",(0,a.yg)("inlineCode",{parentName:"p"},"foo.bar")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"foo.?bar")," return ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," if ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),", or if ",(0,a.yg)("inlineCode",{parentName:"p"},"bar")," does not exist, but the latter does not warn about this. Functionally, ",(0,a.yg)("inlineCode",{parentName:"p"},"foo.?bar")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},'foo.bar if foo.has("bar")'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5099"}),"#5099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"get")," method on records or lists is an alternative to index expressions that allows for specifying a default value when the list index is out of bounds or the record field is missing. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"foo[bar]")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"foo.get(bar)"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"foo[bar] if foo.has(bar) else fallback")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"foo.get(bar, fallback)"),". This works for both records and lists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5099"}),"#5099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Indexing expressions on records now support numeric indices to access record fields. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"this[0]")," returns the first field of the top-level record.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5099"}),"#5099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"has")," method on records no longer requires the field name to be a constant.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5099"}),"#5099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," function replaces the previous ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," operator as a more flexible mechanism to access variables from the configuration file. If you rely on the previous behavior, use ",(0,a.yg)("inlineCode",{parentName:"p"},"from config()")," as a replacement.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5099"}),"#5099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now provide an integration for customers with a Google SecOps workspace via the ",(0,a.yg)("inlineCode",{parentName:"p"},"to_google_secops")," operator. This new operator can send logs via the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries"}),"Chronicle Ingestion API"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5101"}),"#5101")))),(0,a.yg)("h3",m({},{id:"bug-fixes-1"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"from_opensearch")," operator to crash on high volume input. Additionally, the operator now correctly responds to requests.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5096"}),"#5096"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_json")," function no longer crashes in case it encounters invalid arrays.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5100"}),"#5100"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"save_tcp")," operator no longer panics or crashes on startup when it cannot connect to the provided hostname and port, and instead produces a helpful error message.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5103"}),"#5103")))),(0,a.yg)("h2",m({},{id:"v4312"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.31.2"}),"v4.31.2")),(0,a.yg)("h3",m({},{id:"features-2"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"You can now specify an optional compression method for the files written by the ",(0,a.yg)("inlineCode",{parentName:"li"},"to_hive")," operator.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5088"}),"#5088"))),(0,a.yg)("h3",m({},{id:"bug-fixes-2"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We removed the limit of 20,000 elements in lists and records for ",(0,a.yg)("inlineCode",{parentName:"li"},"read_*")," operators and ",(0,a.yg)("inlineCode",{parentName:"li"},"parse_*")," functions.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5091"}),"#5091"))),(0,a.yg)("h2",m({},{id:"v4310"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.31.0"}),"v4.31.0")),(0,a.yg)("h3",m({},{id:"features-3"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added a ",(0,a.yg)("inlineCode",{parentName:"p"},"from_opensearch")," operator that presents a OpenSearch-compatible REST API to enable easy interop with tools that can send data to OpenSearch or Elasticsearch, e.g. Filebeat, Winlogbeat etc.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5075"}),"#5075"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added a new ",(0,a.yg)("inlineCode",{parentName:"p"},"write_syslog")," operator to format events as syslog messages.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5083"}),"#5083"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir now supports inline ",(0,a.yg)("inlineCode",{parentName:"p"},"if \u2026 else")," expressions in the form ",(0,a.yg)("inlineCode",{parentName:"p"},"foo if pred"),", which returns ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," if ",(0,a.yg)("inlineCode",{parentName:"p"},"pred")," evaluates to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," otherwise, and ",(0,a.yg)("inlineCode",{parentName:"p"},"foo if pred else bar"),", which instead of falling back to ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," falls back to ",(0,a.yg)("inlineCode",{parentName:"p"},"bar"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5085"}),"#5085")))),(0,a.yg)("h3",m({},{id:"bug-fixes-3"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"from_fluent_bit")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to_fluent_bit")," operators no longer crash when trying to handle very large payloads.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5084"}),"#5084"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The binary operators ",(0,a.yg)("inlineCode",{parentName:"p"},"and")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"or")," now skip evaluating their right-hand side when not necessary. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'where this.has("foo") and foo == 42')," now avoids emitting a warning when ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," does not exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5085"}),"#5085")))),(0,a.yg)("h2",m({},{id:"v4303"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.30.3"}),"v4.30.3")),(0,a.yg)("h3",m({},{id:"features-4"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We introduced a new ",(0,a.yg)("inlineCode",{parentName:"p"},"type_of(x: any) -> record")," function that returns the exact type definition of a TQL expression. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"this = type_of(this)")," replaces an event with its schema's definition.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5062"}),"#5062"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint gained a new option ",(0,a.yg)("inlineCode",{parentName:"p"},"schema"),", which can be set to ",(0,a.yg)("inlineCode",{parentName:"p"},"legacy")," (default), ",(0,a.yg)("inlineCode",{parentName:"p"},"exact"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"never"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"legacy")," option causes the schema definition to be rendered in a simplified way, which is the current default. The ",(0,a.yg)("inlineCode",{parentName:"p"},"exact")," option causes the schema definitions to be rendered exactly without omitting any information. Set the option to ",(0,a.yg)("inlineCode",{parentName:"p"},"never")," to omit schema definitions entirely.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5062"}),"#5062")))),(0,a.yg)("h3",m({},{id:"bug-fixes-4"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"to_fluent_bit")," operator no longer crashes on larger inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5076"}),"#5076"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a hang in ",(0,a.yg)("inlineCode",{parentName:"p"},"to_azure_log_analytics")," for pipelines that never exhausted their input.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5077"}),"#5077")))),(0,a.yg)("h2",m({},{id:"v4302"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.30.2"}),"v4.30.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-5"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Fixed an error in the ",(0,a.yg)("inlineCode",{parentName:"li"},"{from,to}_fluent_bit")," operators that would cause it to fail to start successfully when using an input plugin (in particular the ",(0,a.yg)("inlineCode",{parentName:"li"},"elasticsearch")," plugin) when the TLS setting was enabled without specifying a keyfile.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5070"}),"#5070"))),(0,a.yg)("h2",m({},{id:"v4301"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.30.1"}),"v4.30.1")),(0,a.yg)("h3",m({},{id:"changes-1"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The default value for the ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.active-partition-timeout")," option increased from 30s to 5min. The option controls how long the ",(0,a.yg)("inlineCode",{parentName:"li"},"import")," operators waits until flushing events to disk. In the past, this value was set so low because the ",(0,a.yg)("inlineCode",{parentName:"li"},"export")," operator was only able to access already flushed events. This is no longer the case, removing the need for the low timeout. Note that the ",(0,a.yg)("inlineCode",{parentName:"li"},"import")," operator always immediately flushes events after a pipeline with ",(0,a.yg)("inlineCode",{parentName:"li"},"import")," completes, or when the node shuts down.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5056"}),"#5056"))),(0,a.yg)("h3",m({},{id:"features-5"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The import buffer timeout is now configurable via the ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.import-buffer-timeout")," option. The option defaults to 1 second, and controls how long the ",(0,a.yg)("inlineCode",{parentName:"li"},"import")," operator buffers events for batching before forwarding them. Set the option to ",(0,a.yg)("inlineCode",{parentName:"li"},"0s")," to enable an unbuffered mode with minimal latency, or to a higher value to increase performance.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5056"}),"#5056"))),(0,a.yg)("h2",m({},{id:"v4300"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.30.0"}),"v4.30.0")),(0,a.yg)("h3",m({},{id:"changes-2"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_host_verification")," option has been removed from the ",(0,a.yg)("inlineCode",{parentName:"p"},"load_http"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_email")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_http")," operators. Its functionality has been merged into the ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_peer_verification")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5022"}),"#5022"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},'metrics "operator"')," is now deprecated. Use ",(0,a.yg)("inlineCode",{parentName:"p"},'metrics "pipeline"')," instead, which offers a pre-aggregated view of pipeline metrics. We plan to remove operator metrics in an upcoming release, as they are too expensive in large-scale deployments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5024"}),"#5024")))),(0,a.yg)("h3",m({},{id:"features-6"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We introduced common TLS settings for all operators that support TLS. The Tenzir config now has a key ",(0,a.yg)("inlineCode",{parentName:"p"},"cacert"),", which will set the CA certificate file for all operators using it. The default for this will be chosen appropriately for the system.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5022"}),"#5022"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},'metrics "pipeline"')," provides an easy way to view the ingress and egress of pipelines. The new metrics show the ingress and egress of every pipeline in windows of ten seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5024"}),"#5024"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We have added a new ",(0,a.yg)("inlineCode",{parentName:"p"},"to_clickhouse")," operator, which enables you to easily send events to ClickHouse.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5032"}),"#5032"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"load_gcs")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_gcs")," operators are now available in TQL2 to interact with Google Cloud Storage.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5054"}),"#5054"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"assert_throughput")," operators allows for checking whether a pipeline meets the minimum expected throughput at any place in the pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5055"}),"#5055")))),(0,a.yg)("h3",m({},{id:"bug-fixes-6"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," operator no longer incorrectly attempts to use parsers with a known file extension that is a suffix of the actual file extension. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'from "file.foojson"')," will no longer attempt to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," parser by default, while ",(0,a.yg)("inlineCode",{parentName:"p"},'from "file.foo.json"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'from "file.json"')," continue to work as expected. This fixes an error for ",(0,a.yg)("inlineCode",{parentName:"p"},".ndjson")," files, which could previously not decide between the ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ndjson")," parsers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5050"}),"#5050"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_zeek_tsv")," operator sometimes produced an invalid field with the name ",(0,a.yg)("inlineCode",{parentName:"p"},"\\0")," for types without a schema specified. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5052"}),"#5052"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a regression that caused strings passed as options to the ",(0,a.yg)("inlineCode",{parentName:"p"},"from_fluent_bit")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to_fluent_bit")," operators to incorrectly be surrounded by double quotes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5053"}),"#5053"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"to_fluent_bit")," incorrectly reported zero bytes being pushed to the Fluent Bit engine as an error. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5053"}),"#5053")))),(0,a.yg)("h2",m({},{id:"v4292"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.29.2"}),"v4.29.2")),(0,a.yg)("h3",m({},{id:"changes-3"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We have improved how internal errors are presented to the user, making it easier to report and analyze bugs.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5023"}),"#5023"))),(0,a.yg)("h3",m({},{id:"features-7"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The newly added ",(0,a.yg)("inlineCode",{parentName:"li"},"max_buffered_chunks")," for ",(0,a.yg)("inlineCode",{parentName:"li"},"load_tcp")," controls how many reads the operator schedules in advance on the socket. The option defaults to 10.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5040"}),"#5040"))),(0,a.yg)("h3",m({},{id:"bug-fixes-7"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Installing packages no longer fails when packages contain additional fields, and instead warns about the unexpected fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5031"}),"#5031"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused a loss of type names for nested fields in assignments, causing field metadata in ",(0,a.yg)("inlineCode",{parentName:"p"},"write_feather")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write_parquet")," to be missing.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5033"}),"#5033"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused unnecessary idle wakeups in the ",(0,a.yg)("inlineCode",{parentName:"p"},"load_tcp")," operator, throwing off scheduling of pipelines using it. Under rare circumstances, this could also lead to partially duplicated output of the operator's nested pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5035"}),"#5035"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"from_fluent_bit")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to_fluent_bit")," operators that caused positive integer options to be forwarded with a leading ",(0,a.yg)("inlineCode",{parentName:"p"},"+"),". For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"options={port: 9200}")," forwarded the option ",(0,a.yg)("inlineCode",{parentName:"p"},"port=+9200")," to Fluent Bit.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5037"}),"#5037"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," operator that caused caches that were capped just short of the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.cache.capacity")," option to still get evicted immediately.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5039"}),"#5039"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," operator no longer hangs indefinitely when creating a new cache from a pipeline that returned zero events. For example, the pipeline ",(0,a.yg)("inlineCode",{parentName:"p"},'from {} | head 0 | cache "whoops"')," never exited before this fix.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5042"}),"#5042"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Expressions that have varying output types for the same input types (mostly the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_*")," family of functions) no longer trigger an assertion on certain inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5043"}),"#5043")))),(0,a.yg)("h2",m({},{id:"v4291"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.29.1"}),"v4.29.1")),(0,a.yg)("h3",m({},{id:"features-8"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"/pipeline/create")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"/pipeline/launch")," endpoints now accept an optional ",(0,a.yg)("inlineCode",{parentName:"li"},"id")," parameter for assigning the pipeline's ID manually.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/5026"}),"#5026"))),(0,a.yg)("h3",m({},{id:"bug-fixes-8"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Dropping all fields from a record with the ",(0,a.yg)("inlineCode",{parentName:"p"},"drop")," operator no longer removes the record itself. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"from {x: {y: 0}} | drop x.y")," now returns ",(0,a.yg)("inlineCode",{parentName:"p"},"{x: {}}")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"{}"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5021"}),"#5021"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused pipelines with ",(0,a.yg)("inlineCode",{parentName:"p"},"from_fluent_bit")," to not report their startup successfully, causing errors when deploying pipelines starting with the operator through the Tenzir Platform.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5025"}),"#5025"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"tls")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," operator no longer directly emits an error.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5027"}),"#5027"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_xsv")," family of operators and functions that caused the parser to fail unexpectedly when the data contained a list (as specified through the list separator) for fields where the provided ",(0,a.yg)("inlineCode",{parentName:"p"},"schema")," did not expect lists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5028"}),"#5028"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The resolution of user-defined operator aliases in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.operators")," section is no longer order-dependent. Previously, an operator ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," may have depended on an operator ",(0,a.yg)("inlineCode",{parentName:"p"},"bar"),", but not the other way around. This limitation no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5029"}),"#5029")))),(0,a.yg)("h2",m({},{id:"v4290"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.29.0"}),"v4.29.0")),(0,a.yg)("h3",m({},{id:"changes-4"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sep")," argument on the ",(0,a.yg)("inlineCode",{parentName:"p"},"flatten")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"unflatten")," functions is now a positional argument, allowing you to simply write ",(0,a.yg)("inlineCode",{parentName:"p"},'record.flatten("-")'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unflatten")," option found on many ",(0,a.yg)("inlineCode",{parentName:"p"},"read_*")," operators and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_*")," functions is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"unflatten_separator"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"field_sep"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"list_sep")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"null_value")," options on the XSV operators and functions (such as ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_csv")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_tsv"),") are now named arguments on all of them and are called ",(0,a.yg)("inlineCode",{parentName:"p"},"field_separator"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"list_separator")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"null_value"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"field_split")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"list_split")," arguments for the ",(0,a.yg)("inlineCode",{parentName:"p"},"read_kv")," operator and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_kv")," function are now named arguments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_area"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_bar"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_pie")," operators no longer reject null-values. Previously, gaps in charts were only supported for ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_line"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5009"}),"#5009"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ndjson")," is now more compact and no longer includes unnecessary whitespace. Additionally, ",(0,a.yg)("inlineCode",{parentName:"p"},"write_json")," no longer prints a trailing whitespace after each comma.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5015"}),"#5015")))),(0,a.yg)("h3",m({},{id:"features-9"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"New functions ",(0,a.yg)("inlineCode",{parentName:"p"},"years"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"months"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"weeks"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"days"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hours"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"minutes"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"seconds"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"milliseconds"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"microseconds")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"nanoseconds")," convert a numeric value to the equivalent duration. Their counterpart ",(0,a.yg)("inlineCode",{parentName:"p"},"count_*")," functions calculate how many units can the duration be broken into, i.e. ",(0,a.yg)("inlineCode",{parentName:"p"},"duration / unit"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4985"}),"#4985"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"abs")," function calculates the absolute value for a number or a duration.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4985"}),"#4985"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"write_xsv")," family of operators now accepts multi-character separators, instead of being restricted to a single character.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added the ",(0,a.yg)("inlineCode",{parentName:"p"},"write_kv")," operator, allowing you to write events as Key-Value pairs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added the functions ",(0,a.yg)("inlineCode",{parentName:"p"},"any.print_json()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"any.print_yaml()")," to print any value as a JSON or YAML string.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added the functions ",(0,a.yg)("inlineCode",{parentName:"p"},"record.print_kv()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"record.print_csv()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"record.print_ssv()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"record.print_tsv()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"record.print_xsv()")," to print records as the respective format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5001"}),"#5001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"base")," option for ",(0,a.yg)("inlineCode",{parentName:"p"},"int")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"uint")," functions allows parsing hexadecimal numbers in strings.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5006"}),"#5006")))),(0,a.yg)("h3",m({},{id:"bug-fixes-9"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The implicit events sink of the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," binary now respects the ",(0,a.yg)("inlineCode",{parentName:"p"},"--color=[always|never|auto]")," option and the ",(0,a.yg)("inlineCode",{parentName:"p"},"NO_COLOR")," environment variable. Previously, color usage was only determined based on whether ",(0,a.yg)("inlineCode",{parentName:"p"},"stdout")," had a TTY attached.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5007"}),"#5007"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused ",(0,a.yg)("inlineCode",{parentName:"p"},"type_id(this)")," to return inconsistent values for schemas with metadata attached, e.g., after assigning a schema name via ",(0,a.yg)("inlineCode",{parentName:"p"},'@name = "new_name"')," or using operators like ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_line"),' that add custom metadata to a schema for use of the Tenzir Platform. Unfortunately, this may cause charts or tables added to dashboards before Tenzir Platform v1.7 to break. To fix them, click on the action menu on the chart or table on the dashboard, click "Open in Explorer," and re-add the chart or table to the dashboard. We are sorry about this inconvenience.\n',(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5008"}),"#5008"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A compilation error within an ",(0,a.yg)("inlineCode",{parentName:"p"},"if")," statement no longer causes pipelines to crash.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5011"}),"#5011"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now include the ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," operator in the Tenzir binary packages.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5012"}),"#5012"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an optimization bug that caused pipelines of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe <topic> | where <value> in <field>")," to evaluate the predicate ",(0,a.yg)("inlineCode",{parentName:"p"},"<field> in <value>")," instead, returning incorrect results from the pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5014"}),"#5014"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_grok")," operator and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_grok")," functions no longer crash when providing an invalid Grok expression.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5018"}),"#5018")))),(0,a.yg)("h2",m({},{id:"v4282"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.28.2"}),"v4.28.2")),(0,a.yg)("h3",m({},{id:"features-10"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"fill")," option on ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_area"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_bar")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_line")," allows you to specify a value to replace ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),"s with and fill gaps.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4967"}),"#4967"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to")," operators now assume ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"https")," URLs to produce or accept JSON, unless the filename in the URL contains a known file extension.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4990"}),"#4990"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"write_json")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ndjson")," operators now have a ",(0,a.yg)("inlineCode",{parentName:"p"},"arrays_of_objects")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4994"}),"#4994")))),(0,a.yg)("h3",m({},{id:"bug-fixes-10"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We fixed a bug in ",(0,a.yg)("inlineCode",{parentName:"li"},"load_amqp")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"save_amqp")," that prevented the node from starting if they were used in a pipeline configured as code and failed to connect.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4994"}),"#4994"))),(0,a.yg)("h2",m({},{id:"v4280"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.28.0"}),"v4.28.0")),(0,a.yg)("h3",m({},{id:"changes-5"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},'metrics "operator"')," no longer includes metrics from hidden pipelines, such as pipelines run under-the-hood by the Tenzir Platform.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4966"}),"#4966"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Unless specified explicitly, the ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," has no more default capacity in terms of number of events per cache. Instead, the node now tracks the global cache capacity in number of bytes. This is limited to 1GiB by default, and can be configured with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.cache.capacity")," option. For practical reasons, we require at least 64MiB of caches.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4984"}),"#4984"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default ",(0,a.yg)("inlineCode",{parentName:"p"},"write_timeout")," of caches increased from 1 minute to 10 minutes, and can now be configured with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.cache.lifetime")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4984"}),"#4984"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint now returns an additional field ",(0,a.yg)("inlineCode",{parentName:"p"},"state"),", which can be one of ",(0,a.yg)("inlineCode",{parentName:"p"},"running"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"completed"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"failed"),", indicating the status of the pipeline with the corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," operator at the time of the request.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4984"}),"#4984")))),(0,a.yg)("h3",m({},{id:"features-11"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"It is now possible to define additional patterns in the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_grok")," function.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," family of parsers now accept the ",(0,a.yg)("inlineCode",{parentName:"p"},"header")," as a list of strings as an alternative to a single delimited string.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"read_grok")," now accepts additional ",(0,a.yg)("inlineCode",{parentName:"p"},"pattern_definitions")," as either a ",(0,a.yg)("inlineCode",{parentName:"p"},"record")," mapping from pattern name to definition or a ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," of newline separated patterns definitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We introduced the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_kv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_tsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_xsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_yaml")," functions, allowing you to parse strings as those formats.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," function now handles cases where list elements mapped to different types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"load_stdin")," operator accepts bytes from standard input, while ",(0,a.yg)("inlineCode",{parentName:"p"},"save_stdout")," writes bytes to standard output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4969"}),"#4969"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can use the new ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_syslog")," function to parse a string as a syslog message.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4980"}),"#4980"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"to_opensearch")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," now feature an explicit ",(0,a.yg)("inlineCode",{parentName:"p"},"tls")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4983"}),"#4983")))),(0,a.yg)("h3",m({},{id:"bug-fixes-11"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Re-defining a predefined grok pattern no longer terminates the application.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"string.parse_json()")," function can now parse single numbers or strings instead of only objects.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"read_leef")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_leef")," now include the ",(0,a.yg)("inlineCode",{parentName:"p"},"event_class_id")," in their output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"read_yaml")," now properly parses numbers as numbers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4933"}),"#4933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We sqashed a bug that prevented the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node")," process from exiting cleanly while the ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator was used in a pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4978"}),"#4978"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an up to 60 seconds hang in requests to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint when the request was issued after the pipeline with the corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," operator was started and before it finished with an error and without results.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4984"}),"#4984")))),(0,a.yg)("h2",m({},{id:"v4270"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.27.0"}),"v4.27.0")),(0,a.yg)("h3",m({},{id:"changes-6"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"TQL1 is now deprecated in favor of TQL2. Starting a TQL1 pipeline issues a warning on startup nudging towards upgrading to TQL2, which will become the default in the upcoming Tenzir v5.0 release. This warning cannot be turned off.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4954"}),"#4954"))),(0,a.yg)("h3",m({},{id:"features-12"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Charting functionality is now available in TQL2 via the new ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_area"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_bar"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_line")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"chart_pie")," operators and the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://app.tenzir.com"}),"Tenzir Platform"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4888"}),"#4888"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"platform")," plugin now understands the ",(0,a.yg)("inlineCode",{parentName:"p"},"skip-peer-verification")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"cacert")," options in order to enable connections to self-hosted platform instances with self-signed TLS certificates.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4918"}),"#4918"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unroll")," operator now works for record fields as well as lists. The operator duplicates the surrounding event for every field in the specified record.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4934"}),"#4934"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"load_kafka")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_kafka")," operators can now authenticate with AWS MSK using IAM via the new ",(0,a.yg)("inlineCode",{parentName:"p"},"aws_iam")," options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4944"}),"#4944"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.retention.metrics")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.retention.diagnostics")," configuration options configure how long Tenzir Nodes retain metrics and diagnostics. The policies are checked once every hour.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4949"}),"#4949"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},'metrics "operator"')," now includes a new ",(0,a.yg)("inlineCode",{parentName:"p"},"batches")," field under the ",(0,a.yg)("inlineCode",{parentName:"p"},"input")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"output")," records that counts how many batches of events or bytes the metric was generated from.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4962"}),"#4962")))),(0,a.yg)("h3",m({},{id:"bug-fixes-12"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Operators such as ",(0,a.yg)("inlineCode",{parentName:"li"},"load_kafka"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"load_s3")," etc can now correctly read their respective YAML configs.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4944"}),"#4944"))),(0,a.yg)("h2",m({},{id:"v4260"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.26.0"}),"v4.26.0")),(0,a.yg)("h3",m({},{id:"changes-7"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Errors from the startup of configured pipelines, including those coming from configured packages, now have improved rendering.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4886"}),"#4886"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Timestamps are now printed with a ",(0,a.yg)("inlineCode",{parentName:"p"},"Z")," suffix to indicate that they are relative to UTC. Furthermore, the fractional part of the seconds is no longer always printed using 6 digits. Instead, timestamps that do not have sub-second information no longer have a fractional part. Other timestamps are either printed with 3, 6 or 9 fractional digits, depending on their resolution.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4916"}),"#4916"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Durations that are printed as minutes now use ",(0,a.yg)("inlineCode",{parentName:"p"},"min")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"m"),". Additionally, the fractional part of durations is now printed with full precision instead of being rounded to two digits.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4916"}),"#4916"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Contexts persist less frequently now in the background, reducing their resource usage.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4919"}),"#4919"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The implicit sources and sinks that can be set via commandline options or configuration now use TQL2.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4921"}),"#4921"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default implicit event sink now writes TQL values instead of JSON.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4921"}),"#4921")))),(0,a.yg)("h3",m({},{id:"features-13"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},'metrics "caf"')," offers insights into Tenzir's underlying actor system. This is primarily aimed at developers for performance benchmarking.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4897"}),"#4897"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"merge")," function combines two records. ",(0,a.yg)("inlineCode",{parentName:"p"},"merge(foo, bar)")," is a shorthand for ",(0,a.yg)("inlineCode",{parentName:"p"},"{...foo, ...bar}"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4897"}),"#4897"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added a ",(0,a.yg)("inlineCode",{parentName:"p"},"to_asl")," operator that can be used to send OCSF normalized events to an Amazon Security Lake.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4911"}),"#4911"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can use the new ",(0,a.yg)("inlineCode",{parentName:"p"},"string.match_regex(regex:string)")," function to check whether a string partially matches a regular expression.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4917"}),"#4917"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can use the new ",(0,a.yg)("inlineCode",{parentName:"p"},"write_tql")," operator to print events as TQL expressions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4921"}),"#4921"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added ",(0,a.yg)("inlineCode",{parentName:"p"},"strip")," options to ",(0,a.yg)("inlineCode",{parentName:"p"},"write_json")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ndjson"),", allowing you to strip null fields as well as empty records or lists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4921"}),"#4921")))),(0,a.yg)("h3",m({},{id:"bug-fixes-13"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an overzealous parameter validation bug that prevented the use of the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/launch")," API endpoint when specifying a ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_id")," without a ",(0,a.yg)("inlineCode",{parentName:"p"},"serve_id")," when ",(0,a.yg)("inlineCode",{parentName:"p"},"definition")," contained a definition for a pipeline without a sink.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4919"}),"#4919"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug which broke the CONVERSION part of the GROK pattern semantic.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4939"}),"#4939")))),(0,a.yg)("h2",m({},{id:"v4250"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.25.0"}),"v4.25.0")),(0,a.yg)("h3",m({},{id:"changes-8"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"topic")," argument for ",(0,a.yg)("inlineCode",{parentName:"p"},"load_kafka")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_kafka")," is now a positional argument, instead of a named argument.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4805"}),"#4805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The array version of ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," that allowed you to create multiple events has been removed. Instead, you can just pass multiple records to ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," now.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4805"}),"#4805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Functions can now return values of different types for the same input types. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"x.otherwise(y)")," no longer requires that ",(0,a.yg)("inlineCode",{parentName:"p"},"x")," has the same type as ",(0,a.yg)("inlineCode",{parentName:"p"},"y"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4839"}),"#4839"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"compress")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"decompress")," operators have been deprecated in favor of separate operators for each compression algorithm. These new operators expose additional options, such as ",(0,a.yg)("inlineCode",{parentName:"p"},'compress_gzip level=10, format="deflate"'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4876"}),"#4876")))),(0,a.yg)("h3",m({},{id:"features-14"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We have added a new ",(0,a.yg)("inlineCode",{parentName:"p"},"to_snowflake")," sink operator, writing events into a ",(0,a.yg)("a",m({parentName:"p"},{href:"https://www.snowflake.com/"}),"snowflake")," table.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4589"}),"#4589"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We have added the ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," operator that allows you to easily onboard data from most sources. For example, you can now write ",(0,a.yg)("inlineCode",{parentName:"p"},'from "https://example.com/file.json.gz"')," to automatically deduce the load operator, compression, and format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4805"}),"#4805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We have added the ",(0,a.yg)("inlineCode",{parentName:"p"},"to")," operator that allows you to easily send data to most destinations. For example, you can now write ",(0,a.yg)("inlineCode",{parentName:"p"},'to "ftps://example.com/file.json.gz"')," to automatically deduce the save operator, compression, and format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4805"}),"#4805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can use the new ",(0,a.yg)("inlineCode",{parentName:"p"},"subnet(string)")," function to parse strings as subnets.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4805"}),"#4805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Several new options are now available for the ",(0,a.yg)("inlineCode",{parentName:"p"},"load_http")," operator: ",(0,a.yg)("inlineCode",{parentName:"p"},"data"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"json"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"form"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_peer_verification"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_hostname_verification"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"chunked"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"multipart"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_peer_verification")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_hostname_verification")," options are now also available for the ",(0,a.yg)("inlineCode",{parentName:"p"},"save_http")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4811"}),"#4811"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_kv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_tsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," operators now support custom quote characters.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4837"}),"#4837"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_tsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," operators support doubled quote escaping.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4837"}),"#4837"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_tsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," operators now accept multi-character strings as separators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4837"}),"#4837"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"list_sep")," option for the ",(0,a.yg)("inlineCode",{parentName:"p"},"read_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read_tsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read_xsv")," operators can be set to an empty string, which will disable list parsing.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4837"}),"#4837"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"string.parse_leef()")," function can be used to parse a string as a LEEF message.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4837"}),"#4837"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Start your Tenzir Node with ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node --tql2")," or set the ",(0,a.yg)("inlineCode",{parentName:"p"},"TENZIR_TQL2=true")," environment variable to enable TQL2-only mode for your node. In this mode, all pipelines will run as TQL2, with the old TQL1 pipelines only being available through the ",(0,a.yg)("inlineCode",{parentName:"p"},"legacy")," operator. In Q1 2025, this option will be enabled by default, and later in 2025 the ",(0,a.yg)("inlineCode",{parentName:"p"},"legacy")," operator and TQL1 support will be removed entirely.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4840"}),"#4840"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Whether an IP address is contained in a subnet can now be checked using expressions such as ",(0,a.yg)("inlineCode",{parentName:"p"},"1.2.3.4 in 1.2.0.0/16"),". Similarly, to check whether a subnet is included in another subnet, use ",(0,a.yg)("inlineCode",{parentName:"p"},"1.2.0.0/16 in 1.0.0.0/8"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4841"}),"#4841"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"TQL2 now allows writing ",(0,a.yg)("inlineCode",{parentName:"p"},"x not in y")," as an equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"not (x in y)")," for better readability.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4844"}),"#4844"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"save_email")," now accepts a ",(0,a.yg)("inlineCode",{parentName:"p"},"tls")," option to specify TLS usage when establishing the SMTP connection.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4848"}),"#4848"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"deduplicate")," operator in TQL2 to help you remove events with a common key. The operator provides more flexibility than its TQL1 pendant by letting the common key use any expression, not just a field name. You can also control timeouts with finer granularity.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4850"}),"#4850"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"context::erase")," operator allows you to selectively remove entries from contexts.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4864"}),"#4864"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new operator ",(0,a.yg)("inlineCode",{parentName:"p"},"to_opensearch")," is now available for sending data to OpenSearch-compatible Bulk API providers including ElasticSearch.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4871"}),"#4871"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"duration")," function now allows to parse expressions resulting in strings as duration values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4877"}),"#4877"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Numbers and string expressions containing numbers can now be converted into ",(0,a.yg)("inlineCode",{parentName:"p"},"float")," type values using the ",(0,a.yg)("inlineCode",{parentName:"p"},"float")," function.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4882"}),"#4882"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"User-defined operators can now be written and used in TQL2. To use TQL2, start your definition with the comment ",(0,a.yg)("inlineCode",{parentName:"p"},"// tql2"),", or use the ",(0,a.yg)("inlineCode",{parentName:"p"},"--tql2")," flag to opt into TQL2 as the default.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4884"}),"#4884")))),(0,a.yg)("h3",m({},{id:"bug-fixes-14"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Metadata such as ",(0,a.yg)("inlineCode",{parentName:"p"},"@name")," can now be set to a dynamically computed value that does not have to be a constant. For example, if the field ",(0,a.yg)("inlineCode",{parentName:"p"},"event_name")," should be used as the event name, ",(0,a.yg)("inlineCode",{parentName:"p"},"@name = event_name")," now correctly assigns the events their name instead of using the first value.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4839"}),"#4839"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"endpoint")," argument of the ",(0,a.yg)("inlineCode",{parentName:"p"},"save_email")," operator was documented as optional but was not parsed as so. This has been fixed and the argument is now correctly optional.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4848"}),"#4848"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines that begin with ",(0,a.yg)("inlineCode",{parentName:"p"},"export | where")," followed by an expression that does not depend on the incoming events, such as ",(0,a.yg)("inlineCode",{parentName:"p"},"export | where 1 == 1"),", no longer cause an internal error.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4861"}),"#4861"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Warnings that happen very early during pipeline startup now correctly show up in the Tenzir Platform.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4867"}),"#4867"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"write_parquet")," now gracefully handles nested empty records by replacing them with nulls. The Apache Parquet format does fundamentally not support empty nested records.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4874"}),"#4874"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Operator invocations that directly use parenthesis but continue after the closing parenthesis are no longer rejected. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"where (x or y) and z")," is now being parsed correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4885"}),"#4885")))),(0,a.yg)("h2",m({},{id:"v4241"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.24.1"}),"v4.24.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-15"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rare crash on startup that would occur when starting the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node")," process was so slow that it would try to emit metrics before the component handling metrics was ready.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4846"}),"#4846"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The TQL2 ",(0,a.yg)("inlineCode",{parentName:"p"},"nics")," operator had a bug causing the operator name to be ",(0,a.yg)("inlineCode",{parentName:"p"},"nic"),". This has now been fixed and works as documented.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4847"}),"#4847"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed the ",(0,a.yg)("inlineCode",{parentName:"p"},"last")," aggregation function to return the last element.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4855"}),"#4855"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug introduced with v4.24.0 causing crashes on startup when some of the files in the node's state directory were smaller than 12 bytes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4856"}),"#4856")))),(0,a.yg)("h2",m({},{id:"v4240"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.24.0"}),"v4.24.0")),(0,a.yg)("h3",m({},{id:"changes-9"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The topics provided to the ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," operators now exactly match the ",(0,a.yg)("inlineCode",{parentName:"p"},"topic")," field in the corresponding metrics.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4738"}),"#4738"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," without an explicitly provided topic now uses the topic ",(0,a.yg)("inlineCode",{parentName:"p"},"main")," as opposed to an implementation-defined special name.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4738"}),"#4738"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The usage string that is reported when an operator or function is being used incorrectly now uses the same format as the documentation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4740"}),"#4740"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The functions ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf_category_name"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf_category_uid"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf_class_name"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf_class_uid")," are now called ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf::category_name"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf::category_uid"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf::class_name"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ocsf::class_uid"),", respectively. Similarly, the ",(0,a.yg)("inlineCode",{parentName:"p"},"package_add"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"package_remove"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"packages"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," operators are now called ",(0,a.yg)("inlineCode",{parentName:"p"},"package::add"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"package::remove"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"package::list"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"pipeline::list"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4741"}),"#4741"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4746"}),"#4746"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," operator's ",(0,a.yg)("inlineCode",{parentName:"p"},"ttl")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"max_ttl")," options are now called ",(0,a.yg)("inlineCode",{parentName:"p"},"read_timeout")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write_timeout"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4758"}),"#4758"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"ndjson")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"write_json")," operator has been removed in favor of a new operator ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ndjson"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4762"}),"#4762"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tls_no_verify")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," operator is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_peer_verification"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4825"}),"#4825"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," function now replaces the ",(0,a.yg)("inlineCode",{parentName:"p"},"str")," function. The older ",(0,a.yg)("inlineCode",{parentName:"p"},"str")," name will be available as an alias for some time for compatibility but will be removed in a future release.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4834"}),"#4834")))),(0,a.yg)("h3",m({},{id:"features-15"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"parse_time")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"format_time")," functions transform strings into timestamps and vice versa.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4576"}),"#4576"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The following operators are now available in TQL2 for loading and saving: ",(0,a.yg)("inlineCode",{parentName:"p"},"load_amqp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_amqp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_ftp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_ftp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_nic"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_s3"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_s3"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_sqs"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_sqs"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_udp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_udp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load_zmq"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_zmq"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"save_tcp")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_email"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4716"}),"#4716"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4807"}),"#4807"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The following new operators are available in TQL2 to convert event streams to byte streams in various formats: ",(0,a.yg)("inlineCode",{parentName:"p"},"write_csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_feather"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_json"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_lines"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ndjson"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_parquet"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_pcap"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_ssv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_tsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_xsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_yaml"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_zeek_tsv"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4716"}),"#4716"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4807"}),"#4807"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unroll")," operator is now available in TQL2. It takes a field of type list, and duplicates the surrounding event for every element of the list.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4736"}),"#4736"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"decapsulate")," function now handles SLL2 frames (Linux cooked capture encapsulation).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4744"}),"#4744"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The contexts feature is now available in TQL2. It has undergone significant changes to make use of TQL2's more powerful expressions. Contexts are shared between TQL1 and TQL2 pipelines. All operators are grouped in the ",(0,a.yg)("inlineCode",{parentName:"p"},"context")," module, including the ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"show contexts")," operators, which are now called ",(0,a.yg)("inlineCode",{parentName:"p"},"context::enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"context::list"),", respectively. To create a new context, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"context::create_lookup_table"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"context::create_bloom_filter"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"context::create_geoip")," operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4753"}),"#4753"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Lookup table contexts now support separate create, write, and read timeouts via the ",(0,a.yg)("inlineCode",{parentName:"p"},"create_timeout"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write_timeout"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"read_timeout")," options, respectively. The options are exclusive to contexts updated with TQL2's ",(0,a.yg)("inlineCode",{parentName:"p"},"context::update")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4753"}),"#4753"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--limit")," option for the TQL1 ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator controls the previously hardcoded upper limit on the number of events in a chart. The option defaults to 10,000 events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4757"}),"#4757"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"<list>.map(<capture>, <expression>)")," function replaces each value from ",(0,a.yg)("inlineCode",{parentName:"p"},"<list>")," with the value from ",(0,a.yg)("inlineCode",{parentName:"p"},"<expression>"),". Within ",(0,a.yg)("inlineCode",{parentName:"p"},"<expression>"),", the elements are available as ",(0,a.yg)("inlineCode",{parentName:"p"},"<capture>"),". For example, to add 5 to all elements in the list ",(0,a.yg)("inlineCode",{parentName:"p"},"xs"),", use ",(0,a.yg)("inlineCode",{parentName:"p"},"xs = xs.map(x, x + 5)"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4788"}),"#4788"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"<list>.where(<capture>, <predicate>)")," removes all elements from ",(0,a.yg)("inlineCode",{parentName:"p"},"<list>")," for which the ",(0,a.yg)("inlineCode",{parentName:"p"},"<predicate>")," evaluates to ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),". Within ",(0,a.yg)("inlineCode",{parentName:"p"},"<predicate>"),", the elements are available as ",(0,a.yg)("inlineCode",{parentName:"p"},"<capture>"),". For example, to remove all elements smaller than 3 from the list ",(0,a.yg)("inlineCode",{parentName:"p"},"xs"),", use ",(0,a.yg)("inlineCode",{parentName:"p"},"xs = xs.where(x, x >= 3)"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4788"}),"#4788"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"append"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"prepend"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"concatenate")," functions add an element to the end of a list, to the front of a list, and merge two lists, respectively. ",(0,a.yg)("inlineCode",{parentName:"p"},"xs.append(y)")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"[...xs, y]"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"xs.prepend(y)")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"[y, ...xs]"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"concatenate(xs, ys)")," is equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"[...xs, ..ys]"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4792"}),"#4792"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The function ",(0,a.yg)("inlineCode",{parentName:"p"},"otherwise(primary:any, fallback:any)")," provides a simple way to specify a ",(0,a.yg)("inlineCode",{parentName:"p"},"fallback")," expression when the ",(0,a.yg)("inlineCode",{parentName:"p"},"primary")," expression evaluates to ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4794"}),"#4794"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Indexing records with string expressions is now supported.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4795"}),"#4795"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"split")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"split_regex")," functions split a string into a list of strings based on a delimiter or a regular expression, respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4799"}),"#4799"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"join")," aggregation function concatenates a strings into a single string, optionally separated by a delimiter.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4799"}),"#4799"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zip")," function merges two lists into a single list of a record with two fields ",(0,a.yg)("inlineCode",{parentName:"p"},"left")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"right"),". For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"zip([1, 2], [3, 4])")," returns ",(0,a.yg)("inlineCode",{parentName:"p"},"[{left: 1, right: 3}, {left: 2, right: 4}]"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4803"}),"#4803"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new functions ",(0,a.yg)("inlineCode",{parentName:"p"},"encode_base64")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"decode_base64")," encode and decode blobs and strings as Base64.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4806"}),"#4806"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The functions ",(0,a.yg)("inlineCode",{parentName:"p"},"encode_hex")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"decode_hex")," transform strings and blobs to/from their hexadecimal byte representation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4815"}),"#4815"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Aggregation functions now work on lists. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"[1, 2, 3].sum()")," will return ",(0,a.yg)("inlineCode",{parentName:"p"},"6"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},'["foo", "bar", "baz"].map(x, x == "bar").any()')," will return ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4821"}),"#4821"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," operator now supports the ",(0,a.yg)("inlineCode",{parentName:"p"},"cacert"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"certfile"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"keyfile")," options to provide certificates for the TLS connection.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4825"}),"#4825"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"network")," function returns the network address of a CIDR subnet. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"192.168.0.0/16.network()")," returns ",(0,a.yg)("inlineCode",{parentName:"p"},"192.168.0.0"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4828"}),"#4828"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"local")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"remote")," operators allow for overriding the location of a pipeline. Local operators prefer running at a client ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," process, and remote operators prefer running at a remote ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node")," process. These operators are primarily intended for testing purposes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4835"}),"#4835"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unordered")," operator throws away the order of events in a pipeline. This causes some operators to run faster, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ndjson")," is able to parse events out of order through this. This operator is primarily intended for testing purposes, as most of the time the ordering requirements are inferred from subsequent operators in the pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4835"}),"#4835")))),(0,a.yg)("h3",m({},{id:"bug-fixes-16"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The docs for the ",(0,a.yg)("inlineCode",{parentName:"p"},"sqs")," connector now correctly reflect the default of ",(0,a.yg)("inlineCode",{parentName:"p"},"3s")," for the ",(0,a.yg)("inlineCode",{parentName:"p"},"--poll-time")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4716"}),"#4716"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"context inspect")," crashed when used to inspect a context that was previously updated with ",(0,a.yg)("inlineCode",{parentName:"p"},"context update")," with an input containing a field of type ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),". This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4746"}),"#4746"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The last metric emitted for each run of the ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operator was incorrectly named ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.enrich.metrics")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.metrics.enrich"),", causing it not to be available via ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics enrich"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4753"}),"#4753"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enumerate")," operator now correctly prepends the added index field instead of appending it.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4756"}),"#4756"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"It is no longer possible to manually remove contexts that are installed as part of a package.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4768"}),"#4768"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"to_hive")," operator now correctly writes files relative to the working directory of a ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," client process instead of relative to the node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4771"}),"#4771"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"read_ndjson")," operator no longer uses an error-prone mechanism to continue parsing an NDJSON line that contains an error. Instead, the entire line is skipped.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4801"}),"#4801"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"str")," function no longer adds extra quotes when given a string. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'str("") == "\\"\\""')," was changed to ",(0,a.yg)("inlineCode",{parentName:"p"},'str("") == ""'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4809"}),"#4809"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The TQL1 and TQL2 ",(0,a.yg)("inlineCode",{parentName:"p"},"sockets")," operators no longer crash on specific builds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4816"}),"#4816"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"max_content_length")," option for the ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," operator was named incorrectly in an earlier version to ",(0,a.yg)("inlineCode",{parentName:"p"},"send_timeout"),". This has now been fixed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4825"}),"#4825"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an oversight in the syslog parsers, which caused it to not yield an event until the next line came in.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4829"}),"#4829"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The TQL2 ",(0,a.yg)("inlineCode",{parentName:"p"},"save_http")," operator had a bug causing it to fail to connect and get stuck in an infinite loop. This is now fixed and works as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4833"}),"#4833")))),(0,a.yg)("h2",m({},{id:"v4231"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.23.1"}),"v4.23.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-17"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The node doesn't try to recreate its cache directory on startup anymore, avoiding permissions issues on systems with strict access control.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4742"}),"#4742"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"docker compose")," setup now uses separate local volumes for each ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," directory. This fixes a bug where restarting the container resets installed packages or pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4749"}),"#4749"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"parquet")," plugin is now available in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir-node")," Docker images.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4760"}),"#4760"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the kafka plugin so that it no longer wrongly splits config options from the ",(0,a.yg)("inlineCode",{parentName:"p"},"yaml")," files at the dot character.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4761"}),"#4761"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a crash in pipelines that use the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator and a subsequent ",(0,a.yg)("inlineCode",{parentName:"p"},"where")," filter with certain expressions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4774"}),"#4774"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug causing the ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser to never yield events until the input stream ended.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4777"}),"#4777"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in TQL2's ",(0,a.yg)("inlineCode",{parentName:"p"},"where")," operator that made it sometimes return incorrect results for events for which the predicate evaluated to ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),". Now, the operator consistently warns when this happens and drops the events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4785"}),"#4785")))),(0,a.yg)("h2",m({},{id:"v4230"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.23.0"}),"v4.23.0")),(0,a.yg)("h3",m({},{id:"changes-10"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We renamed the TQL2 ",(0,a.yg)("inlineCode",{parentName:"p"},"azure_log_analytics")," operator to ",(0,a.yg)("inlineCode",{parentName:"p"},"to_azure_log_analytics"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4726"}),"#4726"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We renamed the TQL2 ",(0,a.yg)("inlineCode",{parentName:"p"},"velociraptor")," operator to ",(0,a.yg)("inlineCode",{parentName:"p"},"from_velociraptor"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4726"}),"#4726")))),(0,a.yg)("h3",m({},{id:"features-16"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The relational operator ",(0,a.yg)("inlineCode",{parentName:"p"},"in")," now supports checking for existence of an element in a list. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'where x in ["important", "values"]')," is functionally equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},'where x == "important" or x == "values"'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4691"}),"#4691"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We've added new hash functions for commonly used algorithms: ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_md5"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_sha1"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_sha224"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_sha256"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_sha384"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_sha512"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"hash_xxh3"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4705"}),"#4705"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"ceil")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"floor")," join the existing ",(0,a.yg)("inlineCode",{parentName:"p"},"round")," function for rounding numbers, durations, and timestamps upwards and downwards, respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4712"}),"#4712"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"to_splunk")," sink operator writes data to Splunk HEC endpoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4719"}),"#4719"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"load_balance")," operator distributes events over a set of subpipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4720"}),"#4720"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"New ",(0,a.yg)("inlineCode",{parentName:"p"},"load_kafka")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save_kafka")," operators enable seamless integration with Apache Kafka in TQL2.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4725"}),"#4725"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The spread syntax ",(0,a.yg)("inlineCode",{parentName:"p"},"...")," can now be used inside lists to expand one list into another. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"[1, ...[2, 3]]")," evaluates to ",(0,a.yg)("inlineCode",{parentName:"p"},"[1, 2, 3]"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4729"}),"#4729"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},'TQL now supports "universal function call syntax," which means that every method is callable as a function and every function with at least one positional argument is callable as a method.\n',(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4730"}),"#4730")))),(0,a.yg)("h3",m({},{id:"bug-fixes-18"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"TQL2's ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," now returns a single event when used with no groups and no input events just like in TQL1, making ",(0,a.yg)("inlineCode",{parentName:"p"},"from [] | summarize count=count()")," return ",(0,a.yg)("inlineCode",{parentName:"p"},"{count: 0}")," instead of nothing.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4709"}),"#4709"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We eliminated a rare crash in the ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," operator that was introduced in v4.20.3.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4715"}),"#4715"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"str")," function no longer returns the numeric index of an enumeration value. Instead, the result is now the actual name associated with that value.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4717"}),"#4717")))),(0,a.yg)("h2",m({},{id:"v4222"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.22.2"}),"v4.22.2")),(0,a.yg)("h3",m({},{id:"features-17"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"value_counts")," aggregation function returns a list of values and their frequency.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4701"}),"#4701"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"sort")," method sorts fields in records by name and lists by values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4704"}),"#4704")))),(0,a.yg)("h3",m({},{id:"bug-fixes-19"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that sometimes prevented incoming connections from ",(0,a.yg)("inlineCode",{parentName:"p"},"load_tcp")," from closing properly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4674"}),"#4674"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"google-cloud-pubsub")," connector and TQL2 operators ",(0,a.yg)("inlineCode",{parentName:"p"},"load_google_cloud_pubsub")," ",(0,a.yg)("inlineCode",{parentName:"p"},"save_google_cloud_pubsub")," operators are now available in the Docker image.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4690"}),"#4690"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"mode")," aggregation function to sometimes ignore some input values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4701"}),"#4701"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"buffer"),' operator that caused it to break when restarting a pipeline or using multiple buffers in a "parallel" context, such as in ',(0,a.yg)("inlineCode",{parentName:"p"},"load_tcp"),"'s pipeline argument.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4702"}),"#4702")))),(0,a.yg)("h2",m({},{id:"v4221"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.22.1"}),"v4.22.1")),(0,a.yg)("h3",m({},{id:"features-18"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We added three new, TQL2-exclusive aggregation functions: ",(0,a.yg)("inlineCode",{parentName:"li"},"first"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"last"),", and ",(0,a.yg)("inlineCode",{parentName:"li"},"mode"),". The functions return the first, last, and most common non-null value per group, respectively.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4679"}),"#4679"))),(0,a.yg)("h3",m({},{id:"bug-fixes-20"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint now returns instantly when its pipeline fails before the endpoint is used for the first time. In the Tenzir Platform this causes the load more button in the Explorer to correctly stop showing for pipelines that fail shortly after starting.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4688"}),"#4688"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The boolean operators ",(0,a.yg)("inlineCode",{parentName:"p"},"and"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"or")," now work correctly for the type ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),". Previously, ",(0,a.yg)("inlineCode",{parentName:"p"},"null and false")," evaluated to ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),", and a warning was emitted. Now, it evaluates to ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," without a warning.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4689"}),"#4689"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," process from multiple users on the same host sometimes failed because the cache directory was not writable for all users. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4694"}),"#4694")))),(0,a.yg)("h2",m({},{id:"v4220"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.22.0"}),"v4.22.0")),(0,a.yg)("h3",m({},{id:"features-19"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"google-cloud-pubsub")," connectors allow subscribing to a Google Cloud Pub/Sub subscription and publishing to a Google Cloud Pub/Sub topic.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4656"}),"#4656"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added low-level actor metrics that help admins track the system health over time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4668"}),"#4668")))),(0,a.yg)("h3",m({},{id:"bug-fixes-21"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the HTTP connectors, that caused them to not respect the http response codes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4660"}),"#4660"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The node now wipes its cache directory whenever it restarts.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4669"}),"#4669")))),(0,a.yg)("h2",m({},{id:"v4211"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.21.1"}),"v4.21.1")),(0,a.yg)("h3",m({},{id:"features-20"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new ",(0,a.yg)("inlineCode",{parentName:"p"},"sample")," operator now provides the ability to dynamically sample input data based on the frequency of the receiving events allowing relative sampling in situations of varying load.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4645"}),"#4645"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"grok")," parser now allows better control over the schema inference.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4657"}),"#4657"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"grok")," parser can now be directly used when reading input, allowing for ",(0,a.yg)("inlineCode",{parentName:"p"},"read grok"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4657"}),"#4657")))),(0,a.yg)("h3",m({},{id:"bug-fixes-22"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that sometimes caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node")," process to hang on shutdown. This was most likely to happen when the node shut down immediately after starting up, e.g., because of an invalid configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4613"}),"#4613"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a bug in the python operator that could lead to random valid file descriptors in the parent process being closed prematurely.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4646"}),"#4646"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"azure-blob-storage")," connector is now also available in the static linux binary distributions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4649"}),"#4649"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"context_updates")," field in ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics lookup")," to be reported once per field specified in the corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator instead of being reported once per operator in total.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4655"}),"#4655")))),(0,a.yg)("h2",m({},{id:"v4210"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.21.0"}),"v4.21.0")),(0,a.yg)("h3",m({},{id:"changes-11"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON parser's ",(0,a.yg)("inlineCode",{parentName:"p"},"--precise"),' option is now deprecated, as the "precise" mode is the new default. Use ',(0,a.yg)("inlineCode",{parentName:"p"},"--merge"),' to get the previous "imprecise" behavior.\n',(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON parser's ",(0,a.yg)("inlineCode",{parentName:"p"},"--no-infer")," option has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema-only"),". The old name is deprecated and will be removed in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the unused ",(0,a.yg)("inlineCode",{parentName:"p"},"--snapshot")," option from the ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4613"}),"#4613"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir's internal wire format ",(0,a.yg)("inlineCode",{parentName:"p"},"bitz")," is now considered stable. Note that the format underwent significant changes as part of its stabilization, and is incompatible with ",(0,a.yg)("inlineCode",{parentName:"p"},"bitz")," from Tenzir Node v4.20 and older.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4633"}),"#4633"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator now prefers recent data in searches for lookups against historical data instead of using the order in which context updates arrive.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4636"}),"#4636")))),(0,a.yg)("h3",m({},{id:"features-21"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CEF, CSV, GELF, JSON, KV, LEEF, Suricata, Syslog, XSV, YAML and Zeek JSON parsers now properly adhere to the schema of the read data. Previously, parsers would merge heterogeneous input into a single, growing schema, inserting nulls for fields that did not exist in some events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"fluent-bit")," source now properly adheres to the schema of the read data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CEF, CSV, GELF, JSON, KV, LEEF, Suricata, Syslog, XSV, YAML and Zeek JSON parsers now all support the ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"--selector")," flags to parse their data according to some given schema, as well as various other flags to more precisely control their output schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"metrics tcp")," shows metrics for TCP connections, emitted once every second per connection. The metrics contains the reads and writes on the socket and the number of bytes transmitted.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4564"}),"#4564"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON parser is now able to also handle extremely large events when not using the NDJSON or GELF mode.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4590"}),"#4590"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"kv")," parser now allows for keys and values to be enclosed in double quotes: Split matches within quotes will not be considered. Quotes will be trimmed of keys and values. For example ",(0,a.yg)("inlineCode",{parentName:"p"},'"key"="nested = value, fun"')," will now successfully parse as ",(0,a.yg)("inlineCode",{parentName:"p"},'{ "key" : "nested = value, fun" }'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4591"}),"#4591"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"buffer")," operator now works with bytes inputs in addition to the existing support for events inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4594"}),"#4594"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lines"),' parser can now handle null delimited "lines" with the ',(0,a.yg)("inlineCode",{parentName:"p"},"--null")," flag.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4603"}),"#4603"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"azure-blob-storage")," connector allows reading from and writing to Azure Blob Storage via an URI.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4617"}),"#4617")))),(0,a.yg)("h3",m({},{id:"bug-fixes-23"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed various edge cases in parsers where values would not be properly parsed as typed data and were stored as plain text instead. No input data was lost, but no valuable type information was gained either.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4527"}),"#4527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"partitions")," operators and the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl rebuild")," command no longer occasionally fail with request timeouts when the node is under high load.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4597"}),"#4597"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an accidentally quadratic scaling with the number of top-level array elements in ",(0,a.yg)("inlineCode",{parentName:"p"},"read json --arrays-of-objects"),". As a result, using this option will now be much faster.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4601"}),"#4601"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines starting with ",(0,a.yg)("inlineCode",{parentName:"p"},"from tcp")," no longer enter the failed state when an error occurrs in one of the connections.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4602"}),"#4602"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a very rare crash in the zero-copy parser implementation of ",(0,a.yg)("inlineCode",{parentName:"p"},"read feather")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read parquet")," that was caused by releasing shared memory too early.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4633"}),"#4633")))),(0,a.yg)("h2",m({},{id:"v4203"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.20.3"}),"v4.20.3")),(0,a.yg)("h3",m({},{id:"bug-fixes-24"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug where the ",(0,a.yg)("inlineCode",{parentName:"p"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operators were sometimes missing events from up to the last 30 seconds. In the Tenzir Platform, this showed itself as a gap in activity sparkbars upon loading the page.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4583"}),"#4583"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint now gracefully handles retried requests with the same continuation token, returning the same result for each request.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4585"}),"#4585")))),(0,a.yg)("h2",m({},{id:"v4202"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.20.2"}),"v4.20.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-25"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The empty record type is no longer rejected in schema definitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4558"}),"#4558"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused the Demo Node package not to be pre-installed correctly when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir-demo")," Docker image.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4559"}),"#4559"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a potential crash in the ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv")," parsers for slowly arriving inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4570"}),"#4570"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"azure-log-analytics")," operator sometimes errored on startup complaining about am unknown ",(0,a.yg)("inlineCode",{parentName:"p"},"window")," option. This no longer occurs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4578"}),"#4578"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Restarting pipelines with the ",(0,a.yg)("inlineCode",{parentName:"p"},"udp")," connector no longer fails to bind to the socket.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4579"}),"#4579"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The systemd unit now allows binding to privileged ports by default via the ambient capability ",(0,a.yg)("inlineCode",{parentName:"p"},"CAP_NET_BIND_SERVICE"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4580"}),"#4580")))),(0,a.yg)("h2",m({},{id:"v4201"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.20.1"}),"v4.20.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-26"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We fixed a regression introduced with Tenzir v4.20 that sometimes caused the Tenzir Platform to fail to fetch results from pipelines.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4554"}),"#4554"))),(0,a.yg)("h2",m({},{id:"v4200"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.20.0"}),"v4.20.0")),(0,a.yg)("h3",m({},{id:"changes-12"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated legacy metrics system configured via the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.metrics")," configuration section no longer exists. Use the ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," operator instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4381"}),"#4381"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," metrics no longer contain the ",(0,a.yg)("inlineCode",{parentName:"p"},"snapshot")," field; instead, the values show in the ",(0,a.yg)("inlineCode",{parentName:"p"},"retro")," field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4381"}),"#4381"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," operator is deprecated. Use the operator ",(0,a.yg)("inlineCode",{parentName:"p"},"<aspect>")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"show <aspect>"),". The information from ",(0,a.yg)("inlineCode",{parentName:"p"},"show dependencies")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"show build")," is now available in the ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4455"}),"#4455"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4549"}),"#4549"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lines")," printer now does not perform any escaping and is no longer an alias to the ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv")," printer. Additionally, nulls are skipped, instead of being printed as ",(0,a.yg)("inlineCode",{parentName:"p"},"-"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4520"}),"#4520")))),(0,a.yg)("h3",m({},{id:"features-22"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuild")," metrics contain information about running partition rebuilds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4381"}),"#4381"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest")," metrics contain information about all ingested events and their schema. This is slightly different from the existing ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," metrics, which track only events imported via the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," operator, and are separate per pipeline.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4381"}),"#4381"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"unstoppable")," flag allows for pipelines to run and repeat indefinitely without the ability to stop or pause.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4513"}),"#4513"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," operator is a transformation that passes through events, creating an in-memory cache of events on the first use. On subsequent uses, the operator signals upstream operators no to start at all, and returns the cached events immediately. The operator may also be used as a source for reading from a cache only, or as a sink for writing to a cache only.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4515"}),"#4515"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/launch")," operator features four new parameters ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_id"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_capacity"),",",(0,a.yg)("inlineCode",{parentName:"p"},"cache_ttl"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_max_ttl"),". If a ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_id")," is specified, the pipeline's implicit sink will use the ",(0,a.yg)("inlineCode",{parentName:"p"},"cache")," operator under the hood. At least one of ",(0,a.yg)("inlineCode",{parentName:"p"},"serve_id")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"cache_id")," must be specified.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4515"}),"#4515"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator is now smarter about retroactive lookups for frequently updated contexts and avoids loading data from disk multiple times for context updates that arrive shortly after one another.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4535"}),"#4535")))),(0,a.yg)("h3",m({},{id:"bug-fixes-27"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a regression introduced in Tenzir v4.19.2 in the ",(0,a.yg)("inlineCode",{parentName:"p"},"azure-log-analytics")," operator that prevented it from starting correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4516"}),"#4516"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"IPv6 addresses with a prefix that is a valid duration, for example ",(0,a.yg)("inlineCode",{parentName:"p"},"2dff::")," with the prefix ",(0,a.yg)("inlineCode",{parentName:"p"},"2d"),", now correctly parse as an IP instead of a string.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4523"}),"#4523"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an issue where the ",(0,a.yg)("inlineCode",{parentName:"p"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operators crashed the node when started while the node was shutting down or after an unexpected filesystem error occurred. This happened frequently while using the Tenzir Platform, which subscribes to metrics and diagnostics automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4530"}),"#4530"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"context inspect <ctx>")," no longer crashes for lookup table contexts with values of multiple schemas when using subnets as keys.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4531"}),"#4531"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that sometimes caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"retro.queued_events")," value in ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," metrics to stop going down again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4535"}),"#4535")))),(0,a.yg)("h2",m({},{id:"v4196"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.6"}),"v4.19.6")),(0,a.yg)("h3",m({},{id:"features-23"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir")," command-line utility gained a new option ",(0,a.yg)("inlineCode",{parentName:"li"},"--strict"),", causing it to exit with a non-zero exit code for pipelines that emit at least one warning.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4506"}),"#4506"))),(0,a.yg)("h3",m({},{id:"bug-fixes-28"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"slice")," operator no longer crashes when used with a positive begin and negative end value when operating on less events than ",(0,a.yg)("inlineCode",{parentName:"p"},"-end"),", e.g., when working on a single event and using ",(0,a.yg)("inlineCode",{parentName:"p"},"slice 0:-1"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4505"}),"#4505"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"shell")," operator that could cause the process to crash when breaking its pipe. Now, the operator shuts down with an error diagnostic instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4508"}),"#4508"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines with the ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator now deploy more quickly, as their deployment no longer waits for the virtual environment to be set up successfully.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4508"}),"#4508")))),(0,a.yg)("h2",m({},{id:"v4195"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.5"}),"v4.19.5")),(0,a.yg)("h3",m({},{id:"bug-fixes-29"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"serve")," operator no longer uses an excessive amount of CPU.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4499"}),"#4499"))),(0,a.yg)("h2",m({},{id:"v4194"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.4"}),"v4.19.4")),(0,a.yg)("h3",m({},{id:"bug-fixes-30"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"packages")," plugin is now available in the static binary release artifacts.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4490"}),"#4490"))),(0,a.yg)("h2",m({},{id:"v4193"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.3"}),"v4.19.3")),(0,a.yg)("h3",m({},{id:"bug-fixes-31"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Pipelines from packages now correctly remember their last run number and last state when the reinstalling the package.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4479"}),"#4479"))),(0,a.yg)("h2",m({},{id:"v4192"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.2"}),"v4.19.2")),(0,a.yg)("h3",m({},{id:"changes-13"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We've made some changes that optimize Tenzir's memory usage. Pipeline operators that emit very small batches of events or bytes at a high frequency now use less memory. The ",(0,a.yg)("inlineCode",{parentName:"li"},"serve")," operator's internal buffer is now soft-capped at 1Ki instead of 64Ki events, aligning the buffer size with the default upper limit for the number of events that can be fetched at once from ",(0,a.yg)("inlineCode",{parentName:"li"},"/serve"),". The ",(0,a.yg)("inlineCode",{parentName:"li"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"metrics"),", and ",(0,a.yg)("inlineCode",{parentName:"li"},"diagnostics")," operators now handle back pressure better and utilize less memory in situations where the node has many small partitions. For expert users, the new ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.demand")," configuration section allows for controlling how eagerly operators demand input from their upstream operators. Lowering the demand reduces the peak memory usage of pipelines at some performance cost.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4447"}),"#4447"))),(0,a.yg)("h3",m({},{id:"features-24"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The throttle operator allows for limiting the bandwidth of a pipeline.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4448"}),"#4448"))),(0,a.yg)("h3",m({},{id:"bug-fixes-32"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"subscribe")," operator now delivers metrics more consistently.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4439"}),"#4439"))),(0,a.yg)("h2",m({},{id:"v4191"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.1"}),"v4.19.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-33"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Activating heartbeats via ",(0,a.yg)("inlineCode",{parentName:"li"},"-X"),"/",(0,a.yg)("inlineCode",{parentName:"li"},"--set")," on an ",(0,a.yg)("inlineCode",{parentName:"li"},"amqp")," saver triggered socket errors if the interval between sent messages was larger than the heartbeat interval. This has been fixed by handling heartbeat communication correctly in such cases.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4428"}),"#4428"))),(0,a.yg)("h2",m({},{id:"v4190"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.19.0"}),"v4.19.0")),(0,a.yg)("h3",m({},{id:"changes-14"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator now resolves dependencies with every fresh pipeline run. Just restart your pipeline to upgrade to the latest available versions of your Python modules.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4336"}),"#4336"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator no longer uses ",(0,a.yg)("inlineCode",{parentName:"p"},"pip")," but rather ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/astral-sh/uv"}),(0,a.yg)("inlineCode",{parentName:"a"},"uv")),". In case you set custom environment variables for ",(0,a.yg)("inlineCode",{parentName:"p"},"pip")," you need to exchange those with alternative settings that work with ",(0,a.yg)("inlineCode",{parentName:"p"},"uv"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4336"}),"#4336"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint now always uses the simple output format for schema definitions. The option ",(0,a.yg)("inlineCode",{parentName:"p"},"use_simple_format")," is now ignored.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4411"}),"#4411")))),(0,a.yg)("h3",m({},{id:"features-25"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"package")," operator allows for adding and removing packages, a combination of pipelines and contexts deployed to a node as a set. Nodes load packages installed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<configdir>/tenzir/package/<package-name>/package.yaml")," on startup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4344"}),"#4344"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"buffer")," operator buffers up to the specified number of events in an in-memory buffer. By default, operators in a pipeline run only when their downstream operators want to receive input. This mechanism is called back pressure. The ",(0,a.yg)("inlineCode",{parentName:"p"},"buffer")," operator effectively breaks back pressure by storing up to the specified number of events in memory, always requesting more input, which allows upstream operators to run uninterruptedly even in case the downstream operators of the buffer are unable to keep up. This allows pipelines to handle data spikes more easily.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4404"}),"#4404")))),(0,a.yg)("h3",m({},{id:"bug-fixes-34"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Metrics emitted towards the end of an operator's runtime were sometimes not recorded correctly. This now works reliably.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4404"}),"#4404"))),(0,a.yg)("h2",m({},{id:"v4185"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.5"}),"v4.18.5")),(0,a.yg)("h3",m({},{id:"bug-fixes-35"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"unflatten")," operator now correctly preserves field order and overwrites in case of a name conflict.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4405"}),"#4405"))),(0,a.yg)("h2",m({},{id:"v4184"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.4"}),"v4.18.4")),(0,a.yg)("h3",m({},{id:"bug-fixes-36"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"subscribe")," operator no longer propagates back pressure to its corresponding ",(0,a.yg)("inlineCode",{parentName:"li"},"publish")," operators when part of a pipeline that runs in the background, i.e., is not visible on the overview page on app.tenzir.com. An invisible subscriber should never be able to slow down a publisher.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4399"}),"#4399"))),(0,a.yg)("h2",m({},{id:"v4183"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.3"}),"v4.18.3")),(0,a.yg)("h3",m({},{id:"changes-15"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"metrics export")," now includes an additional field that shows the number of queued events in the pipeline.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4396"}),"#4396"))),(0,a.yg)("h3",m({},{id:"bug-fixes-37"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed an issue where ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," records were sometimes transformed into non-null records with ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4394"}),"#4394"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an issue that sometimes caused ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," to fail when multiple ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," operators pushed to the same topic at the exact same time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4394"}),"#4394"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused a potentially unbounded memory usage in ",(0,a.yg)("inlineCode",{parentName:"p"},"export --live"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics --live"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics --live"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4396"}),"#4396")))),(0,a.yg)("h2",m({},{id:"v4182"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.2"}),"v4.18.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-38"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We fixed a memory leak in ",(0,a.yg)("inlineCode",{parentName:"li"},"export")," that was introduced with ",(0,a.yg)("inlineCode",{parentName:"li"},"v4.18.1"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4389"}),"#4389"))),(0,a.yg)("h2",m({},{id:"v4181"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.1"}),"v4.18.1")),(0,a.yg)("h3",m({},{id:"features-26"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Setting the ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.endpoint")," option to ",(0,a.yg)("inlineCode",{parentName:"li"},"false")," now causes the node not to listen for node-to-node connections. Previously, the port was always exposed for other nodes or ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir")," processes to connect.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4380"}),"#4380"))),(0,a.yg)("h3",m({},{id:"bug-fixes-39"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused ",(0,a.yg)("inlineCode",{parentName:"p"},"deduplicate <fields...> --distance <distance>")," to sometimes produce incorrect results when followed by ",(0,a.yg)("inlineCode",{parentName:"p"},"where <expr>")," with an expression that filters on the deduplicated fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4379"}),"#4379"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines that use the ",(0,a.yg)("inlineCode",{parentName:"p"},"every")," modifier with the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator no longer terminate after the first run.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4382"}),"#4382")))),(0,a.yg)("h2",m({},{id:"v4180"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.18.0"}),"v4.18.0")),(0,a.yg)("h3",m({},{id:"changes-16"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," symlink for the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl")," binary that offeres backwards compatiblity with versions older than Tenzir v4\u2014when it was called VAST\u2014no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4343"}),"#4343"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.db-directory")," option no longer exists. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.state-directory")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4343"}),"#4343"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Diagnostics from managed pipelines are now deduplicated, showing each diagnostic at most once for each run.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4348"}),"#4348"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipeline activity for pipelines starting with ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe | where <expr>")," will no longer report ingress that does not match the provided filter expression.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4349"}),"#4349"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"--low-priority")," option for the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator no longer exists. The new ",(0,a.yg)("inlineCode",{parentName:"p"},"--parallel <level>")," option allows tuning how many worker threads the operator uses at most for querying persisted events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4365"}),"#4365"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We raised the default and maximum long-polling timeouts for ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," from 2s and 5s to 5s and 10s, respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4370"}),"#4370")))),(0,a.yg)("h3",m({},{id:"features-27"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"publish"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"import"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operators deliver their own, operator-specific metrics now.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4339"}),"#4339"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4365"}),"#4365"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.metrics.api")," metrics record every API call made to a Tenzir Node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4368"}),"#4368"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," operator now optionally takes a metric name as an argument. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics cpu")," only shows CPU metrics. This is functionally equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},'metrics | where #schema == "tenzir.metrics.cpu"'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4369"}),"#4369"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.metrics.platform")," metrics records every second whether the connection to the Tenzir Platform is working as expected from the node's perspective.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4374"}),"#4374")))),(0,a.yg)("h3",m({},{id:"bug-fixes-40"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rarely occurring issue in the ",(0,a.yg)("inlineCode",{parentName:"p"},"gelf")," parser that led to parsing errors for some events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4341"}),"#4341"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rare crash when one of multiple ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," operators for the same topic disconnected while at least one of the other subscribers was overwhelmed and asked for corresponding publishers to throttle.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4346"}),"#4346"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"export --live | where <expr>")," failed to filter with type extractors or concepts. This now works as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4349"}),"#4349"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The SQS connector now honors system proxy settings.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4359"}),"#4359"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rare bug that caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator to exit unexpectedly when using a high value for the operator's ",(0,a.yg)("inlineCode",{parentName:"p"},"--parallel")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4363"}),"#4363"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The time parser now accepts the ",(0,a.yg)("inlineCode",{parentName:"p"},"%F"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"%g"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"%G"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"%u"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"%V"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"%z"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"%Z")," format specifiers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4366"}),"#4366"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tcp")," connector no longer fails in listen mode when you try to restart it directly after stopping it.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4367"}),"#4367")))),(0,a.yg)("h2",m({},{id:"v4174"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.17.4"}),"v4.17.4")),(0,a.yg)("h3",m({},{id:"bug-fixes-41"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},'We fixed a bug that caused a "Bad file descriptor" error from the python operator, when multiple instances of it were started simultaneously.\n',(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4333"}),"#4333"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Shutting down a node no longer sets managed pipelines to the completed state unintentionally.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4334"}),"#4334"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Configured pipelines with retry on error enabled will not trigger an assertion anymore when they fail to launch.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4334"}),"#4334")))),(0,a.yg)("h2",m({},{id:"v4173"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.17.3"}),"v4.17.3")),(0,a.yg)("h3",m({},{id:"features-28"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"partitions [<expr>]")," source operator supersedes ",(0,a.yg)("inlineCode",{parentName:"li"},"show partitions")," (now deprecated) and supports an optional expression as a positional argument for showing only the partitions that would be considered in ",(0,a.yg)("inlineCode",{parentName:"li"},"export | where <expr>"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4329"}),"#4329"))),(0,a.yg)("h3",m({},{id:"bug-fixes-42"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We fixed a bug in Tenzir v4.17.2 that sometimes caused the deletion of on-disk state of configured contexts on startup.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4330"}),"#4330"))),(0,a.yg)("h2",m({},{id:"v4172"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.17.2"}),"v4.17.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-43"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that very rarely caused configured pipelines using contexts to fail starting up because the used context was not available, and similarly to fail shutting down because the used context was no longer available before the pipeline was shut down.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4295"}),"#4295"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4322"}),"#4322"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4325"}),"#4325"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an issue where diagnostics were not properly propagated and thus not available to the ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4326"}),"#4326")))),(0,a.yg)("h2",m({},{id:"v4171"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.17.1"}),"v4.17.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-44"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},'We fixed a bug in Tenzir v4.17 that caused some nodes to error on startup with an "unreachable" error.\n',(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4322"}),"#4322"))),(0,a.yg)("h2",m({},{id:"v4170"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.17.0"}),"v4.17.0")),(0,a.yg)("h3",m({},{id:"changes-17"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The built-in type aliases ",(0,a.yg)("inlineCode",{parentName:"p"},"timestamp")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"uint64"),", respectively, no longer exist. They were an artifact of Tenzir from before it supported schema inference in most parsers, and did not play well with many operators when used together with inferred types from other parsers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4299"}),"#4299"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines"),' now includes "hidden" pipelines run by the by the Tenzir Platform or through the API. These pipelines usually run background jobs, so they\'re intentionally hidden from the ',(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/list")," API.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4309"}),"#4309")))),(0,a.yg)("h3",m({},{id:"features-29"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"print")," operator allows for printing record fields as strings with any format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4265"}),"#4265"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed bug that caused python-pip to fail when creating the runtime environment for the python operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4279"}),"#4279"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"azure-log-analytics")," operator makes it possible to upload events to supported or custom tables in Microsoft Azure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4281"}),"#4281"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Newly created diagnostics returned from the ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," now contain a ",(0,a.yg)("inlineCode",{parentName:"p"},"rendered")," field that contains a rendered form of the diagnostic. To restore the previous behavior, use ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics | drop rendered"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4290"}),"#4290"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operator no longer crashes when it is used to replace a field value with a context value of a different type and the context is not able to provide a substitute for all inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4291"}),"#4291"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--parallel <level>")," option controlling the number of partitions the operator is allowed to open at once for retrospective lookups. This can significantly increase performance at the cost of higher resource usage. The option defaults to 3. To restore the previous behavior, set the option to 1.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4300"}),"#4300"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/list")," API now includes a new ",(0,a.yg)("inlineCode",{parentName:"p"},"ttl")," field showing the TTL of the pipeline. The remaining TTL moved from ",(0,a.yg)("inlineCode",{parentName:"p"},"ttl_expires_in_ns")," to a ",(0,a.yg)("inlineCode",{parentName:"p"},"remaining_ttl")," field, aligning the output of the API with the ",(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4314"}),"#4314"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"context update <name>")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," contexts now supports per-entry timeouts. The ",(0,a.yg)("inlineCode",{parentName:"p"},"--create-timeout <duration>")," option sets the time after which lookup table entries expire, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"--update-timeout <duration>")," option sets the time after which lookup table entries expire if they are not accessed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/5126"}),"#5126")))),(0,a.yg)("h3",m({},{id:"bug-fixes-45"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"subnet == ip")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pattern == string")," predicates now behave just like ",(0,a.yg)("inlineCode",{parentName:"p"},"ip == subnet")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"string == pattern")," predicates.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4280"}),"#4280"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"https")," and related savers now signal an error when the saver-related upload fails.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4281"}),"#4281"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Errors during pipeline startup are properly propagated instead of being replaced by ",(0,a.yg)("inlineCode",{parentName:"p"},"error: failed to run")," in some situations.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4288"}),"#4288"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator no longer crashes when grpuping by a field of type ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),", i.e., a field whose type could not be inferred because all of its values were ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4289"}),"#4289"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a regression that caused excess CPU usage for some operators when idle. This was most visible with the ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4297"}),"#4297"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"-X")," option for overriding configuration options for ",(0,a.yg)("inlineCode",{parentName:"p"},"librdkafka")," now works the ",(0,a.yg)("inlineCode",{parentName:"p"},"kafka")," saver as well. Previously, the option was only exposed for the loader, unlike advertised in the documentation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4317"}),"#4317")))),(0,a.yg)("h2",m({},{id:"v4160"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.16.0"}),"v4.16.0")),(0,a.yg)("h3",m({},{id:"changes-18"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"approximate_median")," aggregation function is now called ",(0,a.yg)("inlineCode",{parentName:"li"},"median"),". We found the longer name, despite being more accurate, to be rather unintuitive.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4273"}),"#4273"))),(0,a.yg)("h3",m({},{id:"features-30"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," operator's topics no longer have to be unique. Instead, any number of pipelines may use the ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," operator with the same topic. This enables multi-producer, multi-consumer (MPMC) event routing, where streams of events from different pipelines can now be merged back together in addition to being split.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4270"}),"#4270"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Inter-pipeline data transfer with the ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," operators is now as fast as intra-pipeline data transfer between pipeline operators and utilizes the same amount of memory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4270"}),"#4270"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Back pressure now propagates from subscribers back to publishers, i.e., if a pipeline with a ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," operator is too slow then all pipelines with matching ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," operators will be slowed down to a matching speed. This limits the memory usage of ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," operators and prevents data loss.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4270"}),"#4270"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"p99"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"p95"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"p90"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"p75"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"p50")," aggregation functions calculate commonly used percentiles of grouped values in the ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4273"}),"#4273"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"For ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," contexts, the new ",(0,a.yg)("inlineCode",{parentName:"p"},"--erase")," option for ",(0,a.yg)("inlineCode",{parentName:"p"},"context update")," enables selective deletion of lookup table entries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4274"}),"#4274"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"context update")," operator now defaults the ",(0,a.yg)("inlineCode",{parentName:"p"},"--key <field>")," option to the first field in the input when no field is explicitly specified.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4274"}),"#4274")))),(0,a.yg)("h3",m({},{id:"bug-fixes-46"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Configured and non-configured contexts with the same name will not cause non-deterministic behavior upon loading anymore. The node will shut down instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4224"}),"#4224"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Predicates of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"ip == subnet")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ip in [subnet1, subnet2, \u2026]")," now work as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4268"}),"#4268"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator now correctly handles subnet keys when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"--retro")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"--snapshot")," options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4268"}),"#4268")))),(0,a.yg)("h2",m({},{id:"v4152"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.15.2"}),"v4.15.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-47"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Some ",(0,a.yg)("em",{parentName:"li"},"Running")," pipelines were considered ",(0,a.yg)("em",{parentName:"li"},"Completed")," when the node shut down, causing them not to start up again automatically when the node restarted. Now, the node only considers pipelines ",(0,a.yg)("em",{parentName:"li"},"Completed")," that entered the state on their own before the node's shutdown.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4261"}),"#4261"))),(0,a.yg)("h2",m({},{id:"v4151"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.15.1"}),"v4.15.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-48"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We fixed a regression that caused demo nodes not to start for Tenzir v4.15.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4258"}),"#4258"))),(0,a.yg)("h2",m({},{id:"v4150"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.15.0"}),"v4.15.0")),(0,a.yg)("h3",m({},{id:"features-31"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," context now performs longest-prefix matches when the table key is of type ",(0,a.yg)("inlineCode",{parentName:"p"},"subnet")," and the to-be-enriched field of type ",(0,a.yg)("inlineCode",{parentName:"p"},"ip"),". For example, a lookup table with key ",(0,a.yg)("inlineCode",{parentName:"p"},"10.0.0.0/8")," will match when enriching the IP address ",(0,a.yg)("inlineCode",{parentName:"p"},"10.1.1.1"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4051"}),"#4051"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now offer an RPM package for RedHat Linux and its derivatives.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4188"}),"#4188"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/update")," API endpoint now supports updating definitions of existing pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4196"}),"#4196"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operators now features a ",(0,a.yg)("inlineCode",{parentName:"p"},"--retro")," flag. This flag will make the operators first export past events, even when ",(0,a.yg)("inlineCode",{parentName:"p"},"--live")," is set. Specify both options explicitly to first return past events and then immediately switch into live mode.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4203"}),"#4203"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sort")," operator now supports sorting by multiple fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4242"}),"#4242"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines configured as code in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.yaml")," configuration file may now contain labels.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4247"}),"#4247"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"https")," connector supports the new options ",(0,a.yg)("inlineCode",{parentName:"p"},"--skip-peer-verification")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--skip-hostname-verification")," to disable verification of the peer's certificate and verification of the certificate hostname.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4248"}),"#4248"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"write json --arrays-of-objects")," to write JSON arrays per batch of events instead of JSON objects per event.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4249"}),"#4249")))),(0,a.yg)("h3",m({},{id:"bug-fixes-49"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"export --live")," no longer buffers the last batch of event that was imported, and instead immediately returns all imported events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4203"}),"#4203"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"context inspect")," will not crash anymore when encountering contexts that contain multi-schema data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4236"}),"#4236"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines configured as code no longer always restart with the node. Instead, just like for other pipelines, they only restart when they were running before the node shut down.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4247"}),"#4247")))),(0,a.yg)("h2",m({},{id:"v4140"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.14.0"}),"v4.14.0")),(0,a.yg)("h3",m({},{id:"changes-19"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"slice")," operator now expects its arguments in the form ",(0,a.yg)("inlineCode",{parentName:"li"},"<begin>:<end>"),", where either the begin or the end value may be omitted. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"slice 10:")," returns all but the first 10 events, ",(0,a.yg)("inlineCode",{parentName:"li"},"slice 10:20")," returns events 10 to 20 (exclusive), and ",(0,a.yg)("inlineCode",{parentName:"li"},"slice :-10")," returns all but the last 10 events.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4211"}),"#4211"))),(0,a.yg)("h3",m({},{id:"features-32"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"mean")," aggregation function computes the mean of grouped numeric values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4208"}),"#4208"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"approximate_median")," aggregation function computes an approximate median of grouped numeric values using the t-digest algorithm.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4208"}),"#4208"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"stddev")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"variance")," aggregation functions compute the standard deviation and variance of grouped numeric values, respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4208"}),"#4208"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"collect")," aggregation function collects a list of all non-null grouped values. Unlike ",(0,a.yg)("inlineCode",{parentName:"p"},"distinct"),", this function does not remove dulicates and the results may appear in any order.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4208"}),"#4208"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator gained two new options: ",(0,a.yg)("inlineCode",{parentName:"p"},"timeout")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"update-timeout"),", which enable streaming aggregations. They specifiy the maximum time a bucket in the operator may exist, tracked from the arrival of the first and last event in the bucket, respectively. The ",(0,a.yg)("inlineCode",{parentName:"p"},"timeout")," is useful to guarantee that events are held back no more than the specified duration, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"update-timeout")," is useful to finish aggregations earlier in cases where events that would be sorted into the same buckets arrive within the specified duration, allowing results to be seen earlier.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4209"}),"#4209"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"slice")," operator now supports strides in the form of ",(0,a.yg)("inlineCode",{parentName:"p"},"slice <begin>:<end>:<stride>"),". Negative strides reverse the event order. The new ",(0,a.yg)("inlineCode",{parentName:"p"},"reverse")," operator is a short form of ",(0,a.yg)("inlineCode",{parentName:"p"},"slice ::-1")," and reverses the event order.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4216"}),"#4216")))),(0,a.yg)("h3",m({},{id:"bug-fixes-50"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Paths for ",(0,a.yg)("inlineCode",{parentName:"p"},"s3")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"gs")," connectors are not broken anymore during loading/saving.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4222"}),"#4222"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser incorrectly identified a message without hostname and tag as one with hostname and no tag. This resulted in a hostname with a trailing colon, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"zscaler-nss:"),". In such messages, the parser now correctly sets the hostname to ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," and assigns ",(0,a.yg)("inlineCode",{parentName:"p"},"zscaler-nss")," as tag/app, without the trailing colon.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4225"}),"#4225")))),(0,a.yg)("h2",m({},{id:"v4131"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.13.1"}),"v4.13.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-51"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"slice")," operator no longer waits for all input to arrive when used with a positive begin and a negative (or missing) end value, which rendered it unusable with infinite inputs. Instead, the operator now yields results earlier.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4210"}),"#4210"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"amqp")," connector now properly signals more errors caused, for example, by networking issues. This enables pipelines using this connector to trigger their retry behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4212"}),"#4212"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The node's CPU usage increased ever so slightly with every persisted partition, eventually causing imports and exports to get stuck. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4214"}),"#4214"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"drop"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"extend"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"replace"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"deduplicate")," operators failed for empty input events. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4215"}),"#4215")))),(0,a.yg)("h2",m({},{id:"v4130"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.13.0"}),"v4.13.0")),(0,a.yg)("h3",m({},{id:"changes-20"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--clear")," parameter for clearing lookup table contexts during an update no longer exists. It has been superseded by the more robust ",(0,a.yg)("inlineCode",{parentName:"p"},"context reset")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4179"}),"#4179"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"matcher")," plugin no longer exists. Use the superior ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator and contexts instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4187"}),"#4187"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl import")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl export")," commands no longer exists. They have been fully superseded by pipelines in the form ",(0,a.yg)("inlineCode",{parentName:"p"},"\u2026 | import")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"export | \u2026"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4187"}),"#4187")))),(0,a.yg)("h3",m({},{id:"features-33"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"geoip")," context now supports loading in a MaxMind database with ",(0,a.yg)("inlineCode",{parentName:"p"},"context load <ctx>"),". For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"load s3://my-bucket/file.mmdb | context load my-ctx")," makes the GeoIP context use a remotely stored database.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4158"}),"#4158"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," parser has a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--precise")," flag, which ensures that the layout of the emitted events precisely match the input. For example, it guarantees that no additional ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," fields will be added. This mode is implicitly enabled when using ",(0,a.yg)("inlineCode",{parentName:"p"},"read gelf"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4169"}),"#4169"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"leef")," parser supports parsing Log Event Extended Format (LEEF) version 1.0 and 2.0 events, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"LEEF:1.0|Microsoft|MSExchange|4.0 SP1|15345|src=192.0.2.0\\tdst=172.50.123.1"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4178"}),"#4178"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},'cron "<cron expression>"')," operator modifier executes an operator on a schedule. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'cron "* */10 * * * MON-FRI" from https://example.org/api')," queries an endpoint on every 10th minute, Monday through Friday.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4192"}),"#4192")))),(0,a.yg)("h3",m({},{id:"bug-fixes-52"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser no longer crops messages at unprintable characters, such as tab (",(0,a.yg)("inlineCode",{parentName:"p"},"\\t"),").\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4178"}),"#4178"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser no longer eagerly attempts to grab an application name from the content, fixing issues when combined with CEF and LEEF.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4178"}),"#4178"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some pipelines did not restart on failure. The retry mechanism now works for all kinds of failures.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4184"}),"#4184"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines that are configured to automatically restart on failure can now be stopped explicitly. Stopping a failed pipeline now always changes its state to the stopped state.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4184"}),"#4184"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Startup failures caused by invalid pipelines or contexts deployed as code in the configuration file sometimes caused the node to hang instead of shutting down with an error message. The node now shuts down as expected when this happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4187"}),"#4187"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A permission error caused ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator to fail when it was previously used by another system user with the same set of requirements. There now is a one Python environment per user and set of requirements.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4189"}),"#4189"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CSV, TSV, and SSV printers no longer erroneously print the header multiple times when more than one event batch of events arrives.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4195"}),"#4195")))),(0,a.yg)("h2",m({},{id:"v4122"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.12.2"}),"v4.12.2")),(0,a.yg)("h3",m({},{id:"features-34"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The chart operator now accepts the flags ",(0,a.yg)("inlineCode",{parentName:"li"},"--x-axis-type")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"--y-axis-type")," for ",(0,a.yg)("inlineCode",{parentName:"li"},"bar"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"line"),", and ",(0,a.yg)("inlineCode",{parentName:"li"},"area")," charts, with the possible values being ",(0,a.yg)("inlineCode",{parentName:"li"},"log")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"linear"),", with ",(0,a.yg)("inlineCode",{parentName:"li"},"linear")," as the default value. Setting these flags defines the scale (logarithmic or linear) on the Tenzir App chart visualization.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4147"}),"#4147"))),(0,a.yg)("h3",m({},{id:"bug-fixes-53"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The python operator now checks for syntax errors on operator start up.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4139"}),"#4139"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Transformations or sinks used with the ",(0,a.yg)("inlineCode",{parentName:"p"},"every")," operator modifier did not shut down correctly when exhausting their input. This now work as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4166"}),"#4166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that prevented restarts of pipelines containing a listening connector under specific circumstances.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4170"}),"#4170"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The retry delay now works for pipelines that fail during startup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4171"}),"#4171"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator failed to render a chart when the y-axis was not specified explicitly and the events contained more than two top-level fields. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4173"}),"#4173"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We accidentally removed the implicit ",(0,a.yg)("inlineCode",{parentName:"p"},"read json")," from ",(0,a.yg)("inlineCode",{parentName:"p"},"from tcp")," in Tenzir v4.12. The shortform now works as expected again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4175"}),"#4175")))),(0,a.yg)("h2",m({},{id:"v4121"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.12.1"}),"v4.12.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-54"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a misconfiguration that caused the ",(0,a.yg)("inlineCode",{parentName:"p"},"publish")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"subscribe")," operators not to be available in the statically linked Linux builds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4149"}),"#4149"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a crash on startup when selectively enabling or disabling plugins when at least two plugins with dependent plugins were disabled.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4149"}),"#4149")))),(0,a.yg)("h2",m({},{id:"v4120"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.12.0"}),"v4.12.0")),(0,a.yg)("h3",m({},{id:"changes-21"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Lines of input containing an invalid syslog messages are now assumed to be a continuation of a message on a previous line, if there's any.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4080"}),"#4080"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"feather")," format now reads and writes Arrow IPC streams in addition to Feather files, and no longer requires random access to a file to function, making the format streamable with both ",(0,a.yg)("inlineCode",{parentName:"p"},"read feather")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write feather"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4089"}),"#4089"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl count <expr>")," command no longer exists. It has long been deprecated and superseded by pipelines of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"export | where <expr> | summarize count(.)"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4103"}),"#4103"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl status")," command and the corresponding ",(0,a.yg)("inlineCode",{parentName:"p"},"/status")," endpoint no longer exist. They have been superseded by the ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," operators that provide more detailed insight.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4103"}),"#4103"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.aging-frequency")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.aging-query")," options no longer exist. We recommend using the compaction or disk monitor mechanisms instead to delete persisted events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4103"}),"#4103"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," operator and ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/list")," endpoint no longer include pipeline metrics. We recommend using the ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," operator instead, which offers the same data in a more flexible way.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4114"}),"#4114"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"parquet")," format more efficiently reads and writes Parquet files. The format is streamable for ",(0,a.yg)("inlineCode",{parentName:"p"},"write parquet"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4116"}),"#4116"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"0mq")," connector no longer automatically monitors TCP sockets to wait until at least one remote peer is present. Explicitly pass ",(0,a.yg)("inlineCode",{parentName:"p"},"--monitor")," for this behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4117"}),"#4117"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator, unless otherwise specified, every field but the first one is taken to be a value for the Y-axis, instead of just the second one.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4119"}),"#4119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the value for ",(0,a.yg)("inlineCode",{parentName:"p"},"-x"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"--name")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"-y"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"--value")," is explicitly specified, the other one must now be too.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4119"}),"#4119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--title")," option is removed from ",(0,a.yg)("inlineCode",{parentName:"p"},"chart"),". Titles can instead be set directly in the web interface.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4119"}),"#4119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"context create"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"context reset"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"context update"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"context load")," operators no return information about the context. Pipelines ending with these operators will now be considered closed, and you will be asked to deploy them in the Explorer. Previously, users commonly added ",(0,a.yg)("inlineCode",{parentName:"p"},"discard")," after these operators to force this behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4143"}),"#4143")))),(0,a.yg)("h3",m({},{id:"features-35"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"udp")," connector comes with a loader and saver to read bytes from and write bytes to a UDP socket.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4067"}),"#4067"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"deduplicate")," operator allows removing duplicate events based on specific fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4068"}),"#4068"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unroll")," operator transforms an event that contains a list into a sequence of events where each output event contains one of the list elements.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4078"}),"#4078"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"bitz")," format resembles Tenzir's internal wire format. It enables lossless and quick transfer of events between Tenzir nodes through any connector.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4079"}),"#4079"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Syslog messages spanning multiple lines are now supported.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4080"}),"#4080"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"batch")," operator gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--timeout <duration>")," option that controls the maixmum latency for withholding events for batching.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4095"}),"#4095"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Stopping a failed pipeline now moves it into the stopped state in the app and through the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/update")," API, stopping automatic restarts on failure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4108"}),"#4108"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines now restart on failure at most every minute. The new API parameter ",(0,a.yg)("inlineCode",{parentName:"p"},"retry_delay")," is available in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/create"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/launch"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/update")," APIs to customize this value. For configured pipelines, the new ",(0,a.yg)("inlineCode",{parentName:"p"},"restart-on-error")," option supersedes the previous ",(0,a.yg)("inlineCode",{parentName:"p"},"autostart.failed")," option and may be set either to a boolean or to a duration, with the former using the default retry delay and the latter using a custom one.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4108"}),"#4108"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," and the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/list")," API now includes the start time of the pipeline in the field ",(0,a.yg)("inlineCode",{parentName:"p"},"start_time"),", the newly added retry delay in the field ",(0,a.yg)("inlineCode",{parentName:"p"},"retry_delay"),", and whether the pipeline is hidden from the overview page on app.tenzir.com in the field ",(0,a.yg)("inlineCode",{parentName:"p"},"hidden"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4108"}),"#4108"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"every <duration>")," operator modifier now supports all operators, turning blocking operators like ",(0,a.yg)("inlineCode",{parentName:"p"},"tail"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"sort")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," into operators that emit events every ",(0,a.yg)("inlineCode",{parentName:"p"},"<duration>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4109"}),"#4109"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"0mq")," connector now supports ",(0,a.yg)("inlineCode",{parentName:"p"},"inproc")," socket endpoint URLs, allowing you to create arbitrary publish/subscribe topologies within a node. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"save zmq inproc://foo")," writes messages to the in-process socket named ",(0,a.yg)("inlineCode",{parentName:"p"},"foo"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4117"}),"#4117"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some charts supported by the ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator (",(0,a.yg)("inlineCode",{parentName:"p"},"bar"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"line"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"area"),") now have a ",(0,a.yg)("inlineCode",{parentName:"p"},"--position")," argument, with the possible values of ",(0,a.yg)("inlineCode",{parentName:"p"},"grouped")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"stacked"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4119"}),"#4119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can now define contexts and their creation parameters in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.contexts")," section of the configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4126"}),"#4126"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show schemas")," operator lists all unique schemas of events stored at the node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4131"}),"#4131"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata")," parser's schema now more accurately reflects Suricata's Eve JSON output, adding many fields that were previously missing.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4133"}),"#4133"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4138"}),"#4138"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta")))),(0,a.yg)("h3",m({},{id:"bug-fixes-55"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The schema name of events returned by ",(0,a.yg)("inlineCode",{parentName:"p"},"show contexts")," sometimes did not match the type of the context. This now works reliably.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4082"}),"#4082"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tcp")," connector now supports accepting multiple connections in parallel when used with the ",(0,a.yg)("inlineCode",{parentName:"p"},"from")," operator, parsing data separately per connection.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4084"}),"#4084"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator no longer discards field that start with an underscore.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4085"}),"#4085"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator no longer deadlocks when given an empty program.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4086"}),"#4086"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON printer previously printed invalid JSON for ",(0,a.yg)("inlineCode",{parentName:"p"},"inf")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"nan"),", which means that ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," could sometimes emit invalid JSON, which is not handled well by platform/app. Instead, we now emit ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4087"}),"#4087"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," saver that prevented sending HTTP PUT requests with an empty request body.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4092"}),"#4092"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines run with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," binary that connected to a Tenzir Node did sometimes not shut down correctly when the node shut down. This now happens reliably.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4093"}),"#4093"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Nodes now shut down with a non-zero exit code when pipelines configured as part of the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.yaml")," file fail to start, making such configuration errors easier to spot.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4097"}),"#4097"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir Docker images no longer expose 5158/tcp by default, as this prevented running multiple containers in the same network or in host mode.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4099"}),"#4099"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Empty records and ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," values of record type are now correctly unflattened.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4104"}),"#4104"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused the explorer to sometimes show 504 Gateway Timeout errors for pipelines where the first result took over two seconds to arrive.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4123"}),"#4123"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," saver now correctly sets the ",(0,a.yg)("inlineCode",{parentName:"p"},"Content-Length")," header value for HTTP POST requests.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4134"}),"#4134"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Lookup tables with more than 1M entries failed to load after the node was restarted. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4137"}),"#4137"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operator sometimes stopped working when it encountered an event for which the specified fields did not exist. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4143"}),"#4143")))),(0,a.yg)("h2",m({},{id:"v4112"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.11.2"}),"v4.11.2")),(0,a.yg)("h3",m({},{id:"changes-22"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"python")," operator now requires Python 3.9 (down from Python 3.10) or newer, making it available on more systems.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4073"}),"#4073"),(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/satta"}),"@satta"))),(0,a.yg)("h3",m({},{id:"bug-fixes-56"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"python")," operator often failed with a 504 Gateway Timeout error on app.tenzir.com when first run. This no longer happens.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4066"}),"#4066"))),(0,a.yg)("h2",m({},{id:"v4110"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.11.0"}),"v4.11.0")),(0,a.yg)("h3",m({},{id:"changes-23"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operators now include the metadata in every context object to accomodate the new ",(0,a.yg)("inlineCode",{parentName:"p"},"--replace")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--separate")," options. Previously, the metadata was available once in the output field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"mode")," field in the enrichments returned from the ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator is now ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup.retro"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup.live"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup.snapshot")," depending on the mode.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"bloom-filter")," context now always returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," for the context instead of embedding the result in a record with a single ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040")))),(0,a.yg)("h3",m({},{id:"features-36"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"sqs")," connector makes it possible to read from and write to Amazon SQS queues.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3819"}),"#3819"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"files")," source lists file information for a given directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4035"}),"#4035"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--replace")," option for the ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operator causes the input values to be replaced with their context instead of extending the event with the context, resulting in a leaner output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--separate")," option makes the ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operators handle each field individually, duplicating the event for each relevant field, and returning at most one context per output event.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--yield <field>")," option allows for adding only a part of a context with the ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operators. For example, with a ",(0,a.yg)("inlineCode",{parentName:"p"},"geoip")," context with a MaxMind country database, ",(0,a.yg)("inlineCode",{parentName:"p"},"--yield registered_country.iso_code")," will cause the enrichment to only consist of the country's ISO code.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"email")," saver allows for sending pipeline data via email by connecting to a mail server via SMTP or SMTPS.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4041"}),"#4041"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"every <interval>")," operator modifier executes a source operator repeatedly. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"every 1h from http://foo.com/bar")," polls an endpoint every hour.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4050"}),"#4050"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"set")," operator upserts fields, i.e., acts like ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," for existing fields and like ",(0,a.yg)("inlineCode",{parentName:"p"},"extend")," for new fields. It also supports setting the schema name explicitly via ",(0,a.yg)("inlineCode",{parentName:"p"},'set #schema="new-name"'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4057"}),"#4057"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"put")," operator now supports setting the schema name explicitly via ",(0,a.yg)("inlineCode",{parentName:"p"},'put #schema="new-name"'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4057"}),"#4057")))),(0,a.yg)("h3",m({},{id:"bug-fixes-57"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Source operators that do not quit on their own only freed their resources after they had emitted an additional output, even after the pipeline had already exited. This sometimes caused errors when restarting pipelines, and in rare cases caused Tenzir nodes to hang on shutdown. This no longer happens, and the entire pipeline shuts down at once.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3819"}),"#3819"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"drop")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"select")," silently ignored all but the first match of the specified type extractors and concepts. This no longer happens. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"drop :time")," drops all fields with type ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," from events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Enriching a field in adjacent events in ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," with a ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," context sometimes crashed when the lookup-table referred to values of different types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"geoip")," context sometimes returned incorrect values. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4040"}),"#4040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"from <url>")," now also works when the url specifies username and password.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4043"}),"#4043"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused every second context to become unavailable after a restarting the node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4045"}),"#4045"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"compress")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to")," operators no longer fail when compression is unable to further reduce the size of a batch of bytes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4048"}),"#4048"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Disk metrics now work correctly for deployments with a customized state directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4058"}),"#4058")))),(0,a.yg)("h2",m({},{id:"v4104"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.10.4"}),"v4.10.4")),(0,a.yg)("h3",m({},{id:"bug-fixes-58"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," saver now correctly sets the ",(0,a.yg)("inlineCode",{parentName:"p"},"Content-Length")," header when issuing HTTP requests.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4031"}),"#4031"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using ",(0,a.yg)("inlineCode",{parentName:"p"},"context load")," with large context files no longer causes a crash.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4033"}),"#4033"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," operator crashed for some rules when trying to attach the rule to the matched event. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4034"}),"#4034"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The code passed to the ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator no longer fails to resolve names when the local and global scope are both used.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4036"}),"#4036")))),(0,a.yg)("h2",m({},{id:"v4103"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.10.3"}),"v4.10.3")),(0,a.yg)("h3",m({},{id:"changes-24"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Tenzir nodes no longer attempt reconnecting to app.tenzir.com immediately upon failure, but rather wait before reconnecting.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3997"}),"#3997"))),(0,a.yg)("h3",m({},{id:"bug-fixes-59"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator no longer tries to match internal metrics and diagnostics events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4028"}),"#4028"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator no longer returns events for which none of the provided fields exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4028"}),"#4028")))),(0,a.yg)("h2",m({},{id:"v4101"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.10.1"}),"v4.10.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-60"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When upgrading from a previous version to Tenzir v4.10 and using configured pipelines for the first time, the node sometimes crashed on startup. This no longer happens.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/4020"}),"#4020"))),(0,a.yg)("h2",m({},{id:"v4100"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.10.0"}),"v4.10.0")),(0,a.yg)("h3",m({},{id:"changes-25"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We've replaced the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.allow-unsafe-pipelines")," option with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.no-location-overrides")," option with an inverted default. The new option is a less confusing default for new users and more accurately describes what the option does, namely preventing operator locations to be overriden.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3978"}),"#3978"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Nodes now collect CPU, disk, memory, and process metrics every second instead of every ten seconds, improving the usability of metrics with the ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator. Memory metrics now work as expected on macOS.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3982"}),"#3982")))),(0,a.yg)("h3",m({},{id:"features-37"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operators now support type extractors, concepts, and comma-separated lists of fields as arguments to ",(0,a.yg)("inlineCode",{parentName:"p"},"--field"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3968"}),"#3968"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir-node")," Docker images now run natively on arm64 in addition to amd64.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3989"}),"#3989"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"where")," operator now supports using ",(0,a.yg)("inlineCode",{parentName:"p"},"and"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"or"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"not")," as alternatives to ",(0,a.yg)("inlineCode",{parentName:"p"},"&&"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"||"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"!")," in expressions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3993"}),"#3993"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"S3 access and secret keys can now be specified in the S3 plugin's configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4001"}),"#4001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We made it possible to set pipelines declaratively in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.yaml")," configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4006"}),"#4006")))),(0,a.yg)("h3",m({},{id:"bug-fixes-61"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"top")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"rare")," operators now correctly count null and absent values. Previously, they emitted a single event with a count of zero when any null or absent values were included in the input.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3990"}),"#3990"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir nodes sometimes failed when trying to canonicalize file system paths before opening them when the disk-monitor or compaction rotated them out. This is now handled gracefully.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3994"}),"#3994"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a problem with the TCP connector that caused pipeline restarts on the same port to fail if running ",(0,a.yg)("inlineCode",{parentName:"p"},"shell")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operators were present.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3998"}),"#3998"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator now works with when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"remote")," location override.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3999"}),"#3999"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The S3 connector no longer ignores the default credentials provider for the current user when any arguments are specified in the URI explicitly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4001"}),"#4001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," operator sometimes crashed when pointed to a non-existent file or directory. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4010"}),"#4010"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Parsing an invalid syslog message (using the schema ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog.unknown"),") no longer causes a crash.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/4012"}),"#4012")))),(0,a.yg)("h2",m({},{id:"v490"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.9.0"}),"v4.9.0")),(0,a.yg)("h3",m({},{id:"changes-26"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins may now depend on other plugins. Plugins with unmet dependencies are automatically disabled. For example, the ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," plugins now depend on the ",(0,a.yg)("inlineCode",{parentName:"p"},"context")," plugin. Run ",(0,a.yg)("inlineCode",{parentName:"p"},"show plugins")," to see all available plugins and their dependencies.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3877"}),"#3877"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.db-directory")," is deprecated in favor of the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.state-directory")," option and will be removed in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3889"}),"#3889"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl start")," subcommand. Users should switch to the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-node")," command instead, which accepts the same arguments and presents the same command-line interface.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3899"}),"#3899"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The binary format used by contexts for saving on disk on node shutdown is now versioned. A node can support loading of multiple different versions, and automigrate between them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3945"}),"#3945"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Color escape codes are no longer emitted if ",(0,a.yg)("inlineCode",{parentName:"p"},"NO_COLOR")," is set to a non-empty value, or when the output device is not a terminal.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3952"}),"#3952")))),(0,a.yg)("h3",m({},{id:"features-38"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"bloom-filter")," context represents large sets in a space-efficient manner.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3834"}),"#3834"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lines")," printer enables simple line-delimited formatting of events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3847"}),"#3847"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"chart")," operator adds metadata to the schema of the input events, enabling rendering events as bar, area, line, or pie charts on app.tenzir.com.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3866"}),"#3866"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," and the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline")," API endpoints now include ",(0,a.yg)("inlineCode",{parentName:"p"},"created_at")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"last_modified")," fields that track the pipeline's creation and last manual modification time, respectively. Pipelines created with older versions of Tenzir will use the start time of the node as their creation time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3869"}),"#3869"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"structured_data")," field in RFC 5424-style syslog messages is now parsed and included in the output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3871"}),"#3871"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Managed pipelines now contain a new ",(0,a.yg)("inlineCode",{parentName:"p"},"total_runs")," parameter that counts all started runs. The new ",(0,a.yg)("inlineCode",{parentName:"p"},"run")," field is available in the events delivered by the ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3883"}),"#3883"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"context inspect <context-name>")," command dumps a specific context's user-provided data, usually the context's content.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3893"}),"#3893"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"openapi")," source operator generates Tenzir's OpenAPI specification. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"openapi | to ./openapi.yaml")," to generate a file with the canonical format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3898"}),"#3898"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--selector")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," parser now works with nested fields, and integer fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3900"}),"#3900"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--file")," flag that allows loading python code from a file instead of providing it as part of the pipeline definition.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3901"}),"#3901"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"context reset")," operator allows for clearing the state of a context.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3908"}),"#3908"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"context save")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"context load")," operators allow serializing and deserializing the state of a context to/from bytes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3908"}),"#3908"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator gained a ",(0,a.yg)("inlineCode",{parentName:"p"},"--low-priority")," option, which causes it to interfere less with regular priority exports at the cost of potentially running slower.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3909"}),"#3909"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The context match events now contain a new field ",(0,a.yg)("inlineCode",{parentName:"p"},"mode")," that states the lookup mode of this particular match.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3920"}),"#3920"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"enrich")," operator gained a ",(0,a.yg)("inlineCode",{parentName:"p"},"--filter")," option, which causes it to exclude enriched events that do not contain a context.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3920"}),"#3920"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When specifying a schema with a field typed as ",(0,a.yg)("inlineCode",{parentName:"p"},"time #unit=<unit>"),", numeric values will be interpreted as offsets from the epoch.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3927"}),"#3927"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Operator metrics now separately track the time that an operator was paused or running in the ",(0,a.yg)("inlineCode",{parentName:"p"},"time_paused")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"time_running")," values in addition to the wall-clock time in ",(0,a.yg)("inlineCode",{parentName:"p"},"time_total"),". Throughput rates now exclude the paused time from their calculation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3940"}),"#3940")))),(0,a.yg)("h3",m({},{id:"bug-fixes-62"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," parser (and by extension the ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv")," parsers) skipped  lines that had a mismatch between the number of values contained and the number  of fields defined in the header. Instead, it now fills in ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," values for  missing values and, if the new ",(0,a.yg)("inlineCode",{parentName:"p"},"--auto-expand")," option is set, also adds new  header fields for excess values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3874"}),"#3874"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," API sometimes returned an empty string for the next continuation token instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," when there are no further results to fetch. It now consistently returns ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3885"}),"#3885"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Commas are now allowed as subsecond separators in timestamps in TQL. Previously, only dots were allowed, but ISO 8601 allows for both.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3903"}),"#3903"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that under rare circumstances led to an indefinite hang when using a high-volume source followed by a slow transformation and a fast sink.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3909"}),"#3909"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Retroactive lookups will now properly terminate when they have finished.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3910"}),"#3910"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rare deadlock by changing the internal logger behavior from blocking until the oldest messages were consumed to overwriting them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3911"}),"#3911"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Invalid schema definitions, where a record contains the same key multiple times, are now detected and rejected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3929"}),"#3929"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option to automatically restart on failure did not correctly trigger for pipelines that failed an operator emitted an error diagnostic, a new mechanism for improved error messages introduced with Tenzir v4.8. Such pipelines now restart automatically as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3947"}),"#3947")))),(0,a.yg)("h2",m({},{id:"v482"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.8.2"}),"v4.8.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-63"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unflatten")," operator no longer ignores fields that begin or end with the separator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3814"}),"#3814"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some idle source operators and loaders, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"from tcp://localhost:3000")," where no data arrives via TCP, consumed excessive amounts of CPU. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3865"}),"#3865")))),(0,a.yg)("h2",m({},{id:"v481"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.8.1"}),"v4.8.1")),(0,a.yg)("h3",m({},{id:"features-39"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"velociraptor")," operator gained a new ",(0,a.yg)("inlineCode",{parentName:"li"},"--profile <profile>")," option to support multiple configured Velociraptor instances. To opt into using profiles, move your Velociraptor configuration in ",(0,a.yg)("inlineCode",{parentName:"li"},"<configdir>/tenzir/plugin/velociraptor.yaml")," from ",(0,a.yg)("inlineCode",{parentName:"li"},"<config>")," to ",(0,a.yg)("inlineCode",{parentName:"li"},"profiles.<profile>.<config>"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3848"}),"#3848"))),(0,a.yg)("h3",m({},{id:"bug-fixes-64"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"amqp")," connector plugin was incorrectly packaged and unavailable in some build configurations. The plugin is now available in all builds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3854"}),"#3854"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Failing to create the virtualenv of the ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator caused subsequent uses of the ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator to silently fail. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3854"}),"#3854"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Debian package now depends on ",(0,a.yg)("inlineCode",{parentName:"p"},"python3-venv"),", which is required for the ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator to create its virtualenv.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3854"}),"#3854")))),(0,a.yg)("h2",m({},{id:"v480"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.8.0"}),"v4.8.0")),(0,a.yg)("h3",m({},{id:"changes-27"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"fluent-bit")," source operator no longer performs JSON conversion from Fluent Bit prior to processing an event. Instead, it directly processes the MsgPack data that Fluent Bit uses internally for more robust and quicker event delivery.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3770"}),"#3770"))),(0,a.yg)("h3",m({},{id:"features-40"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"https")," loaders now also have savers to send data from a pipeline to a remote API.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3539"}),"#3539"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"https")," connectors have a new flag ",(0,a.yg)("inlineCode",{parentName:"p"},"--form")," to submit the request body URL-encoded. This also changes the Content-Type header to ",(0,a.yg)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3539"}),"#3539"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"timeshift")," operator adjusts timestamps relative to a given start time, with an optional speedup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3701"}),"#3701"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"delay")," operator delays events relative to a given start time, with an optional speedup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3701"}),"#3701"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup")," operator performs live filtering of the import feed using a context, and translates context updates into historical queries. This effectively enables live and retro matching in a single operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3721"}),"#3721"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A Tenzir node will now automatically collect and store metrics about disk, cpu and memory usage of the host machine.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3736"}),"#3736"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," parser allows parsing datetimes and timestamps from arbitrary strings using a ",(0,a.yg)("inlineCode",{parentName:"p"},"strptime"),"-like format string.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3738"}),"#3738"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"gelf")," parser reads a stream of NULL-byte terminated messages in Graylog Extended Log Format (GELF).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3768"}),"#3768"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The  ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," parsers now support setting the header line manually with the ",(0,a.yg)("inlineCode",{parentName:"p"},"--header")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3778"}),"#3778"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"On Linux systems, the process metrics now have an additional value ",(0,a.yg)("inlineCode",{parentName:"p"},"open_fds")," showing the number of file descriptors opened by the node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3784"}),"#3784"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipeline states in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline")," API will not change upon node shutdown anymore. When a node restarts afterwards, previously running pipelines will continue to run while paused pipelines will load in a stopped state.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3785"}),"#3785"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," operator returns internal metrics events generated in a Tenzir node. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics --live")," to get a feed of metrics as they are being generated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3790"}),"#3790"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Concepts are now supported in more places than just the ",(0,a.yg)("inlineCode",{parentName:"p"},"where")," operator: All operators and concepts that reference fields in events now support them transparently. For example, it is not possible to enrich with a lookup table against all source IP addresses defined in the concept ",(0,a.yg)("inlineCode",{parentName:"p"},"net.src.ip"),", or to group by destination ports across different schemas with the concept ",(0,a.yg)("inlineCode",{parentName:"p"},"net.dst.port"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3812"}),"#3812"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The  ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," printers now support not printing a header line with the ",(0,a.yg)("inlineCode",{parentName:"p"},"--no-header")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3821"}),"#3821"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"diagnostics")," operator provides information about diagnostics that a pipeline may encounter during its lifetime.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3828"}),"#3828"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The RFC 3164 syslog parser now supports years in the message timestamp.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3833"}),"#3833")))),(0,a.yg)("h3",m({},{id:"bug-fixes-65"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/tenzir:latest-slim")," Docker image now sets a default ",(0,a.yg)("inlineCode",{parentName:"p"},"TENZIR_CACHE_DIRECTORY")," automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3764"}),"#3764"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When reading Base64-encoded JSON strings with the ",(0,a.yg)("inlineCode",{parentName:"p"},"blob")," type, ",(0,a.yg)("inlineCode",{parentName:"p"},"=")," padding is now accepted.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3765"}),"#3765"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," API now displays why a pipeline became unavailable in an error case instead of showing a generic error message. This causes runtime errors in pipelines to show up in the Explorer on app.tenzir.com.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3788"}),"#3788"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"export --live")," sometimes got stuck, failing to deliver events. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3790"}),"#3790"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/launch")," endpoint now optimizes the pipeline before starting it.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3801"}),"#3801"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Updating entries of a ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," context now overrides values with duplicate keys instead of ignoring them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3808"}),"#3808"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-tsv")," printer incorrectly emitted metadata too frequently. It now only writes opening and closing tags when it encounters a new schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3836"}),"#3836"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Failing transfers using ",(0,a.yg)("inlineCode",{parentName:"p"},"http(s)")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ftp(s)")," connectors now properly return an error when the transfer broke. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"from http://does.not.exist")," no longer returns silently a success.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3842"}),"#3842")))),(0,a.yg)("h2",m({},{id:"v471"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.7.1"}),"v4.7.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-66"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused operators that caused an increased memory usage for pipelines with slow operators immediately after a faster operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3758"}),"#3758"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that caused short-running pipelines to sometimes hang.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3758"}),"#3758")))),(0,a.yg)("h2",m({},{id:"v470"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.7.0"}),"v4.7.0")),(0,a.yg)("h3",m({},{id:"changes-28"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," operator now always connects to and runs at a node. Consequently, the ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"nics")," aspects moved into operators of their own.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3521"}),"#3521"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The events created by the RFC 3164 syslog parser no longer has a ",(0,a.yg)("inlineCode",{parentName:"p"},"tag")," field, but ",(0,a.yg)("inlineCode",{parentName:"p"},"app_name")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"process_id"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3692"}),"#3692"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Records can now have fields where the name is empty.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3742"}),"#3742")))),(0,a.yg)("h3",m({},{id:"features-41"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"With the new ",(0,a.yg)("inlineCode",{parentName:"p"},"processes")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"sockets")," source operators, you can now get a snapshot of the operating system processes and sockets as pipeline input.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3521"}),"#3521"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"kv")," parser splits strings into key-value pairs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3646"}),"#3646"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"show partitions")," now contains location and size of the ",(0,a.yg)("inlineCode",{parentName:"p"},"store"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"index"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"sketch")," files of a partition, as well the aggregate size at ",(0,a.yg)("inlineCode",{parentName:"p"},"diskusage"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3675"}),"#3675"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"grok")," parser, for use with the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse")," operator, enables powerful regex-based string dissection.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3683"}),"#3683"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser now supports macOS-style syslog messages.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3692"}),"#3692"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"slice")," operator keeps a range of events within a half-closed interval. Begin and end of the interval can be specified relative to the first or last event.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3703"}),"#3703"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"show operators")," now shows user-defined operators in addition to operators that ship with Tenzir or as plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3723"}),"#3723"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tcp")," connector is now also a saver in addition to a loader.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3727"}),"#3727"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"geoip")," context is a built-in that reads MaxMind DB files and uses IP values in events to enrich them with the MaxMind DB geolocation data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3731"}),"#3731")))),(0,a.yg)("h3",m({},{id:"bug-fixes-67"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Pipeline operators blocking in their execution sometimes caused results to be delayed. This is no longer the case. This bug fix also reduces the time to first result for pipelines with many operators.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3743"}),"#3743"))),(0,a.yg)("h2",m({},{id:"v464"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.6.4"}),"v4.6.4")),(0,a.yg)("h3",m({},{id:"changes-29"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When selecting default paths, the ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir-node")," will now respect the systemd-provided variables ",(0,a.yg)("inlineCode",{parentName:"li"},"STATE_DIRECTORY"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"CACHE_DIRECTORY")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"LOGS_DIRECTORY")," before falling back to ",(0,a.yg)("inlineCode",{parentName:"li"},"$PWD/tenzir.db"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3714"}),"#3714"))),(0,a.yg)("h3",m({},{id:"features-42"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"tenzir.metrics.operator")," metric now contains an additional ",(0,a.yg)("inlineCode",{parentName:"li"},"duration")," field with the timespan over which the metric was collected.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3713"}),"#3713"))),(0,a.yg)("h3",m({},{id:"bug-fixes-68"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The RFC 3164 syslog parser no longer requires a whitespace after the ",(0,a.yg)("inlineCode",{parentName:"p"},"PRI"),"-field (part in angle brackets in the beginning of a message).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3718"}),"#3718"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The yaml printer no longer crashes when receiving enums.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3719"}),"#3719")))),(0,a.yg)("h2",m({},{id:"v463"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.6.3"}),"v4.6.3")),(0,a.yg)("h3",m({},{id:"bug-fixes-69"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The Debian package sometimes failed to install, and the bundled systemd unit failed to start with Tenzir v4.6.2. This issue no longer exists.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3705"}),"#3705"))),(0,a.yg)("h2",m({},{id:"v460"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.6.0"}),"v4.6.0")),(0,a.yg)("h3",m({},{id:"changes-30"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Ingress and egress metrics for pipelines now indicate whether the pipeline sent/received events to/from outside of the node with a new ",(0,a.yg)("inlineCode",{parentName:"p"},"internal")," flag. For example, when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator, data is entering the pipeline from within the node, so its ingress is considered internal.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3658"}),"#3658"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We renamed the name of our python package from ",(0,a.yg)("inlineCode",{parentName:"p"},"pytenzir")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3660"}),"#3660"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We renamed the ",(0,a.yg)("inlineCode",{parentName:"p"},"--bind")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"zmq")," connector to ",(0,a.yg)("inlineCode",{parentName:"p"},"--listen"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3664"}),"#3664")))),(0,a.yg)("h3",m({},{id:"features-43"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"python")," operator adds the ability to perform arbitrary event to event transformations with the full power of Python 3.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3592"}),"#3592"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The operators ",(0,a.yg)("inlineCode",{parentName:"p"},"from"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"to"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"load"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"save")," support using URLs and file paths directly as their argument. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"load https://example.com")," means ",(0,a.yg)("inlineCode",{parentName:"p"},"load https https://example.com"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"save local-file.json")," means ",(0,a.yg)("inlineCode",{parentName:"p"},"save file local-file.json"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3608"}),"#3608"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"--internal")," flag for the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operators returns internal events collected by the system, for example pipeline metrics.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3619"}),"#3619"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"syslog")," parser allows reading both RFC 5424 and RFC 3164 syslog messages.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3645"}),"#3645"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," without an aspect to return information about all aspects of a node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3650"}),"#3650"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"yield")," operator extracts nested records with the ability to unfold lists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3651"}),"#3651"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When using ",(0,a.yg)("inlineCode",{parentName:"p"},"from <URL>")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to <URL>")," without specifying the format explicitly using a ",(0,a.yg)("inlineCode",{parentName:"p"},"read"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"write")," argument, the default format is determined by the file extension for all loaders and savers, if possible. Previously, that was only done when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"file")," loader/saver. Additionally, if the file name would indicate some sort of compression (e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},".gz"),"), compression and decompression is performed automatically. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"from https://example.com/myfile.yml.gz")," is expanded to ",(0,a.yg)("inlineCode",{parentName:"p"},"load https://example.com/myfile.yml.gz | decompress gzip | read yaml")," automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3653"}),"#3653"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We added a new ",(0,a.yg)("inlineCode",{parentName:"p"},"tcp")," connector that allows reading raw bytes from TCP or TLS connections.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3664"}),"#3664"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new, experimental ",(0,a.yg)("inlineCode",{parentName:"p"},"parse")," operator applies a parser to the string stored in a given field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3665"}),"#3665"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We optimized the behavior of the 'serve' operator to respond quicker and cause less system load for pipelines that take a long time to generate the first result. The new ",(0,a.yg)("inlineCode",{parentName:"p"},"min_events")," parameter can be used to implement long-polling behavior for clients of ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3666"}),"#3666"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"apply")," operator includes pipelines defined in other files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3677"}),"#3677"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"--allow-comments")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," parser (incl. ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv"),") to treat lines beginning with ",(0,a.yg)("inlineCode",{parentName:"p"},"'#'")," as comments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3681"}),"#3681"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The closed-source ",(0,a.yg)("inlineCode",{parentName:"p"},"context")," plugin offers a backend functionality for finding matches between data sets.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3684"}),"#3684"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"lookup-table")," built-in is a hashtable-based contextualization algorithm that enriches events based on a unique value.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3684"}),"#3684"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON format has a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--arrays-of-objects")," parameter that allows for parsing a JSON array of JSON objects into an event for each object.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3684"}),"#3684")))),(0,a.yg)("h3",m({},{id:"bug-fixes-70"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"export --live")," now respects a subsequent ",(0,a.yg)("inlineCode",{parentName:"p"},"where <expr>")," instead of silently discarding the filter expression.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3619"}),"#3619"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"sort")," operator with polymorphic inputs no longer leads to a failing assertion under some circumstances.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3655"}),"#3655"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv")," parsers now correctly support empty strings, lists, and null values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3687"}),"#3687"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tail")," operator no longer hangs occasionally.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3687"}),"#3687")))),(0,a.yg)("h2",m({},{id:"v450"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.5.0"}),"v4.5.0")),(0,a.yg)("h3",m({},{id:"changes-31"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The operators ",(0,a.yg)("inlineCode",{parentName:"p"},"drop"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"pseudonymize"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"put"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"extend"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"replace"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"rename")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"select")," were converted from suffix matching to prefix matching and can therefore address records now.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3616"}),"#3616"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Sparse indexes for time and bool fields are now always enabled, accelerating lookups against them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3639"}),"#3639")))),(0,a.yg)("h3",m({},{id:"features-44"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"api")," source operator interacts with Tenzir's REST API without needing to spin up a web server, making all APIs accessible from within pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3630"}),"#3630"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"In ",(0,a.yg)("inlineCode",{parentName:"p"},"where <expression>"),", the types of numeric literals and numeric fields in an equality or relational comparison must no longer match exactly. The literals ",(0,a.yg)("inlineCode",{parentName:"p"},"+42"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"42")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"42.0")," now compare against fields of types ",(0,a.yg)("inlineCode",{parentName:"p"},"int64"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"uint64"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"double")," as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3634"}),"#3634"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," operator now flushes events to disk automatically before returning, ensuring that they are available immediately for subsequent uses of the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3638"}),"#3638"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Lookups against uint64, int64, double, and duration fields now always use sparse indexes, which improves the performance of ",(0,a.yg)("inlineCode",{parentName:"p"},"export | where <expression>")," for some expressions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3639"}),"#3639"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator has no ",(0,a.yg)("inlineCode",{parentName:"p"},"by")," clause, it now returns a result even if there is no input. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize num=count(.)")," returns an event with ",(0,a.yg)("inlineCode",{parentName:"p"},'{"num": 0}'),". Aggregation functions which do not have a single default value, for example because it would depend on the input type, return ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3640"}),"#3640"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.disable-plugins")," option is a list of names of plugins and builtins to explicitly forbid from being used in Tenzir. For example, adding ",(0,a.yg)("inlineCode",{parentName:"p"},"shell")," will prohibit use of the ",(0,a.yg)("inlineCode",{parentName:"p"},"shell")," operator builtin, and adding ",(0,a.yg)("inlineCode",{parentName:"p"},"kafka")," will prohibit use of the ",(0,a.yg)("inlineCode",{parentName:"p"},"kafka")," connector plugin. This allows for a more fine-grained control than the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.allow-unsafe-pipelines")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3642"}),"#3642")))),(0,a.yg)("h3",m({},{id:"bug-fixes-71"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The long option ",(0,a.yg)("inlineCode",{parentName:"p"},"--append")," for the ",(0,a.yg)("inlineCode",{parentName:"p"},"file")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"directory")," savers now works as documented. Previously, only the short option worked correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3629"}),"#3629"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"exporter.*")," metrics will now be emitted in case the exporter finishes early.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3633"}),"#3633")))),(0,a.yg)("h2",m({},{id:"v440"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.4.0"}),"v4.4.0")),(0,a.yg)("h3",m({},{id:"changes-32"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," type is now restricted to valid UTF-8 strings. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"blob")," for arbitrary binary data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3581"}),"#3581"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"autostart")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"autodelete")," parameters for the pipeline manager supersede the ",(0,a.yg)("inlineCode",{parentName:"p"},"start_when_created")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"restart_with_node")," parameters and extend restarting and deletion possibilities for pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3585"}),"#3585")))),(0,a.yg)("h3",m({},{id:"features-45"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"amqp")," connector enables interaction with an AMQP 0-9-1 exchange, supporting working with messages as producer (saver) and consumer (loader).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3546"}),"#3546"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"completed")," pipeline state in the pipeline manager shows when a pipeline has finished execution.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3554"}),"#3554"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If the node with running pipelines crashes, they will be marked as ",(0,a.yg)("inlineCode",{parentName:"p"},"failed")," upon restarting.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3554"}),"#3554"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"velociraptor")," source supports submitting VQL queries to a Velociraptor server. The operator communicates with the server via gRPC using a mutually authenticated and encrypted connection with client certificates. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},'velociraptor -q "select * from pslist()"')," lists processes and their running binaries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3556"}),"#3556"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"show partitions")," includes a new ",(0,a.yg)("inlineCode",{parentName:"p"},"events")," field that shows the number of events kept in that partition. E.g., the pipeline ",(0,a.yg)("inlineCode",{parentName:"p"},"show partitions | summarize events=sum(events) by schema")," shows the number of events per schema stored at the node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3580"}),"#3580"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"blob")," type can be used to represent arbitrary binary data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3581"}),"#3581"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"ttl_expires_in_ns")," shows the remaining time to live for a pipeline in the pipeline manager.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3585"}),"#3585"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"yara")," operator matches Yara rules on byte streams, producing structured events when rules match.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3594"}),"#3594"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"show serves")," displays all currently active serve IDs in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," API endpoint, showing an overview of active pipelines with an on-demand API.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3596"}),"#3596"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," operator now has a ",(0,a.yg)("inlineCode",{parentName:"p"},"--live")," option to continuously emit events as they are imported instead of those that already reside in the database.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3612"}),"#3612")))),(0,a.yg)("h3",m({},{id:"bug-fixes-72"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines ending with the ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," operator no longer incorrectly exit 60 seconds after transferring all events to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint, but rather wait until all events were fetched from the endpoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3562"}),"#3562"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Shutting down a node immediately after starting it now no longer waits for all partitions to be loaded.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3562"}),"#3562"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When using ",(0,a.yg)("inlineCode",{parentName:"p"},"read json"),", incomplete objects (e.g., due to truncated files) are now reported as an error instead of silently discarded.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3570"}),"#3570"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Having duplicate field names in ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-tsv")," data no longer causes a crash, but rather errors out gracefully.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3578"}),"#3578"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"csv")," parsed (or more generally, the ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," parser) now attempts to parse fields in order to infer their types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3582"}),"#3582"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A regression in Tenzir v4.3 caused exports to often consider all partitions as candidates. Pipelines of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"export | where <expr>")," now work as expected again and only load relevant partitions from disk.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3599"}),"#3599"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The long option ",(0,a.yg)("inlineCode",{parentName:"p"},"--skip-empty")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"read lines")," now works as documented.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3599"}),"#3599"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-tsv")," parser is now able to handle fields of type ",(0,a.yg)("inlineCode",{parentName:"p"},"subnet")," correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3606"}),"#3606")))),(0,a.yg)("h2",m({},{id:"v430"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.3.0"}),"v4.3.0")),(0,a.yg)("h3",m({},{id:"changes-33"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We made it easier to reuse the default ",(0,a.yg)("inlineCode",{parentName:"p"},"zmq")," socket endpoint by disabling ",(0,a.yg)("em",{parentName:"p"},"socket lingering"),", and thereby immediately relinquishing resources when terminating a ZeroMQ pipeline. Changing the linger period from infinite to 0 no longer buffers pending messages in memory after closing a ZeroMQ socket.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3536"}),"#3536"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir no longer builds dense indexes for imported events. Dense indexes improved query performance at the cost of a higher memory usage. However, over time the performance improvement became smaller due to other improvements in the underlying storage engine.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3552"}),"#3552"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tenzir no longer supports models in taxonomies. Since Tenzir v4.0 they were only supported in the deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl export")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl count")," commands. We plan to bring the functionality back in the future with more powerful expressions in TQL.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3552"}),"#3552")))),(0,a.yg)("h3",m({},{id:"features-46"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"yaml")," format supports reading and writing YAML documents and streams.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3456"}),"#3456"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"fluent-bit")," source and sink operator provide and interface to the Fluent Bit ecosystem. The source operator maps to a Fluent Bit ",(0,a.yg)("em",{parentName:"p"},"input")," and the sink operator to a Fluent Bit ",(0,a.yg)("em",{parentName:"p"},"output"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3461"}),"#3461"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/fluent"}),"@fluent"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/bit"}),"@bit"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The performance of the ",(0,a.yg)("inlineCode",{parentName:"p"},"json"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-json")," parsers was improved.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," parser has a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--raw")," flag, which uses the raw type of JSON values instead of trying to infer one. For example, strings with ip addresses are given the type ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"ip"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A dedicated ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," type was added.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Empty records are now allowed. Operators that previously discarded empty records (for example, ",(0,a.yg)("inlineCode",{parentName:"p"},"drop"),") now preserve them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The pipeline manager now supports user-provided labels for pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3541"}),"#3541")))),(0,a.yg)("h3",m({},{id:"bug-fixes-73"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-json")," parsers are now more stable and should now parse all inputs correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"null")," records are no longer incorrectly transformed into records with ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," fields anymore.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3503"}),"#3503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The type of the ",(0,a.yg)("inlineCode",{parentName:"p"},"quic.version")," field in the built-in ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.quic")," schema was fixed. It now is a string instead of an integer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3533"}),"#3533"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," loader no longer ignores the value user-provided custom headers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3535"}),"#3535"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"parquet")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"feather")," formats no longer throw assertions during normal usage anymore.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3537"}),"#3537"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.software")," does not contain an incomplete ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," record type anymore.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3538"}),"#3538"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"version.minor")," type in the ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.software")," schema is now a ",(0,a.yg)("inlineCode",{parentName:"p"},"uint64")," instead of a ",(0,a.yg)("inlineCode",{parentName:"p"},"double")," to comply with Zeek's version structure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3538"}),"#3538"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The web server will not crash when receiving requests during shutdown anymore.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3553"}),"#3553")))),(0,a.yg)("h2",m({},{id:"v420"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.2.0"}),"v4.2.0")),(0,a.yg)("h3",m({},{id:"changes-34"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The long option name ",(0,a.yg)("inlineCode",{parentName:"p"},"--emit-file-header")," of the ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," parser is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"--emit-file-headers")," (plural) to streamline it with the ",(0,a.yg)("inlineCode",{parentName:"p"},"nic")," loader and the new capability to process concatenated PCAP files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3513"}),"#3513"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"decapsulate")," operator no longer drops the PCAP packet data in incoming events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3515"}),"#3515")))),(0,a.yg)("h3",m({},{id:"features-47"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"s3")," connector enables the user to import/export file data from/to S3 buckets.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3496"}),"#3496"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"zmq")," connector ships with a saver and loader for interacting with ZeroMQ. The loader (source) implements a connecting ",(0,a.yg)("inlineCode",{parentName:"p"},"SUB")," socket and the saver (sink) a binding ",(0,a.yg)("inlineCode",{parentName:"p"},"PUB")," socket. The ",(0,a.yg)("inlineCode",{parentName:"p"},"--bind")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"--connect")," flags make it possible to control the direction of connection establishment.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3497"}),"#3497"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"gcs")," connector enables the user to import/export file data from/to GCS buckets.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3498"}),"#3498"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new connectors ",(0,a.yg)("inlineCode",{parentName:"p"},"http"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"https"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ftp"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ftps")," simplify using remote files in pipelines via HTTP(S) and FTP(S).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3499"}),"#3499"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"lines")," parser splits its input at newline characters and produces events with a single field containing the line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3511"}),"#3511"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," parser can now process a stream of concatenated PCAP files. On the command line, you can now parse traces with ",(0,a.yg)("inlineCode",{parentName:"p"},"cat *.pcap | tenzir 'read pcap'"),". When providing ",(0,a.yg)("inlineCode",{parentName:"p"},"--emit-file-headers"),", each intermediate file header yields a separate event.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3513"}),"#3513"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"nic")," loader has a new option ",(0,a.yg)("inlineCode",{parentName:"p"},"--emit-file-headers")," that prepends a PCAP file header for every batch of bytes that the loader produces, yielding a stream of concatenated PCAP files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3513"}),"#3513"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"You can now write ",(0,a.yg)("inlineCode",{parentName:"p"},"show nics")," to get a list of network interfaces. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"show nics | select name")," to a get a list of possible interface names for ",(0,a.yg)("inlineCode",{parentName:"p"},"from nic"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3517"}),"#3517")))),(0,a.yg)("h3",m({},{id:"bug-fixes-74"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},'Pipelines now show up in the "stopped" instead of the "created" state after the node restarted.\n',(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3487"}),"#3487"))),(0,a.yg)("h2",m({},{id:"v410"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.1.0"}),"v4.1.0")),(0,a.yg)("h3",m({},{id:"changes-35"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"version")," operator no longer exists. Use ",(0,a.yg)("inlineCode",{parentName:"li"},"show version")," to get the Tenzir version instead. The additional information that ",(0,a.yg)("inlineCode",{parentName:"li"},"version")," produced is now available as ",(0,a.yg)("inlineCode",{parentName:"li"},"show build"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"show dependencies"),", and ",(0,a.yg)("inlineCode",{parentName:"li"},"show plugins"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3442"}),"#3442"))),(0,a.yg)("h3",m({},{id:"features-48"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," operator filters its input with Sigma rules and outputs matching events alongside the matched rule.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3138"}),"#3138"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"compress [--level <level>] <codec>")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"decompress <codec>")," operators enable streaming compression and decompression in pipelines for ",(0,a.yg)("inlineCode",{parentName:"p"},"brotli"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"bz2"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"gzip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lz4"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"zstd"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3443"}),"#3443"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show config")," aspect returns the configuration currently in use, combining options set in the configuration file, the command-line, environment options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3455"}),"#3455"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"show pipelines")," aspect displays a list of all managed pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3457"}),"#3457"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"pause")," action in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/update")," endpoint suspends a pipeline and sets its state to ",(0,a.yg)("inlineCode",{parentName:"p"},"paused"),". Resume it with the ",(0,a.yg)("inlineCode",{parentName:"p"},"start")," action.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3471"}),"#3471"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Newly created pipelines are now in a new ",(0,a.yg)("inlineCode",{parentName:"p"},"created")," rather than ",(0,a.yg)("inlineCode",{parentName:"p"},"stopped")," state.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3471"}),"#3471"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"rendered")," field in the pipeline manager diagnostics delivers a displayable version of the diagnostic's error message.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3479"}),"#3479"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines that encounter an error during execution are now in a new ",(0,a.yg)("inlineCode",{parentName:"p"},"failed")," rather than ",(0,a.yg)("inlineCode",{parentName:"p"},"stopped")," state.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3479"}),"#3479")))),(0,a.yg)("h3",m({},{id:"bug-fixes-75"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipeline operators that create output independent of their input now emit their output instantly instead of waiting for receiving further input. This makes the ",(0,a.yg)("inlineCode",{parentName:"p"},"shell")," operator more reliable.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3470"}),"#3470"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"show <aspect>")," operator wrongfully required unsafe pipelines to be allowed for some aspects. This is now fixed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3470"}),"#3470")))),(0,a.yg)("h2",m({},{id:"v401"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.0.1"}),"v4.0.1")),(0,a.yg)("h3",m({},{id:"features-49"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"It is now possible to replace the schema name with ",(0,a.yg)("inlineCode",{parentName:"li"},'replace #schema="new_name"'),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3451"}),"#3451"))),(0,a.yg)("h2",m({},{id:"v400"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v4.0.0"}),"v4.0.0")),(0,a.yg)("h3",m({},{id:"breaking-changes"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"stop")," command no longer exists. Shut down VAST nodes using CTRL-C instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3166"}),"#3166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," command no longer exists. Use the more powerful ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," pipeline operator instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3166"}),"#3166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"spawn source")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"spawn sink")," commands no longer exist. To import data remotely, run a pipeline in the form of ",(0,a.yg)("inlineCode",{parentName:"p"},"remote from \u2026 | \u2026 | import"),", and to export data remotely, run a pipeline in the form of ",(0,a.yg)("inlineCode",{parentName:"p"},"export | \u2026 | remote to \u2026"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3166"}),"#3166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The lower-level ",(0,a.yg)("inlineCode",{parentName:"p"},"peer"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"kill"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"send")," commands no longer exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3166"}),"#3166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"#type")," meta extractor was renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"#schema"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3183"}),"#3183"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST is now called Tenzir. The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," binary replaces ",(0,a.yg)("inlineCode",{parentName:"p"},"vast exec")," to execute a pipeline. The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzird")," binary replaces ",(0,a.yg)("inlineCode",{parentName:"p"},"vast start")," to start a node. The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzirctl")," binary continues to offer all functionality that ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," previously offered until all commands have been migrated to pipeline operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3187"}),"#3187"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Debian package for Tenzir replaces previous VAST installations and attempts to migrate existing data from VAST to Tenzir in the process. You can opt-out of this migration by creating the file ",(0,a.yg)("inlineCode",{parentName:"p"},"/var/lib/vast/disable-migration"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3203"}),"#3203"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the ",(0,a.yg)("inlineCode",{parentName:"p"},"rest_endpoint_plugin::prefix()")," function from the public API of the ",(0,a.yg)("inlineCode",{parentName:"p"},"rest_endpoint_plugin")," class. For a migration, existing users should prepend the prefix manually to all endpoints defined by their plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3221"}),"#3221"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We changed the default connector of ",(0,a.yg)("inlineCode",{parentName:"p"},"read <format>")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write <format>")," for all formats to ",(0,a.yg)("inlineCode",{parentName:"p"},"stdin")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"stdout"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3223"}),"#3223"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed language plugins in favor of operator-based integrations.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3223"}),"#3223"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The interface of the operator, loader, parser, printer and saver plugins was changed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3223"}),"#3223"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The aggregation functions in a ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator can now receive only a single extractor instead of multiple ones.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3250"}),"#3250"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The behavior for absent columns and aggregations across multiple schemas was changed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3250"}),"#3250"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We reimplemented the old ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," plugin as a format. The command ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir-ctl import pcap")," no longer works. Instead, the new ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," plugin provides a parser that emits ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap.packet")," events, as well as a printer that generates a PCAP file when provided with these events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3263"}),"#3263"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"delete_when_stopped")," flag was removed from the pipeline manager REST API.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3292"}),"#3292"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the ",(0,a.yg)("inlineCode",{parentName:"p"},"--pretty")," option from the ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," printer. This option is now the default. To switch to NDJSON, use ",(0,a.yg)("inlineCode",{parentName:"p"},"-c|--compact-output"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3343"}),"#3343"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated options ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.pipelines")," (replaced with ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.operators"),") and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.pipeline-triggers")," (no replacement) no longer exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3358"}),"#3358"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated deprecated types ",(0,a.yg)("inlineCode",{parentName:"p"},"addr"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"count"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"real")," (replaced with ",(0,a.yg)("inlineCode",{parentName:"p"},"ip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"uint64"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"int64"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"double"),", respectively) no longer exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3358"}),"#3358"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"parse")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"print")," operators have been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"read")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write"),", respectively. The ",(0,a.yg)("inlineCode",{parentName:"p"},"read ... [from ...]")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write ... [to ...]")," operators are not available anymore. If you did not specify a connector, you can continue using ",(0,a.yg)("inlineCode",{parentName:"p"},"read ...")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write ...")," in many cases. Otherwise, use ",(0,a.yg)("inlineCode",{parentName:"p"},"from ... [read ...]")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"to ... [write ...]")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3365"}),"#3365")))),(0,a.yg)("h3",m({},{id:"changes-36"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default port of the web plugin changed from 42001 to 5160. This change avoids collisions from dynamic port allocation on Linux systems.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3180"}),"#3180"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The HTTP method of the status endpoint in the experimental REST API is now ",(0,a.yg)("inlineCode",{parentName:"p"},"POST"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3194"}),"#3194"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now register extension types as ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.ip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.subnet"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.enumeration")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.address"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.subnet"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.enumeration"),", respectively. Arrow schema metadata now has a ",(0,a.yg)("inlineCode",{parentName:"p"},"TENZIR:")," prefix instead of a ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST:")," prefix.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3208"}),"#3208"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The debugging utility ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," no longer exists. Pipelines replace most of its functionality.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3211"}),"#3211"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default database directory moved from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.db")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.db"),". Use the option ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.db-directory")," to manually set the database directory path.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3212"}),"#3212"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We reduced the default ",(0,a.yg)("inlineCode",{parentName:"p"},"batch-timeout")," from ten seconds to one second in to improve the user experience of interactive pipelines with data aquisition.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3320"}),"#3320"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We reduced the default ",(0,a.yg)("inlineCode",{parentName:"p"},"active-partition-timeout")," from 5 minutes to 30 seconds to reduce the time until data is persisted.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3320"}),"#3320"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default interval between two automatic rebuilds is now set to 2 hours and can be configured with the ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuild-interval")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3377"}),"#3377")))),(0,a.yg)("h3",m({},{id:"features-50"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"flatten [<separator>]")," operator flattens nested data structures by joining nested records with the specified separator (defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"."),") and merging lists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3018"}),"#3018"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The sink operator ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," persists events in a VAST node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3128"}),"#3128"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3173"}),"#3173"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3193"}),"#3193"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The source operator ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," retrieves events from a VAST node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3128"}),"#3128"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3173"}),"#3173"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3193"}),"#3193"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"repeat")," operator repeats its input a given number of times.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3128"}),"#3128"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3173"}),"#3173"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3193"}),"#3193"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"enumerate")," operator prepends a column with the row number of the input records.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3142"}),"#3142"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"sort"),' operator allows for arranging events by field, in ascending and descending order. The current version is still "beta" and has known limitations.\n',(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3155"}),"#3155"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"measure")," operator now returns running totals with the ",(0,a.yg)("inlineCode",{parentName:"p"},"--cumulative")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3156"}),"#3156"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--timeout")," option for the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," command allows for defining how long VAST waits for components to report their status. The option defaults to 10 seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3162"}),"#3162"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("em",{parentName:"p"},"pipeline-manager")," is a proprietary plugin that allows for creating, updating and persisting pipelines. The included RESTful interface allows for easy access and modification of these pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3164"}),"#3164"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"top <field>")," operator makes it easy to find the most common values for the given field. Likewise, ",(0,a.yg)("inlineCode",{parentName:"p"},"rare <field>")," returns the least common values for the given field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3176"}),"#3176"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," operator and ",(0,a.yg)("inlineCode",{parentName:"p"},"/serve")," endpoint supersede the experimental ",(0,a.yg)("inlineCode",{parentName:"p"},"/query")," endpoint. The operator is a sink for events, and bridges a pipeline into a RESTful interface from which events can be pulled incrementally.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3180"}),"#3180"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"#schema_id")," meta extractor returns a unique fingerprint for the schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3183"}),"#3183"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"In addition to ",(0,a.yg)("inlineCode",{parentName:"p"},'tenzir "<pipeline>"'),", there now is ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir -f <file>"),", which loads and executes the pipeline defined in the given file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3223"}),"#3223"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The pipeline parser now emits helpful and visually pleasing diagnostics.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3223"}),"#3223"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator now works across multiple schemas and can combine events of different schemas into one group. It now also treats missing columns as having ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3250"}),"#3250"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"by")," clause of ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," is now optional. If it is omitted, all events are assigned to the same group.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3250"}),"#3250"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"nic")," plugin provides a loader that acquires packets from a network interface card using libpcap. It emits chunks of data in the PCAP file format so that the ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," parser can process them as if packets come from a trace file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3263"}),"#3263"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"decapsulate")," operator processes events of type ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap.packet")," and emits new events of type ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir.packet")," that contain the decapsulated PCAP packet with packet header fields from the link, network, and transport layer. The operator also computes a Community ID.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3263"}),"#3263"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The pipeline manager now accepts empty strings for the optional ",(0,a.yg)("inlineCode",{parentName:"p"},"name"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"/create")," endpoint returns a list of diagnostics if pipeline creation fails, and if ",(0,a.yg)("inlineCode",{parentName:"p"},"start_when_created")," is set, the endpoint now returns only after the pipeline execution has been fully started. The ",(0,a.yg)("inlineCode",{parentName:"p"},"/list")," endpoint now returns the diagnostics collected for every pipeline so far. The ",(0,a.yg)("inlineCode",{parentName:"p"},"/delete")," endpoint now returns an empty object if the request is successful.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3264"}),"#3264"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-tsv")," parser sometimes failed to parse Zeek TSV logs, wrongly reporting that the header ended too early. This bug no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3291"}),"#3291"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema")," option for the JSON parser allows for setting the target schema explicitly by name.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3295"}),"#3295"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"unflatten [<separator>]")," operator unflattens data structures by creating nested records out of fields whose names contain a ",(0,a.yg)("inlineCode",{parentName:"p"},"<separator>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3304"}),"#3304"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines executed locally with ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir")," now use ",(0,a.yg)("inlineCode",{parentName:"p"},"load -")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read json")," as implicit sources. This complements ",(0,a.yg)("inlineCode",{parentName:"p"},"save -")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"write json --pretty")," as implicit sinks.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3329"}),"#3329"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," printer can now colorize its output by providing the ",(0,a.yg)("inlineCode",{parentName:"p"},"-C|--color-output")," option, and explicitly disable coloring via ",(0,a.yg)("inlineCode",{parentName:"p"},"-M|--monochrome-output"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3343"}),"#3343"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipeline metrics (total ingress/egress amount and average rate per second) are now visible in the ",(0,a.yg)("inlineCode",{parentName:"p"},"pipeline-manager"),", via the ",(0,a.yg)("inlineCode",{parentName:"p"},"metrics")," field in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/pipeline/list")," endpoint result.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3376"}),"#3376"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"directory")," saver now supports the two arguments ",(0,a.yg)("inlineCode",{parentName:"p"},"-a|--append")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"-r|--realtime")," that have the same semantics as they have for the ",(0,a.yg)("inlineCode",{parentName:"p"},"file")," saver: open files in the directory in append mode (instead of overwriting) and flush the output buffers on every update.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3379"}),"#3379"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sort")," operator now also works for ",(0,a.yg)("inlineCode",{parentName:"p"},"ip")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3390"}),"#3390"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"tenzir --dump-metrics '<pipeline>'")," prints a performance overview of the executed pipeline on stderr at the end.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3390"}),"#3390"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"batch <limit>")," operator allows expert users to control batch sizes in pipelines explicitly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3391"}),"#3391"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," source operator makes it possible to gather meta information about Tenzir. For example, the provided introspection capabilities allow for emitting existing formats, connectors, and operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3414"}),"#3414"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," parser now servers as a fallback parser for all files whose extension do not have any default parser in Tenzir.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3422"}),"#3422")))),(0,a.yg)("h3",m({},{id:"bug-fixes-76"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Using transformation operators like ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"sort"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"put"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"extend"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," no longer sometimes crashes after a preceding ",(0,a.yg)("inlineCode",{parentName:"p"},"head")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"tail")," operator when referencing a nested field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3171"}),"#3171"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tail")," operator sometimes returned more events than specified. This no longer happens.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3171"}),"#3171"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug in the compation plugin that prevented it from applying the configured weights when it was used for the first time on a database.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3185"}),"#3185"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Starting a remote pipeline with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast exec")," failed when the node was not reachable yet. Like other commands, executing a pipeline now waits until the node is reachable before starting.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3188"}),"#3188"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Import processes sometimes failed to shut down automatically when the node exited. They now shut down reliably.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3207"}),"#3207")))),(0,a.yg)("h2",m({},{id:"v310"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.1.0"}),"v3.1.0")),(0,a.yg)("h3",m({},{id:"changes-37"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/query")," REST endpoint no longer accepts an expression at the start of the query. Instead, use ",(0,a.yg)("inlineCode",{parentName:"p"},"where <expr> | ..."),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3015"}),"#3015"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"As already announced with the VAST v3.0 release, the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.pipeline-triggers")," option now no longer functions. The feature will be replaced with node ingress/egress pipelines that fit better into a multi-node model than the previous feature that was built under the assumption of a client/server model with a single server.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3052"}),"#3052"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The bundled systemd service is now configured to restart VAST in case of a failure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3058"}),"#3058"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.operators")," section in the configuration file supersedes the now deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.pipelines")," section and more generally enables user-defined operators. Defined operators now must use the new, textual format introduced with VAST v3.0, and are available for use in all places where pipelines are supported.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3067"}),"#3067"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"exporter.*")," metrics no longer exist, and will return in a future release as a more generic instrumentation mechanism for all pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3076"}),"#3076")))),(0,a.yg)("h3",m({},{id:"features-51"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"put")," operator is the new companion to the existing ",(0,a.yg)("inlineCode",{parentName:"p"},"extend")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," operators. It specifies the output fields exactly, referring either to input fields with an extractor, metadata with a selector, or a fixed value.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3036"}),"#3036"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3039"}),"#3039"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3089"}),"#3089"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"extend")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," operators now support assigning extractors and selectors in addition to just fixed values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3036"}),"#3036"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3039"}),"#3039"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3089"}),"#3089"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"tail")," pipeline operator limits all latest events to a specified number. The operator takes the limit as an optional argument, with the default value being 10.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3050"}),"#3050"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The newly-added ",(0,a.yg)("inlineCode",{parentName:"p"},"unique")," operator removes adjacent duplicates.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3051"}),"#3051"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"User-defined operator aliases make pipelines easier to use by enabling users to encapsulate a pipelinea into a new operator. To define a user-defined operator alias, add an entry to the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.operators")," section of your configuration.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3064"}),"#3064"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Compaction now makes use of the new pipeline operators, and allows pipelines to be defined inline instead in addition to the now deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.pipelines")," configuration section.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3064"}),"#3064"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"count_distinct")," aggregation function returns the number of distinct, non-null values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3068"}),"#3068"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export")," command now accepts the new pipelines as input. Furthermore, ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export <expr>")," is now deprecated in favor of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export 'where <expr>'"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3076"}),"#3076"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"from <connector> [read <format>]"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read <format> [from <connector>]"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"write <format> [to <connector>]"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"to <connector> [write <format>]")," operators bring together a connector and a format to prduce and consume events, respectively. Their lower-level building blocks ",(0,a.yg)("inlineCode",{parentName:"p"},"load <connector>"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"parse <format>"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"print <format>"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"save <connector>")," enable expert users to operate on raw byte streams directly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3079"}),"#3079"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"file")," connector enables the user to process file input/output as data in a pipeline. This includes regular files, UDS files as well as ",(0,a.yg)("inlineCode",{parentName:"p"},"stdin/stdout"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3085"}),"#3085"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3088"}),"#3088"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3097"}),"#3097"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"inspect")," operator replaces the events or bytes it receives with incremental metrics describing the input.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3093"}),"#3093"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"directory")," sink creates a directory with a file for each schema in the specified format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3098"}),"#3098"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"feather")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"parquet")," formats allow for reading and writing events from and to the Apache Feather V2 and Apache Parquet files, respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3103"}),"#3103"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"xsv")," format enables the user to parse and print character-separated values, with the additional ",(0,a.yg)("inlineCode",{parentName:"p"},"csv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tsv")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ssv")," formats as sane defaults.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3104"}),"#3104"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cef")," parser allows for using the CEF format with the new pipelines.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3110"}),"#3110"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-tsv")," format parses and prints Zeek's native tab-separated value (TSV) representation of logs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3114"}),"#3114"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines may now span across multiple processes. This will enable upcoming operators that do not just run locally in the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast exec")," process, but rather connect to a VAST node and partially run in that node. The new operator modifiers ",(0,a.yg)("inlineCode",{parentName:"p"},"remote")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"local")," allow expert users to control where parts of their pipeline run explicitly, e.g., to offload compute to a more powerful node. Potentially unsafe use of these modifiers requires setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.allow-unsafe-pipelines")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," in the configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3119"}),"#3119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast exec")," command now supports implicit sinks for pipelines that end in events or bytes: ",(0,a.yg)("inlineCode",{parentName:"p"},"write json --pretty")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"save file -"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3123"}),"#3123"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--pretty")," option for the JSON printer enables multi-line output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3123"}),"#3123"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," source operator yields a single event containing VAST's version and a list of enabled plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3123"}),"#3123")))),(0,a.yg)("h3",m({},{id:"bug-fixes-77"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST incorrectly handled subnets using IPv6 addresses for which an equivalent IPv4 address existed. This is now done correctly. For example, the query ",(0,a.yg)("inlineCode",{parentName:"p"},"where :ip !in ::ffff:0:0/96")," now returns all events containing an IP address that cannot be represented as an IPv4 address. As an additional safeguard, the VAST language no longer allows for constructing subnets for IPv4 addresses with lengths greater than 32.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3060"}),"#3060"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"distinct")," function silently performed a different operation on lists, returning the distinct non-null elements in the list rather than operating on the list itself. This special-casing no longer exists, and instead the function now operates on the lists itself. This feature will return in the future as unnesting on the extractor level via ",(0,a.yg)("inlineCode",{parentName:"p"},"distinct(field[])"),", but for now it has to go to make the ",(0,a.yg)("inlineCode",{parentName:"p"},"distinct")," aggregation function work consistently.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3068"}),"#3068"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Tokens created with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast web generate-token")," now persist correctly, and work across restarts of VAST.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3086"}),"#3086"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The matcher plugin no longer causes deadlocks through detached matcher clients.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3115"}),"#3115"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/vast")," image now listens on ",(0,a.yg)("inlineCode",{parentName:"p"},"0.0.0.0:5158")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"127.0.0.1:5158")," by default, which aligns the behavior with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/vast-slim")," image.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3137"}),"#3137"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some pipelines in compaction caused transformed partitions to be treated as if they were older than they were supposed to be, causing them to be picked up again for deletion too early. This bug no longer exists, and compacted partitions are now considered at most as old as the oldest event before compaction.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3141"}),"#3141"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuilder.partitions.remaining")," metric sometimes reported wrong values when partitions for at least one schema did not need to be rebuilt. We aligned the metrics with the actual functionality.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3147"}),"#3147")))),(0,a.yg)("h2",m({},{id:"v304"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.0.4"}),"v3.0.4")),(0,a.yg)("h3",m({},{id:"bug-fixes-78"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Automatic rebuilds now correctly consider only outdated or undersized partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3083"}),"#3083"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--all")," flag for the ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuild")," command now consistently causes all partitions to be rebuilt, aligning its functionality with its documentation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3083"}),"#3083")))),(0,a.yg)("h2",m({},{id:"v303"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.0.3"}),"v3.0.3")),(0,a.yg)("h3",m({},{id:"changes-38"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now depends on the Boost C++ libraries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3043"}),"#3043"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST's rebuilding and compaction features now interfere less with queries. This patch was also backported as ",(0,a.yg)("a",m({parentName:"p"},{href:"https://vast.io/changelog#v242"}),"VAST v2.4.2")," to enable a smoother upgrade from to VAST v3.x.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3047"}),"#3047")))),(0,a.yg)("h3",m({},{id:"features-52"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The new ",(0,a.yg)("inlineCode",{parentName:"li"},"vast exec")," command executes a pipeline locally. It takes a single argument representing a closed pipeline, and immediately executes it. This is the foundation for a new, pipeline-first VAST, in which most operations are expressed as pipelines.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3004"}),"#3004"),(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3010"}),"#3010"))),(0,a.yg)("h2",m({},{id:"v302"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.0.2"}),"v3.0.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-79"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST no longer miscalculates the ",(0,a.yg)("inlineCode",{parentName:"li"},"rebuild")," metrics.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3026"}),"#3026"))),(0,a.yg)("h2",m({},{id:"v301"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.0.1"}),"v3.0.1")),(0,a.yg)("h3",m({},{id:"features-53"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The VAST language now supports comments using the familiar ",(0,a.yg)("inlineCode",{parentName:"li"},"/* comment */")," notation. This makes it easy to document multi-line pipelines inline.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3011"}),"#3011"))),(0,a.yg)("h3",m({},{id:"bug-fixes-80"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when reading an unsupported partition from VAST v1.x. Instead, the partition is ignored correctly. Since v2.2 VAST automatically rebuilds partitions in the background to ensure compatibility.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3018"}),"#3018"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Automatic partition rebuilding both updates partitions with an outdated storage format and merges undersized partitions continuously in the background. This now also works as expected for outdated but not undersized partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3020"}),"#3020")))),(0,a.yg)("h2",m({},{id:"v300"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v3.0.0"}),"v3.0.0")),(0,a.yg)("h3",m({},{id:"breaking-changes-1"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The match operator ",(0,a.yg)("inlineCode",{parentName:"p"},"~"),", its negation ",(0,a.yg)("inlineCode",{parentName:"p"},"!~"),", and the ",(0,a.yg)("inlineCode",{parentName:"p"},"pattern")," type no longer exist. Use queries of the forms ",(0,a.yg)("inlineCode",{parentName:"p"},"lhs == /rhs/")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lhs != /rhs/")," instead for queries using regular expressions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2769"}),"#2769"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2873"}),"#2873"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," does not work anymore with an embedded node (i.e., spawned with the ",(0,a.yg)("inlineCode",{parentName:"p"},"-N")," parameter).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2771"}),"#2771"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"#field")," meta extractor no longer exists. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"X != null")," over ",(0,a.yg)("inlineCode",{parentName:"p"},'#field == "X"')," to check for existence for the field ",(0,a.yg)("inlineCode",{parentName:"p"},"X"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2776"}),"#2776"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer supports reading partitions created with VAST versions older than VAST v2.2. Since VAST v2.2, VAST continuously upgrades old partitions to the most recent internal format while running.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2778"}),"#2778"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2797"}),"#2797"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2798"}),"#2798"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the broker plugin that enabled direct Zeek 3.x log transfer to VAST. The plugin will return in the future rewritten for Zeek 5+.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2796"}),"#2796"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ignores the previously deprecated options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.meta-index-fp-rate"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.catalog-fp-rate"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.transforms")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.transform-triggers"),". Similarly, setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.store-backend")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," now results in an error rather than a graceful fallback to the default store.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2832"}),"#2832"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Boolean literals in expressions have a new syntax: ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," replace the old representations ",(0,a.yg)("inlineCode",{parentName:"p"},"T")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"F"),". For example, the query ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.alert.alerted == T")," is no longer valid; use ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.alert.alerted == true")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2844"}),"#2844"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The builtin types ",(0,a.yg)("inlineCode",{parentName:"p"},"count"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"real"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"addr")," were renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"uint64"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"int64"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"double"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ip")," respectively. For backwards-compatibility, VAST still supports parsing the old type tokens in schema files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2864"}),"#2864"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"explore")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pivot")," commands are now unavailable. They will be reintroduced as pipeline operators in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2898"}),"#2898"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"For the experimental REST API, the result format of the ",(0,a.yg)("inlineCode",{parentName:"p"},"/export")," endpoint was modified: The ",(0,a.yg)("inlineCode",{parentName:"p"},"num_events")," key was renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"num-events"),", and the ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," key was removed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2899"}),"#2899"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," type no longer exists: instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"map<T, U>"),", use the equivalent ",(0,a.yg)("inlineCode",{parentName:"p"},"list<record{ key: T, value: U }>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2976"}),"#2976"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We renamed the ",(0,a.yg)("inlineCode",{parentName:"p"},"identity")," operator to ",(0,a.yg)("inlineCode",{parentName:"p"},"pass"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2980"}),"#2980"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The REST API does not contain the ",(0,a.yg)("inlineCode",{parentName:"p"},"/export")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"/export/with-schemas")," endpoints anymore. Any previous queries using those endpoints have to be sent to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/query")," endpoint now.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2990"}),"#2990"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"From now on VAST will use TCP port 5158 for its native inter process communication. This change avoids collisions from dynamic port allocation on Linux systems.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2998"}),"#2998"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The non-value literal in expressions has a new syntax: ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," replaces its old representation ",(0,a.yg)("inlineCode",{parentName:"p"},"nil"),". For example, the query ",(0,a.yg)("inlineCode",{parentName:"p"},"x != nil")," is no longer valid; use ",(0,a.yg)("inlineCode",{parentName:"p"},"x != null")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2999"}),"#2999"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.pipeline-triggers")," option is deprecated; while it continues to work as-is, support for it will be removed in the next release. Use the new inline import and export pipelines instead. They will return as more generally applicable node ingress and egress pipelines in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3008"}),"#3008")))),(0,a.yg)("h3",m({},{id:"changes-39"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now comes with a role definition for Ansible. You can find it directly in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ansible")," subdirectory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2604"}),"#2604"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST now requires CAF 0.18.7. VAST supports setting advanced options for CAF directly in its configuration file under the ",(0,a.yg)("inlineCode",{parentName:"p"},"caf")," section. If you were using any of these, compare them against the bundled ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml.example")," file to see if you need to make any changes. The change has (mostly positive) ",(0,a.yg)("a",m({parentName:"p"},{href:"https://www.actor-framework.org/blog/2021-01/benchmarking-0.18/"}),"performance and stability implications")," throughout VAST, especially in high-load scenarios.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2693"}),"#2693"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2923"}),"#2923"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"OpenSSL is now a required dependency.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2719"}),"#2719"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," no longer shows type registry-related information. Instead, refer to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast show")," for detailed type metadata information.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2745"}),"#2745"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Blocking imports now imply that ingested data gets persisted to disk before the the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," process exits.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2807"}),"#2807"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2848"}),"#2848"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugin names are now case-insensitive.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2832"}),"#2832"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The per-schema event distribution moved from ",(0,a.yg)("inlineCode",{parentName:"p"},"index.statistics.layouts")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.schemas"),", and additionally includes information about the import time range and the number of partitions VAST knows for the schema. The number of events per schema no longer includes events that are yet unpersisted.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2852"}),"#2852"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The bundled Zeek schema no longer includes the ",(0,a.yg)("inlineCode",{parentName:"p"},"_path")," field included in Zeek JSON. Use ",(0,a.yg)("inlineCode",{parentName:"p"},'#type == "zeek.foo"')," over ",(0,a.yg)("inlineCode",{parentName:"p"},'_path == "foo"')," for querying data ingested using ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import zeek-json"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2887"}),"#2887"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the frontend prototype bundled with the web plugin Some parts of the frontend that we have in development are designed to be closed-source, and it is easier to develop at the current development stage in a single repository that is not bound to the release process of VAST itself. An open-source version of the frontend may return in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2922"}),"#2922"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2927"}),"#2927")))),(0,a.yg)("h3",m({},{id:"features-54"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"cef")," import format allows for reading events in the Common Event Format (CEF) via ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import cef < cef.log"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2216"}),"#2216"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST installations and packages now include Python bindings in a site-package under ",(0,a.yg)("inlineCode",{parentName:"p"},"<install-prefix>/lib/python*/site-packages/vast"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2636"}),"#2636"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now imports Arrow IPC data, which is the same format it already supports for export.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2707"}),"#2707"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"pseudonymize")," pipeline operator pseudonymizes IP addresses in user-specified fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2719"}),"#2719"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now offer a ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/vast-slim")," image as an alternative to the ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/vast")," image. The image is minimal in size and supports the same features as the regular image, but does not support building additional plugins against it and mounting in additional plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2742"}),"#2742"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"/query")," endpoint for the experimental REST API allows users to receive query data in multiple steps, as opposed to a oneshot export.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2766"}),"#2766"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries of the forms ",(0,a.yg)("inlineCode",{parentName:"p"},":string == /pattern/"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"field == /pattern/"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"#type == /pattern/"),", and their respective negations now work as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2769"}),"#2769"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"/export")," family of endpoints now accepts an optional ",(0,a.yg)("inlineCode",{parentName:"p"},"pipeline")," parameter to specify an ad-hoc pipeline that should be applied to the exported data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2773"}),"#2773"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We changed VAST client processes to attempt connecting to a VAST server multiple times until the configured connection timeout (",(0,a.yg)("inlineCode",{parentName:"p"},"vast.connection-timeout"),", defaults to 5 minutes) runs out. A fixed delay between connection attempts (",(0,a.yg)("inlineCode",{parentName:"p"},"vast.connection-retry-delay"),", defaults to 3 seconds) ensures that clients to not stress the server too much. Set the connection timeout to zero to let VAST client attempt connecting indefinitely, and the delay to zero to disable the retry mechanism.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2835"}),"#2835"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON export format gained the options ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-empty-records"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-empty-lists"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-empty-maps"),", which cause empty records, lists, and maps not to be rendered respectively. The options may be combined together with the existing ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-nulls")," option. Use ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-empty")," to set all four flags at once.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2856"}),"#2856"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," commands now support an optional pipeline string that allows for chaining pipeline operators together and executing such a pipeline on outgoing and incoming data. This feature is experimental and the syntax is subject to change without notice. New operators are only available in the new pipeline syntax, and the old YAML syntax is deprecated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2877"}),"#2877"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2904"}),"#2904"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2907"}),"#2907"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"head")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"taste")," operators limit results to the specified number of events. The ",(0,a.yg)("inlineCode",{parentName:"p"},"head")," operator applies this limit for all events, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"taste")," operator applies it per schema. Both operators take the limit as an optional argument, with the default value being 10.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2891"}),"#2891"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The experimental web frontend now correctly responds to CORS preflight requests. To configure CORS behavior, the new ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.web.cors-allowed-origin")," config option can be used.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2944"}),"#2944"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Patterns now support case insensitivity by adding ",(0,a.yg)("inlineCode",{parentName:"p"},"i")," to the pattern string, e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},"/^\\w{3}$/i"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2951"}),"#2951"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," plugin now treats Sigma strings as case-insensitive patterns during the transpilation process.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2974"}),"#2974"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The experimental web plugin now serves its own API specification at the new '/openapi.json' endpoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2981"}),"#2981"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Extractors such as ",(0,a.yg)("inlineCode",{parentName:"p"},"x")," and ",(0,a.yg)("inlineCode",{parentName:"p"},":T")," can now expand to the predicates ",(0,a.yg)("inlineCode",{parentName:"p"},"x != null")," and ",(0,a.yg)("inlineCode",{parentName:"p"},":T != null"),", respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2984"}),"#2984")))),(0,a.yg)("h3",m({},{id:"bug-fixes-81"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Attempting to connect with thousands of clients around the same time sometimes crashed the VAST server. This no longer occurs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2693"}),"#2693"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"extend")," pipeline operators wrongly inferred IP address, subnet, pattern, and map values as strings. They are now inferred correctly. To force a value to be inferred as a string, wrap it inside double quotes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2768"}),"#2768"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now shuts down instantly when metrics are enabled instead of being held alive for up to the duration of the telemetry interval (10 seconds).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2832"}),"#2832"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The web plugin now reacts correctly to CTRL-C by stopping itself.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2860"}),"#2860"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer ignores existing PID lock files on Linux.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2861"}),"#2861"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The start commands specified with the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.start.commands")," option are now run aynchronously. This means that commands that block indefinitely will no longer prevent execution of subsequent commands, and allow for correct signal handling.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2868"}),"#2868"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Zeek TSV reader now respects the schema files in the bundled ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.schema")," file, and produces data of the same schema as the Zeek JSON reader. E.g., instead of producing a top-level ip field ",(0,a.yg)("inlineCode",{parentName:"p"},"id.orig_h"),", the reader now produces a top-level record field ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," that contains the ip field ",(0,a.yg)("inlineCode",{parentName:"p"},"orig_h"),", effectively unflattening the data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2887"}),"#2887"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Pipelines that reduce the number of events do not prevent ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export")," processes that have a ",(0,a.yg)("inlineCode",{parentName:"p"},"max-events")," limit from terminating any more.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2896"}),"#2896"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed incorrect printing of human-readable durations in some edge cases. E.g., the value 1.999s was rendered as 1.1s instead of the expected 2.0s. This bug affected the JSON and CSV export formats, and all durations printed in log messages or the status command.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2906"}),"#2906"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Options passed in the ",(0,a.yg)("inlineCode",{parentName:"p"},"caf.openssl")," section in the configuration file or as ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_CAF__OPENSSL__*")," environment variables are no longer ignored.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2908"}),"#2908"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The VAST client will now terminate properly when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," command with a query which delivers zero results.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2924"}),"#2924"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when it encounters an invalid type expression in a schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2977"}),"#2977"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Compaction now retries immediately on failure instead of waiting for the configured scan interval to expire again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3006"}),"#3006")))),(0,a.yg)("h2",m({},{id:"v242"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.4.2"}),"v2.4.2")),(0,a.yg)("h3",m({},{id:"changes-40"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST's rebuilding and compaction features now interfere less with queries.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/3047"}),"#3047"))),(0,a.yg)("h2",m({},{id:"v241"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.4.1"}),"v2.4.1")),(0,a.yg)("h3",m({},{id:"features-55"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST's Feather store now yields initial results much faster and performs better when running queries affecting a large number of partitions by doing smaller incremental disk reads as needed rather than one large disk read upfront.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/2805"}),"#2805"))),(0,a.yg)("h2",m({},{id:"v240"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.4.0"}),"v2.4.0")),(0,a.yg)("h3",m({},{id:"changes-41"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now emits per-component memory usage metrics under the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"index.memory-usage")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.memory-usage"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2471"}),"#2471"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We changed the default VAST endpoint from ",(0,a.yg)("inlineCode",{parentName:"p"},"localhost")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"127.0.0.1"),". This ensures the listening address is deterministic and not dependent on the host-specific IPv4 and IPv6 resolution. For example, resolving ",(0,a.yg)("inlineCode",{parentName:"p"},"localhost")," yields a list of addresses, and if VAST fails to bind on the first (e.g., to due to a lingering socket) it would silently go to the next. Taking name resolution out of the equation fixes such issues. Set the option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.endpoint")," to override the default endpoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2512"}),"#2512"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST from source now requires CMake 3.19 or greater.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2582"}),"#2582"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default store backend of VAST is now ",(0,a.yg)("inlineCode",{parentName:"p"},"feather"),". Reading from VAST's custom ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," backend is still transparently supported, but new partitions automatically write to the Apache Feather V2 backend instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2587"}),"#2587"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed PyVAST from the code base in favor of the new Python bindings. PyVAST continues to work as a thin wrapper around the VAST binary, but will no longer be released alongside VAST.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2674"}),"#2674"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST from source now requires ",(0,a.yg)("a",m({parentName:"p"},{href:"https://arrow.apache.org/blog/2022/10/31/10.0.0-release/"}),"Apache Arrow 10.0")," or newer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2685"}),"#2685"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast dump")," command is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"vast show"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2686"}),"#2686"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now loads all plugins by default. To revert to the old behavior, explicitly set the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," option to have no value.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2689"}),"#2689")))),(0,a.yg)("h3",m({},{id:"features-56"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We now distribute VAST also as Debian Package with every new release. The Debian package automatically installs a systemd service and creates a ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," user for the VAST process.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2513"}),"#2513"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2738"}),"#2738"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST Cloud has now a MISP plugin that enables to add a MISP instance to the cloud stack.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2548"}),"#2548"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new experimental web plugin offers a RESTful API to VAST and a bundled web user interface in Svelte.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2567"}),"#2567"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2614"}),"#2614"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2638"}),"#2638"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/3681"}),"#3681"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now emits metrics for filesystem access under the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"posix-filesystem.{checks,writes,reads,mmaps,erases,moves}.{successful,failed,bytes}"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2572"}),"#2572"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships a Docker Compose file. In particular, the Docker Compose stack now has a TheHive integration that can run VAST queries as a Cortex Analyzer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2574"}),"#2574"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2652"}),"#2652"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST Cloud can now expose HTTP services using Cloudflare Access.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2578"}),"#2578"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Rebuilding partitions now additionally rebatches the contained events to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.import.batch-size")," events per batch, which accelerates queries against partitions that previously had undersized batches.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2583"}),"#2583"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has a new configuration setting, ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.zstd-compression-level"),", to control the compression level of the Zstd algorithm used in both the Feather and Parquet store backends. The default level is set by the Apache Arrow library, and for Parquet is no longer explicitly defaulted to ",(0,a.yg)("inlineCode",{parentName:"p"},"9"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2623"}),"#2623"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has three new metrics: ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.num-partitions-total"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.num-events-total"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest-total")," that sum up all schema-based metrics by their respective schema-based metric counterparts.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2682"}),"#2682"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries without acceleration from a dense index run significantly faster, e.g., initial tests show a 2x performance improvement for substring queries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2730"}),"#2730")))),(0,a.yg)("h3",m({},{id:"bug-fixes-82"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now skips unreadable partitions while starting up, instead of aborting the initialization routine.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2515"}),"#2515"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Rebuilding of heterogeneous partition no longer freezes the entire rebuilder on pipeline failures.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2530"}),"#2530"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer attempts to hard-kill itself if the shutdown did not finish within the configured grace period. The option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.shutdown-grace-period")," no longer exists. We recommend setting ",(0,a.yg)("inlineCode",{parentName:"p"},"TimeoutStopSec=180")," in the VAST systemd service definition to restore the previous behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2568"}),"#2568"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The error message on connection failure now contains a correctly formatted target endpoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2609"}),"#2609"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The UDS metrics sink no longer deadlocks due to suspended listeners.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2635"}),"#2635"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ejects partitions from the LRU cache if they fail to load with an I/O error.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2642"}),"#2642"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The systemd service no longer fails if the home directory of the vast user is not in ",(0,a.yg)("inlineCode",{parentName:"p"},"/var/lib/vast"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2734"}),"#2734")))),(0,a.yg)("h2",m({},{id:"v231"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.3.1"}),"v2.3.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-83"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an indefinite hang that occurred when attempting to apply a pipeline to a partition that is not a valid flatbuffer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2624"}),"#2624"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now properly regenerates any corrupted, oversized partitions it encounters during startup, provided that the corresponding store files are available. These files could be produced by versions up to and including VAST v2.2, when using configurations with an increased maximum partition size.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2631"}),"#2631")))),(0,a.yg)("h2",m({},{id:"v230"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.3.0"}),"v2.3.0")),(0,a.yg)("h3",m({},{id:"changes-42"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We improved the operability of VAST servers under high load from automated low-priority queries. VAST now considers queries issued with ",(0,a.yg)("inlineCode",{parentName:"p"},"--low-priority"),", such as automated retro-match queries, with even less priority compared to regular queries (down from 33.3% to 4%) and internal high-priority queries used for rebuilding and compaction (down from 12.5% to 1%).\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2484"}),"#2484"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default value for ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.active-partition-timeout")," is now 5 minutes (down from 1 hour), causing VAST to persist underful partitions earlier.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2493"}),"#2493"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We split the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast rebuild")," command into two: ",(0,a.yg)("inlineCode",{parentName:"p"},"vast rebuild start")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast rebuild stop"),". Rebuild orchestration now runs server-side, and only a single rebuild may run at a given time. We also made it more intuitive to use: ",(0,a.yg)("inlineCode",{parentName:"p"},"--undersized")," now implies ",(0,a.yg)("inlineCode",{parentName:"p"},"--all"),", and a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--detached")," option allows for running rebuilds in the background.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2493"}),"#2493")))),(0,a.yg)("h3",m({},{id:"features-57"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST's partition indexes are now optional, allowing operators to control the trade-off between disk-usage and query performance for every field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2430"}),"#2430"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We can now use matchers in AWS using the vast-cloud CLI matcher plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2473"}),"#2473"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now continuously rebuilds outdated and merges undersized partitions in the background. The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.automatic-rebuild")," controls how many resources to spend on this. To disable this behavior, set the option to 0; the default is 1.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2493"}),"#2493"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Rebuilding now emits metrics under the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuilder.partitions.{remaining,rebuilding,completed}"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status rebuild")," command additionally shows information about the ongoing rebuild.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2493"}),"#2493"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.connection-timeout")," option allows for configuring the timeout VAST clients use when connecting to a VAST server. The value defaults to 10s; setting it to a zero duration causes produces an infinite timeout.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2499"}),"#2499")))),(0,a.yg)("h3",m({},{id:"bug-fixes-84"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST properly processes queries for fields with ",(0,a.yg)("inlineCode",{parentName:"p"},"skip")," attribute.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2430"}),"#2430"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST can now store data in segments bigger than 2GiB in size each.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2449"}),"#2449"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST can now store column indexes that are bigger than 2GiB.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2449"}),"#2449"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer occasionally prints warnings about no longer available partitions when queries run concurrently to imports.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2500"}),"#2500"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Configuration options representing durations with an associated command-line option like ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.connection-timeout")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--connection-timeout")," were not picked up from configuration files or environment variables. This now works as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2503"}),"#2503"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Partitions now fail early when their stores fail to load from disk, detailing what went wrong in an error message.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2507"}),"#2507"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We changed the way ",(0,a.yg)("inlineCode",{parentName:"p"},"vast-cloud")," is loading its cloud plugins to make it more explicit. This avoids inconsitent defaults assigned to variables when using core commands on specific plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2510"}),"#2510"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuild")," command, automatic rebuilds, and compaction are now much faster, and match the performance of the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command for building indexes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2515"}),"#2515"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a race condition where the output of a partition transform could be reused before it was fully written to disk, for example when running ",(0,a.yg)("inlineCode",{parentName:"p"},"vast rebuild"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2543"}),"#2543")))),(0,a.yg)("h2",m({},{id:"v220"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.2.0"}),"v2.2.0")),(0,a.yg)("h3",m({},{id:"changes-43"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Metrics for VAST's store lookups now use the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"{active,passive}-store.lookup.{runtime,hits}"),". The store type metadata field now distinguishes between the various supported store types, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"parquet"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"feather"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store"),", rather than containing ",(0,a.yg)("inlineCode",{parentName:"p"},"active")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"passive"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2413"}),"#2413"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," pipeline operator is now a builtin; the previously bundled ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," plugin no longer exists. Aggregation functions in the ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator are now plugins, which makes them easily extensible. The syntax of ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," now supports specification of output field names, similar to SQL's ",(0,a.yg)("inlineCode",{parentName:"p"},"AS")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"SELECT f(x) AS name"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2417"}),"#2417"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The undocumented ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," pipeline operator no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2417"}),"#2417"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"put")," pipeline operator is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"select"),", as we've abandoned plans to integrate the functionality of ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," into it.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2423"}),"#2423"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," pipeline operator now supports multiple replacements in one configuration, which aligns the behavior with other operators.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2423"}),"#2423"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Transforms are now called pipelines. In your configuration, replace ",(0,a.yg)("inlineCode",{parentName:"p"},"transform")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"pipeline")," in all keys.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2429"}),"#2429"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"An ",(0,a.yg)("inlineCode",{parentName:"p"},"init")," command was added to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast-cloud")," to help getting out of inconsistent Terraform states.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2435"}),"#2435")))),(0,a.yg)("h3",m({},{id:"features-58"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"flush")," command causes VAST to decommission all currently active partitions, i.e., write all active partitions to disk immediately regardless of their size or the active partition timeout. This is particularly useful for testing, or when needing to guarantee in automated scripts that input is available for operations that only work on persisted passive partitions. The ",(0,a.yg)("inlineCode",{parentName:"p"},"flush")," command returns only after all active partitions were flushed to disk.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2396"}),"#2396"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize")," operator supports three new aggregation functions: ",(0,a.yg)("inlineCode",{parentName:"p"},"sample")," takes the first value in every group, ",(0,a.yg)("inlineCode",{parentName:"p"},"distinct")," filters out duplicate values, and ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," yields the number of values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2417"}),"#2417"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"drop")," pipeline operator now drops entire schemas spcefied by name in the ",(0,a.yg)("inlineCode",{parentName:"p"},"schemas")," configuration key in addition to dropping fields by extractors in the ",(0,a.yg)("inlineCode",{parentName:"p"},"fields")," configuration key.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2419"}),"#2419"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"extend")," pipeline operator allows for adding new fields with fixed values to data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2423"}),"#2423"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The cloud execution commands (",(0,a.yg)("inlineCode",{parentName:"p"},"run-lambda")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"execute-command"),") now accept scripts from file-like handles. To improve the usability of this feature, the whole host file system is now mounted into the CLI container.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2446"}),"#2446")))),(0,a.yg)("h3",m({},{id:"bug-fixes-85"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST will export ",(0,a.yg)("inlineCode",{parentName:"p"},"real")," values in JSON consistently with at least one decimal place.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2393"}),"#2393"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST is now able to detect corrupt index files and will attempt to repair them on startup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2431"}),"#2431"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON export with ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-nulls")," now correctly handles nested records whose first field is ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," instead of dropping them entirely.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2447"}),"#2447"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a race condition when VAST crashed while applying a partition transform, leading to data duplication.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2465"}),"#2465"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The rebuild command no longer crashes on failure, and displays the encountered error instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2466"}),"#2466"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Missing arguments for the ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugins"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugin-dirs"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema-dirs")," command line options no longer cause VAST to crash occasionally.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2470"}),"#2470")))),(0,a.yg)("h2",m({},{id:"v210"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.1.0"}),"v2.1.0")),(0,a.yg)("h3",m({},{id:"changes-44"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"mdx-regenerate")," tool is no longer part of VAST binary releases.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2260"}),"#2260"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Partition transforms now always emit homogenous partitions, i.e., one schema per partition. This makes compaction and aging more efficient.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2277"}),"#2277"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now requires Arrow >= v8.0.0.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2284"}),"#2284"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.store-backend")," configuration option no longer supports ",(0,a.yg)("inlineCode",{parentName:"p"},"archive"),", and instead always uses the superior ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," instead. Events stored in the archive will continue to be available in queries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2290"}),"#2290"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.use-legacy-query-scheduler")," option is now ignored because the legacy query scheduler has been removed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2312"}),"#2312"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST will from now on always format ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"timestamp")," values with six decimal places (microsecond precision). The old behavior used a precision that depended on the actual value. This may require action for downstream tooling like metrics collectors that expect nanosecond granularity.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2380"}),"#2380")))),(0,a.yg)("h3",m({},{id:"features-59"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," tool can now print contents of individual ",(0,a.yg)("inlineCode",{parentName:"p"},".mdx")," files. It now has an option to print raw Bloom filter contents of string and IP address synopses.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2260"}),"#2260"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"mdx-regenerate")," tool was renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast-regenerate")," and can now also regenerate an index file from a list of partition UUIDs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2260"}),"#2260"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now compresses data with Zstd. When persisting data to the segment store, the default configuration achieves over 2x space savings. When transferring data between client and server processes, compression reduces the amount of transferred data by up to 5x. This allowed us to increase the default partition size from 1,048,576 to 4,194,304 events, and the default number of events in a single batch from 1,024 to 65,536. The performance increase comes at the cost of a ~20% memory footprint increase at peak load. Use the option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.max-partition-size")," to tune this space-time tradeoff.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2268"}),"#2268"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now produces additional metrics under the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest.events"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest.duration")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest.rate"),". Each of those gets issued once for every schema that VAST ingested during the measurement period. Use the ",(0,a.yg)("inlineCode",{parentName:"p"},"metadata_schema")," key to disambiguate the metrics.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2274"}),"#2274"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new parquet store plugin allows VAST to store its data as parquet files, increasing storage efficiency at the expense of higher deserialization costs. Storage requirements for the VAST database is reduced by another 15-20% compared to the existing segment store with Zstd compression enabled. CPU usage for suricata import is up ~ 10%,  mostly related to the more expensive serialization. Deserialization (reading) of a partition is significantly more expensive, increasing CPU utilization by about 100%, and should be carefully considered and compared to the potential reduction in storage cost and I/O operations.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2284"}),"#2284"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," command now supports filtering by component name. E.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status importer index")," only shows the status of the importer and index components.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2288"}),"#2288"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST emits the new metric ",(0,a.yg)("inlineCode",{parentName:"p"},"partition.events-written")," when writing a partition to disk. The metric's value is the number of events written, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"metadata_schema")," field contains the name of the partition's schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2302"}),"#2302"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"rebuild")," command rebuilds old partitions to take advantage of improvements in newer VAST versions. Rebuilding takes place in the VAST server in the background. This process merges partitions up to the configured ",(0,a.yg)("inlineCode",{parentName:"p"},"max-partition-size"),", turns VAST v1.x's heterogeneous into VAST v2.x's homogenous partitions, migrates all data to the currently configured ",(0,a.yg)("inlineCode",{parentName:"p"},"store-backend"),", and upgrades to the most recent internal batch encoding and indexes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2321"}),"#2321"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"PyVAST now supports running client commands for VAST servers running in a container environment, if no local VAST binary is available. Specify the ",(0,a.yg)("inlineCode",{parentName:"p"},"container")," keyword to customize this behavior. It defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},'{"runtime": "docker", "name": "vast"}'),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2334"}),"#2334"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/KaanSK"}),"@KaanSK"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"csv")," import gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--seperator='x'")," option that defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"','"),". Set it to ",(0,a.yg)("inlineCode",{parentName:"p"},"'\\t'")," to import tab-separated values, or ",(0,a.yg)("inlineCode",{parentName:"p"},"' '")," to import space-separated values.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2336"}),"#2336"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now compresses on-disk indexes with Zstd, resulting in a 50-80% size reduction depending on the type of indexes used, and reducing the overall index size to below the raw data size. This improves retention spans significantly. For example, using the default configuration, the indexes for ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.ftp")," events now use 75% less disk space, and ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.flow")," 30% less.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2346"}),"#2346"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index statistics in ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed")," now show the event distribution per schema as a percentage of the total number of events in addition to the per-schema number, e.g., for ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.flow")," events under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"index.statistics.layouts.suricata.flow.percentage"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2351"}),"#2351"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed")," now shows metadata from all partitions under the key ",(0,a.yg)("inlineCode",{parentName:"p"},".catalog.partitions"),". Additionally, the catalog emits metrics under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.num-events")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog.num-partitions")," containing the number of events and partitions respectively. The metrics contain the schema name in the field ",(0,a.yg)("inlineCode",{parentName:"p"},"metadata_schema")," and the (internal) partition version in the field ",(0,a.yg)("inlineCode",{parentName:"p"},"metadata_partition-version"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2360"}),"#2360"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2363"}),"#2363"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The VAST Cloud CLI can now authenticate to the Tenzir private registry and download the vast-pro image (including plugins such as Matcher). The deployment script can now be configured to use a specific image and can thus be set to use vast-pro.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2415"}),"#2415")))),(0,a.yg)("h3",m({},{id:"bug-fixes-86"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when importing ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"pattern")," data annotated with the ",(0,a.yg)("inlineCode",{parentName:"p"},"#skip")," attribute.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2286"}),"#2286"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The command-line options ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugins"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugin-dirs"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema-dirs")," now correctly overwrite their corresponding configuration options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2289"}),"#2289"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when a query arrives at a newly created active partition in the time window between the partition creation and the first event arriving at the partition.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2295"}),"#2295"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Setting the environment variable ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENDPOINT")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"host:port")," pair no longer fails on startup with a parse error.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2305"}),"#2305"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer hangs when it is shut down while still importing events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2324"}),"#2324"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now reads the default false-positive rate for sketches correctly. This broke accidentally with the v2.0 release. The option moved from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.catalog-fp-rate")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.index.default-fp-rate"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2325"}),"#2325"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The parser for ",(0,a.yg)("inlineCode",{parentName:"p"},"real")," values now understands scientific notation, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"1.23e+42"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2332"}),"#2332"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"csv")," import no longer crashes when the CSV file contains columns not present in the selected schema. Instead, it imports these columns as strings.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2336"}),"#2336"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"vast export csv")," now renders enum columns in their string representation instead of their internal numerical representation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2336"}),"#2336"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON import now treats ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"duration")," fields correctly for JSON strings containing a number, i.e., the JSON string ",(0,a.yg)("inlineCode",{parentName:"p"},'"1654735756"')," now behaves just like the JSON number ",(0,a.yg)("inlineCode",{parentName:"p"},"1654735756")," and for a ",(0,a.yg)("inlineCode",{parentName:"p"},"time")," field results in the value ",(0,a.yg)("inlineCode",{parentName:"p"},"2022-06-09T00:49:16.000Z"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2340"}),"#2340"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST will no longer terminate when it can't write any more data to disk. Incoming data will still be accepted but discarded. We encourage all users to enable the disk-monitor or compaction features as a proper solution to this problem.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2376"}),"#2376"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer ignores environment variables for plugin-specific options. E.g., the environment variable ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_PLUGINS__FOO__BAR")," now correctly refers to the ",(0,a.yg)("inlineCode",{parentName:"p"},"bar")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," plugin, i.e., ",(0,a.yg)("inlineCode",{parentName:"p"},"plugins.foo.bar"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2390"}),"#2390"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We improved the mechanism to recover the database state after an unclean shutdown.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2394"}),"#2394")))),(0,a.yg)("h2",m({},{id:"v200"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v2.0.0"}),"v2.0.0")),(0,a.yg)("h3",m({},{id:"breaking-changes-2"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We removed the experimental ",(0,a.yg)("inlineCode",{parentName:"p"},"vast get")," command. It relied on an internal unique event ID that was only exposed to the user in debug messages. This removal is a preparatory step towards a simplification of some of the internal workings of VAST.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2121"}),"#2121"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"meta-index")," is now called the ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog"),". This affects multiple metrics and entries in the output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status"),", and the configuration option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.meta-index-fp-rate"),", which is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.catalog-fp-rate"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2128"}),"#2128"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The command line option ",(0,a.yg)("inlineCode",{parentName:"p"},"--verbosity")," has the new name ",(0,a.yg)("inlineCode",{parentName:"p"},"--console-verbosity"),". This synchronizes the CLI interface with the configuration file that solely understands the option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.console-verbosity"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2178"}),"#2178"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Multiple transform steps now have new names: ",(0,a.yg)("inlineCode",{parentName:"p"},"select")," is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"where"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"delete")," is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"drop"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"project")," is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"put"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"aggregate")," is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"summarize"),". This breaking change is in preparation for an upcoming feature that improves the capability of VAST's query language.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2228"}),"#2228"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"layout-names")," option of the ",(0,a.yg)("inlineCode",{parentName:"p"},"rename")," transform step was renamed ",(0,a.yg)("inlineCode",{parentName:"p"},"schemas"),". The step now additonally supports renaming ",(0,a.yg)("inlineCode",{parentName:"p"},"fields"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2228"}),"#2228")))),(0,a.yg)("h3",m({},{id:"changes-45"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST ships experimental Terraform scripts to deploy on AWS Lambda and Fargate.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2108"}),"#2108"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We revised the query scheduling logic to exploit synergies when multiple queries run at the same time. In that vein, we updated the related metrics with more accurate names to reflect the new mechanism. The new keys ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.materializations"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.scheduled"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.lookups")," provide periodic counts of partitions loaded from disk and scheduled for lookup, and the overall number of queries issued to partitions, respectively. The keys ",(0,a.yg)("inlineCode",{parentName:"p"},"query.workers.idle"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"query.workers.busy")," were renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.remaining-capacity"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.current-lookups"),". Finally, the key ",(0,a.yg)("inlineCode",{parentName:"p"},"scheduler.partition.pending")," counts the number of currently pending partitions. It is still possible to opt-out of the new scheduling algorithm with the (deprecated) option ",(0,a.yg)("inlineCode",{parentName:"p"},"--use-legacy-query-scheduler"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2117"}),"#2117"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now requires Apache Arrow >= v7.0.0.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2122"}),"#2122"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST's internal data model now completely preserves the nesting of the stored data when using the ",(0,a.yg)("inlineCode",{parentName:"p"},"arrow")," encoding, and maps the pattern, address, subnet, and enumeration types onto Arrow extension types rather than using the underlying representation directly. This change enables use of the ",(0,a.yg)("inlineCode",{parentName:"p"},"export arrow")," command without needing information about VAST's type system.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2159"}),"#2159"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Transform steps that add or modify columns now transform the columns in-place rather than at the end, preserving the nesting structure of the original data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2159"}),"#2159"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"msgpack")," encoding no longer exists. Data imported using the ",(0,a.yg)("inlineCode",{parentName:"p"},"msgpack")," encoding can still be accessed, but new data will always use the ",(0,a.yg)("inlineCode",{parentName:"p"},"arrow")," encoding.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2159"}),"#2159"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Client commands such as ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," now create less threads at runtime, reducing the risk of hitting system resource limits.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2193"}),"#2193"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," section in the status output no longer contains the ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog-bytes")," keys. The information is already present in the top-level ",(0,a.yg)("inlineCode",{parentName:"p"},"catalog")," section.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2233"}),"#2233")))),(0,a.yg)("h3",m({},{id:"features-60"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.index")," section in the configuration supports adjusting the false-positive rate of first-stage lookups for individual fields, allowing users to optimize the time/space trade-off for expensive queries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2065"}),"#2065"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now creates one active partition per layout, rather than having a single active partition for all layouts.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2096"}),"#2096"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.active-partition-timeout")," controls the time after which an active partition is flushed to disk. The timeout may hit before the partition size reaches ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.max-partition-size"),", allowing for an additional temporal control for data freshness. The active partition timeout defaults to 1 hour.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2096"}),"#2096"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," now displays the total number of events stored under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"index.statistics.events.total"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2133"}),"#2133"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk monitor has new status entries ",(0,a.yg)("inlineCode",{parentName:"p"},"blacklist")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"blacklist   - size")," containing information about partitions failed to be erased.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2160"}),"#2160"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has now complete support for passing environment variables as alternate path to configuration files. Environment variables have ",(0,a.yg)("em",{parentName:"p"},"lower")," precedence than CLI arguments and ",(0,a.yg)("em",{parentName:"p"},"higher")," precedence than config files. Variable names of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_FOO__BAR_BAZ")," map to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.foo.bar-baz"),", i.e., ",(0,a.yg)("inlineCode",{parentName:"p"},"__")," is a record separator and ",(0,a.yg)("inlineCode",{parentName:"p"},"_")," translates to ",(0,a.yg)("inlineCode",{parentName:"p"},"-"),". This does not apply to the prefix ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_"),", which is considered the application identifier. Only variables with non-empty values are considered.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2162"}),"#2162"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST v1.0 deprecated the experimental aging feature. Given popular demand we've decided to un-deprecate it, and to actually implement it on top of the same building blocks the compaction mechanism uses. This means that it is now fully working and no longer considered experimental.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2186"}),"#2186"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"replace")," transform step now allows for setting values of complex types, e.g., lists or records.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2228"}),"#2228"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," tool now prints the whole store contents when given a store file as an argument.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2247"}),"#2247")))),(0,a.yg)("h3",m({},{id:"bug-fixes-87"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"explore")," command now properly terminates after the requested number of results are delivered.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2120"}),"#2120"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"count --estimate")," erroneously materialized store files from disk, resulting in an unneeded performance penalty. VAST now answers approximate count queries by solely consulting the relevant index files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2146"}),"#2146"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import zeek")," command now correctly marks the event timestamp using the ",(0,a.yg)("inlineCode",{parentName:"p"},"timestamp")," type alias for all inferred schemas.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2155"}),"#2155"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some queries could get stuck when an importer would time out during the meta index lookup. This race condition no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2167"}),"#2167"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We optimized the queue size of the logger for commands other than ",(0,a.yg)("inlineCode",{parentName:"p"},"vast start"),". Client commands now show a significant reduction in memory usage and startup time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2176"}),"#2176"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CSV parser no longer fails when encountering integers when floating point values were expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2184"}),"#2184"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast(1)")," man-page is no longer empty for VAST distributions with static binaries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2190"}),"#2190"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST servers no longer accept queries after initiating shutdown. This fixes a potential infinite hang if new queries were coming in faster than VAST was able to process them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2215"}),"#2215"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer sometimes crashes when aging or compaction erase whole partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2227"}),"#2227"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Environment variables for options that specify lists now consistently use comma-separators and respect escaping with backslashes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2236"}),"#2236"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON import no longer rejects non-string selector fields. Instead, it always uses the textual JSON representation as a selector. E.g., the JSON object ",(0,a.yg)("inlineCode",{parentName:"p"},"{id:1,...}")," imported via ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import json --selector=id:mymodule")," now matches the schema named ",(0,a.yg)("inlineCode",{parentName:"p"},"mymodule.1")," rather than erroring because the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," field is not a string.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2255"}),"#2255"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Transform steps removing all nested fields from a record leaving only empty nested records no longer cause VAST to crash.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2258"}),"#2258"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query optimizer incorrectly transformed queries with conjunctions or disjunctions with several operands testing against the same string value, leading to missing result. This was rarely an issue in practice before the introduction of homogenous partitions with the v2.0 release.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2264"}),"#2264")))),(0,a.yg)("h2",m({},{id:"v112"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v1.1.2"}),"v1.1.2")),(0,a.yg)("h3",m({},{id:"bug-fixes-88"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Terminating or timing out exports during the catalog lookup no longer causes query workers to become stuck indefinitely.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/2165"}),"#2165"))),(0,a.yg)("h2",m({},{id:"v111"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v1.1.1"}),"v1.1.1")),(0,a.yg)("h3",m({},{id:"bug-fixes-89"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk monitor now correctly continues deleting until below the low water mark after a partition failed to delete.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2160"}),"#2160"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a rarely occurring race condition caused query workers to become stuck after delivering all results until the corresponding client process terminated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2160"}),"#2160"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries that timed out or were externally terminated while in the query backlog and with more than five unhandled candidate partitions no longer permanently get stuck.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2160"}),"#2160")))),(0,a.yg)("h2",m({},{id:"v110"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v1.1.0"}),"v1.1.0")),(0,a.yg)("h3",m({},{id:"changes-46"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer attempts to intepret query expressions as Sigma rules automatically. Instead, this functionality moved to a dedicated ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," query language plugin that must explicitly be enabled at build time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2074"}),"#2074"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"msgpack")," encoding option is now deprecated. VAST issues a warning on startup and automatically uses the ",(0,a.yg)("inlineCode",{parentName:"p"},"arrow")," encoding instead. A future version of VAST will remove this option entirely.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2087"}),"#2087"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The experimental aging feature is now deprecated. The ",(0,a.yg)("a",m({parentName:"p"},{href:"https://vast.io/docs/about/use-cases/data-aging"}),"compaction plugin")," offers a superset of the aging functionality.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2087"}),"#2087"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Actor names in log messages now have an ",(0,a.yg)("inlineCode",{parentName:"p"},"-ID")," suffix to make it easier to tell multiple instances of the same actor apart, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"exporter-42"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2119"}),"#2119"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed an issue where partition transforms that erase complete partitions trigger an internal assertion failure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2123"}),"#2123")))),(0,a.yg)("h3",m({},{id:"features-61"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The built-in ",(0,a.yg)("inlineCode",{parentName:"p"},"select")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"project")," transform steps now correctly handle dropping all rows and columns respectively, effectively deleting the input data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2064"}),"#2064"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2082"}),"#2082"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has a new ",(0,a.yg)("em",{parentName:"p"},"query language")," plugin type that allows for adding additional query language frontends. The plugin performs one function: compile user input into a VAST expression. The new ",(0,a.yg)("inlineCode",{parentName:"p"},"sigma")," plugin demonstrates usage of this plugin type.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2074"}),"#2074"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new built-in ",(0,a.yg)("inlineCode",{parentName:"p"},"rename")," transform step allows for renaming event types during a transformation. This is useful when you want to ensure that a repeatedly triggered transformation does not affect already transformed events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2076"}),"#2076"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"aggregate")," transform plugin allows for flexibly grouping and aggregating events. We recommend using it alongside the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://vast.io/docs/about/use-cases/data-aging"}),(0,a.yg)("inlineCode",{parentName:"a"},"compaction")," plugin"),", e.g., for rolling up events into a more space-efficient representation after a certain amount of time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2076"}),"#2076")))),(0,a.yg)("h3",m({},{id:"bug-fixes-90"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A performance bug in the first stage of query evaluation caused VAST to return too many candidate partitions when querying for a field suffix. For example, a query for the ",(0,a.yg)("inlineCode",{parentName:"p"},"ts")," field commonly used in Zeek logs also included partitions for ",(0,a.yg)("inlineCode",{parentName:"p"},"netflow.pkts")," from ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.netflow")," events. This bug no longer exists, resulting in a considerable speedup of affected queries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2086"}),"#2086"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST does not lose query capacity when backlogged queries are cancelled any more.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2092"}),"#2092"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now correctly adjusts the index statistics when applying partition transforms.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2097"}),"#2097"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a bug that potentially resulted in the wrong subset of partitions to be considered during query evaluation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2103"}),"#2103")))),(0,a.yg)("h2",m({},{id:"v100"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/v1.0.0"}),"v1.0.0")),(0,a.yg)("h3",m({},{id:"changes-47"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST now requires Arrow >= 6.0.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2033"}),"#2033"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer uses calendar-based versioning. Instead, it uses a semantic versioning scheme. A new VERSIONING.md document installed alongside VAST explores the semantics in-depth.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2035"}),"#2035"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins now have a separate version. The build scaffolding installs README.md and CHANGELOG.md files in the plugin source tree root automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2035"}),"#2035")))),(0,a.yg)("h3",m({},{id:"features-62"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has a new transform step: ",(0,a.yg)("inlineCode",{parentName:"p"},"project"),", which keeps the fields with configured key suffixes and removes the rest from the input. At the same time, the ",(0,a.yg)("inlineCode",{parentName:"p"},"delete")," transform step can remove not only one but multiple fields from the input based on the configured key suffixes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2000"}),"#2000"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"--omit-nulls")," option to the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export json")," command causes VAST to skip over fields in JSON objects whose value is ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," when rendering them.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2004"}),"#2004"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has a new transform step: ",(0,a.yg)("inlineCode",{parentName:"p"},"select"),", which keeps rows matching the configured expression and removes the rest from the input.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2014"}),"#2014"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"#import_time")," meta extractor allows for querying events based on the time they arrived at the VAST server process. It may only be used for comparisons with ",(0,a.yg)("a",m({parentName:"p"},{href:"https://vast.io/docs/understand/query-language/expressions#values"}),"time value literals"),", e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export json '#import_time > 1 hour ago'")," exports all events that were imported within the last hour as NDJSON.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2019"}),"#2019")))),(0,a.yg)("h3",m({},{id:"bug-fixes-91"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index now emits the metrics ",(0,a.yg)("inlineCode",{parentName:"p"},"query.backlog.{low,normal}")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"query.workers.{idle,busy}")," reliably.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2032"}),"#2032"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer ignores the ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema-dirs")," option when using ",(0,a.yg)("inlineCode",{parentName:"p"},"--bare-mode"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2046"}),"#2046"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Starting VAST no longer fails if creating the database directory requires creating intermediate directories.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/2046"}),"#2046")))),(0,a.yg)("h2",m({},{id:"20211216"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.12.16"}),"2021.12.16")),(0,a.yg)("h3",m({},{id:"changes-48"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST's internal type system has a new on-disk data representation. While we still support reading older databases, reverting to an older version of VAST will not be possible after this change. Alongside this change, we've implemented numerous fixes and streamlined handling of field name lookups, which now more consistently handles the dot-separator. E.g., the query ",(0,a.yg)("inlineCode",{parentName:"li"},'#field == "ip"')," still matches the field ",(0,a.yg)("inlineCode",{parentName:"li"},"source.ip"),", but no longer the field ",(0,a.yg)("inlineCode",{parentName:"li"},"source_ip"),". The change is also performance-relevant in the long-term: For data persisted from previous versions of VAST we convert to the new type system on the fly, and for newly ingested data we now have near zero-cost deserialization for types, which should result in an overall speedup once the old data is rotated out by the disk monitor.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1888"}),"#1888"))),(0,a.yg)("h3",m({},{id:"features-63"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All metrics events now contain the version of VAST. Additionally, VAST now emits startup and shutdown metrics at the start and stop of the VAST server.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1973"}),"#1973"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"JSON field selectors are now configurable instead of being hard-coded for Suricata Eve JSON and Zeek Streaming JSON. E.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import json --selector=event_type:suricata")," is now equivalent to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import suricata"),". This allows for easier integration of JSONL data containing a field that indicates its type.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1974"}),"#1974"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Metrics events now optionally contain a metadata field that is a key-value mapping of string to string, allowing for finer-grained introspection. For now this enables correlation of metrics events and individual queries. A set of new metrics for query lookup use this feature to include the query ID.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1987"}),"#1987"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1992"}),"#1992")))),(0,a.yg)("h3",m({},{id:"bug-fixes-92"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The field-based default selector of the JSON import now correctly matches types with nested record types.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1988"}),"#1988"))),(0,a.yg)("h2",m({},{id:"20211118"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.11.18"}),"2021.11.18")),(0,a.yg)("h3",m({},{id:"changes-49"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"max-queries")," configuration option now works at a coarser granularity. It used to limit the number of queries that could simultaneously retrieve data, but it now sets the number of queries that can be processed at the same time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1896"}),"#1896"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer vendors ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/Cyan4973/xxHash"}),"xxHash"),", which is now a regular required dependency. Internally, VAST switched its default hash function to XXH3, providing a speedup of up to 3x.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1905"}),"#1905"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST from source now requires CMake 3.18+.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1914"}),"#1914"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A recently added features allows for exporting everything when no query is provided. We've restricted this to prefer reading a query from stdin if available. Additionally, conflicting ways to read the query now trigger errors.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1917"}),"#1917")))),(0,a.yg)("h3",m({},{id:"features-64"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new 'apply' handler in the index gives plugin authors the ability to apply transforms over entire partitions. Previously, transforms were limited to streams of table slice during import or export.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1887"}),"#1887"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The export command now has a ",(0,a.yg)("inlineCode",{parentName:"p"},"--low-priority")," option to reduce the priority of the request while query backlogs are being worked down.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1929"}),"#1929"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1947"}),"#1947"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The keys ",(0,a.yg)("inlineCode",{parentName:"p"},"query.backlog.normal")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"query.backlog.low")," have been added to the metrics output. The values indicate the number of quries that are currently in the backlog.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1942"}),"#1942")))),(0,a.yg)("h3",m({},{id:"bug-fixes-93"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The timeout duration to delete partitions has been increased to one minute, reducing the frequency of warnings for hitting this timeout significantly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1897"}),"#1897"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When reading IPv6 addresses from PCAP data, only the first 4 bytes have been considered. VAST now stores all 16 bytes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1905"}),"#1905"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Store files now get deleted correctly if the database directory differs from the working directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1912"}),"#1912"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Debug builds of VAST no longer segfault on a status request with the ",(0,a.yg)("inlineCode",{parentName:"p"},"--debug")," option.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1915"}),"#1915"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.dns")," schema has been updated to match the currently used EVE-JSON structure output by recent Suricata versions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1919"}),"#1919"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer tries to create indexes for fields of type ",(0,a.yg)("inlineCode",{parentName:"p"},"list<record{...}>")," as that wasn't supported in the first place.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1933"}),"#1933"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Static plugins are no longer always loaded, but rather need to be explicitly enabled as documented. To restore the behavior from before this bug fix, set ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins: [bundled]")," in your configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1959"}),"#1959")))),(0,a.yg)("h2",m({},{id:"20210930"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.09.30"}),"2021.09.30")),(0,a.yg)("h3",m({},{id:"changes-50"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default store backend now is ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," in order to enable the use of partition transforms in the future. To continue using the (now deprecated) legacy store backend, set ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.store-backend")," to archive.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1876"}),"#1876"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Example configuration files are now installed to the datarootdir as opposed to the sysconfdir in order to avoid overriding previously installed configuration files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1880"}),"#1880")))),(0,a.yg)("h3",m({},{id:"features-65"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"If present in the plugin source directory, the build scaffolding now automatically installs ",(0,a.yg)("inlineCode",{parentName:"p"},"<plugin>.yaml.example")," files, commenting out every line so the file has no effect. This serves as documentation for operators that can modify the installed file in-place.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1860"}),"#1860"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"broker")," plugin is now a also ",(0,a.yg)("em",{parentName:"p"},"writer")," plugin on top of being already a ",(0,a.yg)("em",{parentName:"p"},"reader")," plugin. The new plugin enables exporting query results directly into a a Zeek process, e.g., to write Zeek scripts that incorporate context from the past. Run ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export broker <expr>")," to ship events via Broker that Zeek dispatches under the event ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST::data(layout: string, data: any)"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1863"}),"#1863"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new tool ",(0,a.yg)("inlineCode",{parentName:"p"},"mdx-regenerate")," allows operators to re-create all ",(0,a.yg)("inlineCode",{parentName:"p"},".mdx")," files in a database directory to the latest file format version while VAST is running. This is useful for advanced users in preparation for version upgrades that bump the format version.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1866"}),"#1866"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Running ",(0,a.yg)("inlineCode",{parentName:"p"},"vat status --detailed")," now lists all loaded configuration files under ",(0,a.yg)("inlineCode",{parentName:"p"},"system.config-files"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1871"}),"#1871"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query argument to the export and count commands may now be omitted, which causes the commands to operate on all data. Note that this may be a very expensive operation, so use with caution.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1879"}),"#1879"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed")," now contains information about queries   that are currently processed in the index.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1881"}),"#1881")))),(0,a.yg)("h3",m({},{id:"bug-fixes-94"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The status command no longer occasionally contains garbage keys when the VAST server is under high load.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1872"}),"#1872"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Remote sources and sinks are no longer erroneously included in the output of VAST status.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1873"}),"#1873"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index now correctly cancels pending queries when the requester dies.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1884"}),"#1884"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Import filter expressions now work correctly with queries using field extractors, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import suricata 'event_type == \"alert\"' < path/to/eve.json"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1885"}),"#1885"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Expression predicates of the ",(0,a.yg)("inlineCode",{parentName:"p"},"#field")," type now produce error messages instead of empty result sets for operations that are not supported.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1886"}),"#1886"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk monitor no longer fails to delete segments of particularly busy partitions with the ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," store backend.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1892"}),"#1892")))),(0,a.yg)("h2",m({},{id:"20210826"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.08.26"}),"2021.08.26")),(0,a.yg)("h3",m({},{id:"changes-51"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer strips link-layer framing when ingesting PCAPs. The stored payload is the raw PCAP packet. Similarly, ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export pcap")," now includes a Ethernet link-layer framing, per libpcap's ",(0,a.yg)("inlineCode",{parentName:"p"},"DLT_EN10MB")," link type.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1797"}),"#1797"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Strings in error or warning log messages are no longer escaped, greatly improving readability of messages containing nested error contexts.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1842"}),"#1842"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports building against {fmt} 8 and spdlog 1.9.2, and now requires at least {fmt} 7.1.3.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1846"}),"#1846"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with an updated schema type for the ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.dhcp")," event, covering all fields of the extended output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1854"}),"#1854")))),(0,a.yg)("h3",m({},{id:"features-66"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," store backend works correctly with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast get")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast explore"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1805"}),"#1805"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST can now process Eve JSON events of type ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.packet")," that Suricata emits when the config option ",(0,a.yg)("inlineCode",{parentName:"p"},"tagged-packets")," is set and a rule tags a packet using, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"tag:session,5,packets;"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1819"}),"#1819"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1833"}),"#1833")))),(0,a.yg)("h3",m({},{id:"bug-fixes-95"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Previously missing fields of suricata event types are now part of the concept definitions of ",(0,a.yg)("inlineCode",{parentName:"p"},"net.src.ip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.src.port"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.dst.ip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.dst.port"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.app"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.proto"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.community_id"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"net.vlan"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"net.packets"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1798"}),"#1798"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Invalid segment files will no longer crash VAST at startup.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1820"}),"#1820"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins in the prebuilt Docker images no longer show ",(0,a.yg)("inlineCode",{parentName:"p"},"unspecified")," as their version.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1828"}),"#1828"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The configuration options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.{file,uds}-sink.path")," now correctly specify paths relative to the database directory of VAST, rather than the current working directory of the VAST server.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1848"}),"#1848"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store")," store backend and built-in transform steps (",(0,a.yg)("inlineCode",{parentName:"p"},"hash"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"replace"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"delete"),") now function correctly in static VAST binaries.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1850"}),"#1850"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of VAST status now includes status information for sources and sinks spawned in the VAST node, i.e., via ",(0,a.yg)("inlineCode",{parentName:"p"},"vast spawn source|sink <format>")," rather than ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import|export <format>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1852"}),"#1852"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"In order to align with the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://www.gnu.org/prep/standards/html_node/Directory-Variables.html"}),"GNU Coding Standards"),", the static binary (and other relocatable binaries) now uses ",(0,a.yg)("inlineCode",{parentName:"p"},"/etc")," as sysconfdir for installations to ",(0,a.yg)("inlineCode",{parentName:"p"},"/usr/bin/vast"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1856"}),"#1856"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now only switches to journald style logging by default when it is actually supported.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1857"}),"#1857"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CSV parser now correctly parses quoted fields in non-string types. E.g., ",(0,a.yg)("inlineCode",{parentName:"p"},'"127.0.0.1"')," in CSV now successfully parsers when a matching schema contains an ",(0,a.yg)("inlineCode",{parentName:"p"},"address")," type field.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1858"}),"#1858"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The memory counts in the output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," now represent bytes consistently, as opposed to a mix of bytes and kilobytes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1862"}),"#1862")))),(0,a.yg)("h2",m({},{id:"20210729"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.07.29"}),"2021.07.29")),(0,a.yg)("h3",m({},{id:"changes-52"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer officially supports Debian Buster with GCC-8. In CI, VAST now runs on Debian Bullseye with GCC-10. The provided Docker images now use ",(0,a.yg)("inlineCode",{parentName:"p"},"debian:bullseye-slim")," as base image. Users that require Debian Buster support should use the provided static builds instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1765"}),"#1765"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"From now on VAST is compiled with the C++20 language standard. Minimum compiler versions have increased to GCC 10, Clang 11, and AppleClang 12.0.5.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1768"}),"#1768"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," binaries in our ",(0,a.yg)("a",m({parentName:"p"},{href:"http://hub.docker.com/r/tenzir/vast"}),"prebuilt Docker images")," no longer contain AVX instructions for increased portability. Building the image locally continues to add supported auto-vectorization flags automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1778"}),"#1778"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The following new build options exist: ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENABLE_AUTO_VECTORIZATION")," enables/disables all auto-vectorization flags, and ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENABLE_SSE_INSTRUCTIONS")," enables ",(0,a.yg)("inlineCode",{parentName:"p"},"-msse"),"; similar options exist for SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, and AVX2.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1778"}),"#1778")))),(0,a.yg)("h3",m({},{id:"features-67"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST has new a ",(0,a.yg)("inlineCode",{parentName:"p"},"store_plugin")," type for custom store backends that hold the raw data of a partition. The new setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.store-backend")," controls the selection of the store implementation, which has a default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"segment-store"),". This is still an opt-in feature: unless the configuration value is set, VAST defaults to the old implementation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1720"}),"#1720"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1762"}),"#1762"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1802"}),"#1802"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports import filter expressions. They act as the dual to export query expressions: ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import suricata '#type == \"suricata.alert\"' < eve.json")," will import only ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.alert")," events, discarding all other events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1742"}),"#1742"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now comes with a ",(0,a.yg)("a",m({parentName:"p"},{href:"https://hub.docker.com/r/tenzir/vast-dev"}),(0,a.yg)("inlineCode",{parentName:"a"},"tenzir/vast-dev"))," Docker image in addition to the regular ",(0,a.yg)("a",m({parentName:"p"},{href:"https://hub.docker.com/r/tenzir/vast"}),(0,a.yg)("inlineCode",{parentName:"a"},"tenzir/vast")),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast-dev")," image targets development contexts, e.g., when building additional plugins. The image contains all build-time dependencies of VAST and runs as ",(0,a.yg)("inlineCode",{parentName:"p"},"root")," rather than the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," user.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1749"}),"#1749"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," now prints extended information for hash indexes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1755"}),"#1755"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/zeek/broker"}),"Broker")," plugin enables seamless log ingestion from ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/zeek/zeek"}),"Zeek")," to VAST via a TCP socket. Broker is Zeek's messaging library and the plugin turns VAST into a Zeek ",(0,a.yg)("a",m({parentName:"p"},{href:"https://docs.zeek.org/en/master/frameworks/cluster.html#logger"}),"logger node"),". Use ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import broker")," to establish a connection to a Zeek node and acquire logs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1758"}),"#1758"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugin versions are now unique to facilitate debugging. They consist of three optional parts: (1) the CMake project version of the plugin, (2) the Git revision of the last commit that touched the plugin, and (3) a ",(0,a.yg)("inlineCode",{parentName:"p"},"dirty")," suffix for uncommited changes to the plugin. Plugin developers no longer need to specify the version manually in the plugin entrypoint.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1764"}),"#1764"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports the ",(0,a.yg)("em",{parentName:"p"},"arm64")," architecture.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1773"}),"#1773"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Installing VAST now includes a ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml.example")," configuration file listing all available options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1777"}),"#1777"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now exports per-layout import metrics under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"<reader>.events.<layout-name>")," in addition to the regular ",(0,a.yg)("inlineCode",{parentName:"p"},"<reader>.events"),". This makes it easier to understand the event type distribution.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1781"}),"#1781"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The static binary now bundles the Broker plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1789"}),"#1789")))),(0,a.yg)("h3",m({},{id:"bug-fixes-96"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Configuring VAST to use CAF's built-in OpenSSL module via the ",(0,a.yg)("inlineCode",{parentName:"p"},"caf.openssl.*")," options now works again as expected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1740"}),"#1740"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The the ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," command now prints information about input and output transformations.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1748"}),"#1748"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A ",(0,a.yg)("inlineCode",{parentName:"p"},"[*** LOG ERROR #0001 ***]")," error message on startup under Linux no longer occurs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1754"}),"#1754"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries against fields using a ",(0,a.yg)("inlineCode",{parentName:"p"},"#index=hash")," attribute could have missed some results. Fixing a bug in the offset calculation during bitmap processing resolved the issue.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1755"}),"#1755"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A regression caused VAST's plugins to be loaded in random order, which printed a warning about mismatching plugins between client and server. The order is now deterministic.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1756"}),"#1756"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST does not abort JSON imports anymore when encountering something other than a JSON object, e.g., a number or a string. Instead, VAST skips the offending line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1759"}),"#1759"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Import processes now respond quicker. Shutdown requests are no longer delayed when the server process has busy imports, and metrics reports are now written in a timely manner.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1771"}),"#1771"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Particularly busy imports caused the shutdown of the server process to hang, if import processes were still running or had not yet flushed all data. The server now shuts down correctly in these cases.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1771"}),"#1771"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The static binary no longer behaves differently than the regular build with regards to its configuration directories: system-wide configuration files now reside in ",(0,a.yg)("inlineCode",{parentName:"p"},"<prefix>/etc/vast/vast.yaml")," rather than ",(0,a.yg)("inlineCode",{parentName:"p"},"/etc/vast/vast.yaml"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1777"}),"#1777"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENABLE_JOURNALD_LOGGING")," CMake option is no longer ignored.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1780"}),"#1780"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins built against an external libvast no longer require the ",(0,a.yg)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_LIBDIR")," to be specified as a path relative to the configured ",(0,a.yg)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_PREFIX"),". This fixes an issue with plugins in separate packages for some package managers, e.g., Nix.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1786"}),"#1786"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The official Docker image and static binary distribution of VAST now produce the correct version output for plugins from the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast version")," command.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1799"}),"#1799"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk budget feature no longer triggers a rare segfault while deleting partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1804"}),"#1804"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1809"}),"#1809")))),(0,a.yg)("h2",m({},{id:"20210624"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.06.24"}),"2021.06.24")),(0,a.yg)("h3",m({},{id:"breaking-changes-3"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Apache Arrow is now a required dependency. The previously deprecated build  option ",(0,a.yg)("inlineCode",{parentName:"p"},"-DVAST_ENABLE_ARROW=OFF")," no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1683"}),"#1683"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer loads static plugins by default. Generally, VAST now treats static plugins and bundled dynamic plugins equally, allowing users to enable or disable static plugins as needed for their deployments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1703"}),"#1703")))),(0,a.yg)("h3",m({},{id:"changes-53"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The VAST community chat moved from Gitter to Slack. ",(0,a.yg)("a",m({parentName:"p"},{href:"http://slack.tenzir.com"}),"Join us")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"#vast")," channel for vibrant discussions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1696"}),"#1696"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("a",m({parentName:"p"},{href:"https://hub.docker.com/r/tenzir/vast"}),"tenzir/vast")," Docker image bundles the PCAP plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1705"}),"#1705"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST merges lists from configuration files. E.g., running VAST with ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugins=some-plugin")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins: [other-plugin]")," in the configuration now results in both ",(0,a.yg)("inlineCode",{parentName:"p"},"some-plugin")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"other-plugin")," being loaded (sorted by the usual precedence), instead of just ",(0,a.yg)("inlineCode",{parentName:"p"},"some-plugin"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1721"}),"#1721"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1734"}),"#1734")))),(0,a.yg)("h3",m({},{id:"features-68"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.start.commands")," allows for specifying an ordered list of VAST commands that run after successful startup. The effect is the same as first starting a node, and then using another VAST client to issue commands.  This is useful for commands that have side effects that cannot be expressed through the config file, e.g., starting a source inside the VAST server that listens on a socket or reads packets from a network interface.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1699"}),"#1699"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugin-dirs")," may now be specified on the command line as well as the configuration. Use the options ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugins")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugin-dirs")," respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1703"}),"#1703"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Add the reserved plugin name ",(0,a.yg)("inlineCode",{parentName:"p"},"bundled")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," to enable load all bundled plugins, i.e., static or dynamic plugins built alongside VAST, or use ",(0,a.yg)("inlineCode",{parentName:"p"},"--plugins=bundled")," on the command line. The reserved plugin name ",(0,a.yg)("inlineCode",{parentName:"p"},"all")," causes all bundled and external plugins to be loaded, i.e., all shared libraries matching ",(0,a.yg)("inlineCode",{parentName:"p"},"libvast-plugin-*")," from the configured ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugin-dirs"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1703"}),"#1703"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"It's now possible to configure the VAST endpoint as an environment variable by setting ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENDPOINT"),". This has higher precedence than setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.endpoint")," in configuration files, but lower precedence than passing ",(0,a.yg)("inlineCode",{parentName:"p"},"--endpoint=")," on the command-line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1714"}),"#1714"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins load their respective configuration from ",(0,a.yg)("inlineCode",{parentName:"p"},"<configdir>/vast/plugin/<plugin-name>.yaml")," in addition to the regular configuration file at ",(0,a.yg)("inlineCode",{parentName:"p"},"<configdir>/vast/vast.yaml"),". The new plugin-specific file does not require putting configuration under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"plugins.<plugin-name>"),". This allows for deploying plugins without needing to touch the ",(0,a.yg)("inlineCode",{parentName:"p"},"<configdir>/vast/vast.yaml")," configuration file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1724"}),"#1724")))),(0,a.yg)("h3",m({},{id:"bug-fixes-97"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when querying for string fields with non-string values. Instead, an error message warns the user about an invalid query.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1685"}),"#1685"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building plugins against an installed VAST no longer requires manually specifying ",(0,a.yg)("inlineCode",{parentName:"p"},"-DBUILD_SHARED_LIBS=ON"),". The option is now correctly enabled by default for external plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1697"}),"#1697"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The UDS metrics sink continues to send data when the receiving socket is recreated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1702"}),"#1702"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.log-rotation-threshold")," option was silently ignored, causing VAST to always use the default log rotation threshold of 10 MiB. The option works as expected now.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1709"}),"#1709"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Additional tags for the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://hub.docker.com/r/tenzir/vast"}),"tenzir/vast")," Docker image for the release versions exist, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/vast:2021.05.27"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1711"}),"#1711"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import csv")," command handles quoted fields correctly. Previously, the quotes were part of the parsed value, and field separators in quoted strings caused the parser to fail.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1712"}),"#1712"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Import processes no longer hang on receiving SIGINT or SIGKILL. Instead, they shut down properly after flushing yet to be processed data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1718"}),"#1718")))),(0,a.yg)("h2",m({},{id:"20210527"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.05.27"}),"2021.05.27")),(0,a.yg)("h3",m({},{id:"breaking-changes-4"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Schemas are no longer implicitly shared between sources, i.e., an ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," process importing data with a custom schema will no longer affect other sources started at a later point in time. Schemas known to the VAST server process are still available to all ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," processes. We do not expect this change to have a real-world impact, but it could break setups where some sources have been installed on hosts without their own schema files, the VAST server did not have up-to-date schema files, and other sources were (ab)used to provide the latest type information.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1656"}),"#1656"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"configure")," script was removed. This was a custom script that mimicked the functionality of an autotools-based ",(0,a.yg)("inlineCode",{parentName:"p"},"configure")," script by writing directly to the cmake cache. Instead, users now must use the ",(0,a.yg)("inlineCode",{parentName:"p"},"cmake")," and/or ",(0,a.yg)("inlineCode",{parentName:"p"},"ccmake")," binaries directly to configure VAST.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1657"}),"#1657")))),(0,a.yg)("h3",m({},{id:"changes-54"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Building VAST without Apache Arrow via ",(0,a.yg)("inlineCode",{parentName:"li"},"-DVAST_ENABLE_ARROW=OFF")," is now deprecated, and support for the option will be removed in a future release. As the Arrow ecosystem and libraries matured, we feel confident in making it a required dependency and plan to build upon it more in the future.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1682"}),"#1682"))),(0,a.yg)("h3",m({},{id:"features-69"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("em",{parentName:"p"},"transforms")," feature allows VAST to apply transformations to incoming and outgoing data. A transform consists of a sequence of steps that execute sequentially, e.g., to remove, overwrite, hash, encrypt data. A new plugin type makes it easy to write custom transforms.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1517"}),"#1517"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1656"}),"#1656"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugin schemas are now installed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir>/vast/plugin/<plugin>/schema"),", while VAST's built-in schemas reside in ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir>/vast/schema"),". The load order guarantees that plugins are able to reliably override the schemas bundled with VAST.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1608"}),"#1608"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export --timeout=<duration>")," allows for setting a timeout for VAST queries. Cancelled exports result in a non-zero exit code.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1611"}),"#1611"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"To enable easier post-processing, the new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.export.json.numeric-durations")," switches JSON output of ",(0,a.yg)("inlineCode",{parentName:"p"},"duration")," types from human-readable strings (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},'"4.2m"'),") to numeric (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"252.15"),") in fractional seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1628"}),"#1628"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," command now prints the VAST server version information under the ",(0,a.yg)("inlineCode",{parentName:"p"},"version")," key.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1652"}),"#1652"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.disk-monitor-step-size")," enables the disk monitor to remove ",(0,a.yg)("em",{parentName:"p"},"N")," partitions at once before re-checking if the new size of the database directory is now small enough. This is useful when checking the size of a directory is an expensive operation itself, e.g., on compressed filesystems.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1655"}),"#1655")))),(0,a.yg)("h3",m({},{id:"bug-fixes-98"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now correctly refuses to run when loaded plugins fail their initialization, i.e., are in a state that cannot be reasoned about.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1618"}),"#1618"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A recent change caused imports over UDP not to forward its events to the VAST server process. Running ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import -l :<port>/udp <format>")," now works as expected again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1622"}),"#1622"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Non-relocatable VAST binaries no longer look for configuration, schemas, and plugins in directories relative to the binary location. Vice versa, relocatable VAST binaries no longer look for configuration, schemas, and plugins in their original install directory, and instead always use paths relative to their binary location. On macOS, we now always build relocatable binaries. Relocatable binaries now work correctly on systems where the libary install directory is ",(0,a.yg)("inlineCode",{parentName:"p"},"lib64")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"lib"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1624"}),"#1624"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer erroneously skips the version mismatch detection between client and server. The check now additionally compares running plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1652"}),"#1652"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Executing VAST's unit test suite in parallel no longer fails.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1659"}),"#1659"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST and transform plugins now build without Arrow support again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1673"}),"#1673"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"delete")," transform step correctly deletes fields from the layout when running VAST with Arrow disabled.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1673"}),"#1673"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer erroneously warns about a version mismatch between client and server when their plugin load order differs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1679"}),"#1679")))),(0,a.yg)("h2",m({},{id:"20210429"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.04.29"}),"2021.04.29")),(0,a.yg)("h3",m({},{id:"breaking-changes-5"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated (",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/vast/pull/1409"}),"#1409"),") option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.no-default-schema")," no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1507"}),"#1507"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins configured via ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," in the configuration file can now be specified using either the plugin name or the full path to the shared plugin library. We no longer allow omitting the extension from specified plugin files, and recommend using the plugin name as a more portable solution, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"example")," over ",(0,a.yg)("inlineCode",{parentName:"p"},"libexample")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"/path/to/libexample.so")," over ",(0,a.yg)("inlineCode",{parentName:"p"},"/path/to/libexample"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1527"}),"#1527"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated usage (",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/vast/pull/1354"}),"#1354"),") of format-independent options after the format in commands is now no longer possible. This affects the options ",(0,a.yg)("inlineCode",{parentName:"p"},"listen"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"schema"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"schema-file"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"type"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"uds")," for import commands and the ",(0,a.yg)("inlineCode",{parentName:"p"},"write")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"uds")," options for export commands.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1529"}),"#1529"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins must define a separate entrypoint in their build scaffolding using the argument ",(0,a.yg)("inlineCode",{parentName:"p"},"ENTRYPOINT")," to the CMake function ",(0,a.yg)("inlineCode",{parentName:"p"},"VASTRegisterPlugin"),". If only a single value is given to the argument ",(0,a.yg)("inlineCode",{parentName:"p"},"SOURCES"),", it is interpreted as the ",(0,a.yg)("inlineCode",{parentName:"p"},"ENTRYPOINT")," automatically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1549"}),"#1549"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"To avoid confusion between the PCAP plugin and libpcap, which both have a library file named ",(0,a.yg)("inlineCode",{parentName:"p"},"libpcap.so"),", we now generally prefix the plugin library output names with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast-plugin-"),". E.g., The PCAP plugin library file is now named ",(0,a.yg)("inlineCode",{parentName:"p"},"libvast-plugin-pcap.so"),". Plugins specified with a full path in the configuration under ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," must be adapted accordingly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1593"}),"#1593")))),(0,a.yg)("h3",m({},{id:"changes-55"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The metrics for Suricata Eve JSON and Zeek Streaming JSON imports are now under the categories ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata-reader")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-reader")," respectively so they can be distinguished from the regular JSON import, which is still under ",(0,a.yg)("inlineCode",{parentName:"p"},"json-reader"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1498"}),"#1498"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with a schema record type for Suricata's ",(0,a.yg)("inlineCode",{parentName:"p"},"rfb")," event type.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1499"}),"#1499"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"exporter.hits")," metric has been removed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1514"}),"#1514"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1574"}),"#1574"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We upstreamed the Debian patches provided by ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta"),". VAST now prefers an installed ",(0,a.yg)("inlineCode",{parentName:"p"},"tsl-robin-map>=0.6.2")," to the bundled one unless configured with ",(0,a.yg)("inlineCode",{parentName:"p"},"--with-bundled-robin-map"),", and we provide a manpage for ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," if ",(0,a.yg)("inlineCode",{parentName:"p"},"pandoc")," is installed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1515"}),"#1515"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Suricata ",(0,a.yg)("inlineCode",{parentName:"p"},"dns")," schema type now defines the ",(0,a.yg)("inlineCode",{parentName:"p"},"dns.grouped.A")," field containing a list of all returned addresses.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1531"}),"#1531"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The status output of ",(0,a.yg)("em",{parentName:"p"},"Analyzer Plugins")," moved from the ",(0,a.yg)("inlineCode",{parentName:"p"},"importer.analyzers")," key into the top-level record.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1544"}),"#1544"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"--disable-default-config-dirs")," disables the loading of user and system configuration, schema, and plugin directories. We use this option internally when running integration tests.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1557"}),"#1557"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Building VAST now requires CMake >= 3.15.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1559"}),"#1559"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The VAST community chat moved from Element to Gitter. Join us at ",(0,a.yg)("a",m({parentName:"p"},{href:"https://gitter.im/tenzir/vast"}),"gitter.im/tenzir/vast")," or via Matrix at ",(0,a.yg)("inlineCode",{parentName:"p"},"#tenzir_vast:gitter.im"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1591"}),"#1591")))),(0,a.yg)("h3",m({},{id:"features-70"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk monitor gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.start.disk-budget-check-binary")," option that can be used to specify an external binary to determine the size of the database directory. This can be useful in cases where ",(0,a.yg)("inlineCode",{parentName:"p"},"stat()")," does not give the correct answer, e.g. on compressed filesystems.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1453"}),"#1453"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_PLUGIN_DIRS")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_SCHEMA_DIRS")," environment variables allow for setting additional plugin and schema directories separated with ",(0,a.yg)("inlineCode",{parentName:"p"},":")," with higher precedence than other plugin and schema directories.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1532"}),"#1532"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1541"}),"#1541"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"It is now possible to build plugins against an installed VAST. This requires a slight adaptation to every plugin's build scaffolding. The example plugin was updated accordingly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1532"}),"#1532"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},"Component Plugins")," are a new category of plugins that execute code within the VAST server process. ",(0,a.yg)("em",{parentName:"p"},"Analyzer Plugins")," are now a specialization of ",(0,a.yg)("em",{parentName:"p"},"Component Plugins"),", and their API remains unchanged.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1544"}),"#1544"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1547"}),"#1547"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1588"}),"#1588"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},"Reader Plugins")," and ",(0,a.yg)("em",{parentName:"p"},"Writer Plugins")," are a new family of plugins that add import/export formats. The previously optional PCAP format moved into a dedicated plugin. Configure with ",(0,a.yg)("inlineCode",{parentName:"p"},"--with-pcap-plugin")," and add ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.plugins")," to enable the PCAP plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1549"}),"#1549")))),(0,a.yg)("h3",m({},{id:"bug-fixes-99"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer erroneously tries to load explicitly specified plugins dynamically that are linked statically.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1528"}),"#1528"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Custom commands from plugins ending in ",(0,a.yg)("inlineCode",{parentName:"p"},"start")," no longer try to write to the server instead of the client log file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1530"}),"#1530"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Linking against an installed VAST via CMake now correctly resolves VAST's dependencies.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1532"}),"#1532"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer refuses to start when any of the configuration file directories is unreadable, e.g., because VAST is running in a sandbox.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1533"}),"#1533"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CSV reader no longer crashes when encountering nested type aliases.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1534"}),"#1534"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The command-line parser no longer crashes when encountering a flag with missing value in the last position of a command invocation.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1536"}),"#1536"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A bug in the parsing of ISO8601 formatted dates that incorrectly adjusted the time to the UTC timezone has been fixed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1537"}),"#1537"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugin unit tests now correctly load and initialize their respective plugins.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1549"}),"#1549"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The shutdown logic contained a bug that would make the node fail to terminate in case a plugin actor is registered at said node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1563"}),"#1563"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A race condition in the shutdown logic that caused an assertion was fixed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1563"}),"#1563"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now correctly builds within shallow clones of the repository. If the build system is unable to determine the correct version from ",(0,a.yg)("inlineCode",{parentName:"p"},"git-describe"),", it now always falls back to the version of the last release.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1570"}),"#1570"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We fixed a regression that made it impossible to build static binaries from outside of the repository root directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1573"}),"#1573"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"VASTRegisterPlugin")," CMake function now correctly removes the ",(0,a.yg)("inlineCode",{parentName:"p"},"ENTRYPOINT")," from the given ",(0,a.yg)("inlineCode",{parentName:"p"},"SOURCES"),", allowing for plugin developers to easily glob for sources again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1573"}),"#1573"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"exporter.selectivity")," metric is now 1.0 instead of NaN for idle periods.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1574"}),"#1574"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer renders JSON numbers with non-finite numbers as ",(0,a.yg)("inlineCode",{parentName:"p"},"NaN"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-NaN"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"inf"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"-inf"),", resulting in invalid JSON output. Instead, such numbers are now rendered as ",(0,a.yg)("inlineCode",{parentName:"p"},"null"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1574"}),"#1574"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Specifying relative ",(0,a.yg)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_*DIR")," in the build configuration no longer causes VAST not to pick up system-wide installed configuration files, schemas, and plugins. The configured install prefix is now used correctly. The defunct ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_SYSCONFDIR"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_DATADIR"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_LIBDIR")," CMake options no longer exist. Use a combination of ",(0,a.yg)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_PREFIX")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"CMAKE_INSTALL_*DIR")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1580"}),"#1580"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Spaces before SI prefixes in command line arguments and configuration options are now generally ignored, e.g., it is now possible to set the disk monitor budgets to ",(0,a.yg)("inlineCode",{parentName:"p"},"2 GiB")," rather than ",(0,a.yg)("inlineCode",{parentName:"p"},"2GiB"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1590"}),"#1590")))),(0,a.yg)("h2",m({},{id:"20210325"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.03.25"}),"2021.03.25")),(0,a.yg)("h3",m({},{id:"breaking-changes-6"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp")," extractor has been removed from the query language entirely. Use ",(0,a.yg)("inlineCode",{parentName:"p"},":timestamp")," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1399"}),"#1399"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Plugins can now be linked statically against VAST. A new ",(0,a.yg)("inlineCode",{parentName:"p"},"VASTRegisterPlugin")," CMake function enables easy setup of the build scaffolding required for plugins. Configure with ",(0,a.yg)("inlineCode",{parentName:"p"},"--with-static-plugins")," or build a static binary to link all plugins built alongside VAST statically. All plugin build scaffoldings must be adapted, older plugins do no longer work.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1445"}),"#1445"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1452"}),"#1452")))),(0,a.yg)("h3",m({},{id:"changes-56"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default size of table slices (event batches) that is created from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," processes has been changed from 1,000 to 1,024.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1396"}),"#1396"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with schema record types for Suricata's ",(0,a.yg)("inlineCode",{parentName:"p"},"mqtt")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"anomaly")," event types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1408"}),"#1408"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.no-default-schema")," is deprecated, as it is no longer needed to override types from bundled schemas.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1409"}),"#1409"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Query latency for expressions that contain concept names has improved substantially. For DB sizes in the TB region, and with a large variety of event types, queries with a high selectivity experience speedups of up to 5x.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1433"}),"#1433"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The zeek-to-vast utility was moved to the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/zeek-vast"}),"tenzir/zeek-vast")," repository. All options related to zeek-to-vast and the bundled Broker submodule were removed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1435"}),"#1435"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The type extractor in the expression language now works with type aliases. For example, given the type definition for port from the base schema ",(0,a.yg)("inlineCode",{parentName:"p"},"type port = count"),", a search for ",(0,a.yg)("inlineCode",{parentName:"p"},":count")," will also consider fields of type ",(0,a.yg)("inlineCode",{parentName:"p"},"port"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1446"}),"#1446")))),(0,a.yg)("h3",m({},{id:"features-71"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The schema language now supports 4 operations on record types: ",(0,a.yg)("inlineCode",{parentName:"p"},"+")," combines the fields of 2 records into a new record. ",(0,a.yg)("inlineCode",{parentName:"p"},"<+")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"+>")," are variations of ",(0,a.yg)("inlineCode",{parentName:"p"},"+")," that give precedence to the left and right operand respectively. ",(0,a.yg)("inlineCode",{parentName:"p"},"-")," creates a record with the field specified as its right operand removed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1407"}),"#1407"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1487"}),"#1487"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1490"}),"#1490"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports nested records in Arrow table slices and in the JSON import, e.g., data of type ",(0,a.yg)("inlineCode",{parentName:"p"},"list<record<name: string, age: count>"),". While nested record fields are not yet queryable, ingesting such data will no longer cause VAST to crash. MessagePack table slices don't support records in lists yet.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1429"}),"#1429")))),(0,a.yg)("h3",m({},{id:"bug-fixes-100"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some non-null pointers were incorrectly rendered as ",(0,a.yg)("inlineCode",{parentName:"p"},"*nullptr")," in log messages.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1430"}),"#1430"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Data that was ingested before the deprecation of the ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp")," attribute wasn't exported correctly with newer versions. This is now corrected.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1432"}),"#1432"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON parser now accepts data with numerical or boolean values in fields that expect strings according to the schema. VAST converts these values into string representations.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1439"}),"#1439"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A query for a field or field name suffix that matches multiple fields of different types would erroneously return no results.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1447"}),"#1447"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The disk monitor now correctly erases partition synopses from the meta index.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1450"}),"#1450"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The archive, index, source, and sink components now report metrics when idle instead of omitting them entirely. This allows for distinguishing between idle and not running components from the metrics.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1451"}),"#1451"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer crashes when the disk monitor tries to calculate the size of the database while files are being deleted. Instead, it will retry after the configured scan interval.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1458"}),"#1458"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Insufficient permissions for one of the paths in the ",(0,a.yg)("inlineCode",{parentName:"p"},"schema-dirs")," option would lead to a crash in ",(0,a.yg)("inlineCode",{parentName:"p"},"vast start"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1472"}),"#1472"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A race condition during server shutdown could lead to an invariant violation, resulting in a firing assertion. Streamlining the shutdown logic resolved the issue.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1473"}),"#1473"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1485"}),"#1485"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Enabling the disk budget feature no longer prevents the server process from exiting after it was stopped.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1495"}),"#1495")))),(0,a.yg)("h2",m({},{id:"20210224"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.02.24"}),"2021.02.24")),(0,a.yg)("h3",m({},{id:"breaking-changes-7"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST switched to ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/gabime/spdlog"}),"spdlog >= 1.5.0")," for logging. For users, this means: The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.console-format")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.file-format")," now must be specified using the spdlog pattern syntax as described ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/gabime/spdlog/wiki/3.-Custom-formatting#pattern-flags"}),"here"),". All settings under ",(0,a.yg)("inlineCode",{parentName:"p"},"caf.logger.*")," are now ignored by VAST, and only the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.*")," counterparts are used for logger configuration.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1223"}),"#1223"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1328"}),"#1328"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1334"}),"#1334"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1390"}),"#1390"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/a4z"}),"@a4z"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now requires ",(0,a.yg)("a",m({parentName:"p"},{href:"https://fmt.dev"}),"{fmt} >= 5.2.1")," to be installed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1330"}),"#1330"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All options in ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.*")," had underscores in their names replaced with dashes to align with other options. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.file_sink")," is now ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.file-sink"),". The old options no longer work.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1368"}),"#1368"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"User-supplied schema files are now picked up from ",(0,a.yg)("inlineCode",{parentName:"p"},"<SYSCONFDIR>/vast/schema")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<XDG_CONFIG_HOME>/vast/schema")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"<XDG_DATA_HOME>/vast/schema"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1372"}),"#1372"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The previously deprecated options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.spawn.importer.ids")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.schema-paths")," no longer work. Furthermore, queries spread over multiple arguments are now disallowed instead of triggering a deprecation warning.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1374"}),"#1374"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The special meaning of the ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp")," attribute has been removed from the schema language. Timestamps can from now on be marked as such by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"timestamp")," type instead. Queries of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp <op> value")," remain operational but are deprecated in favor of ",(0,a.yg)("inlineCode",{parentName:"p"},":timestamp"),". Note that this change also affects ",(0,a.yg)("inlineCode",{parentName:"p"},":time")," queries, which aren't supersets of ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp")," queries any longer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1388"}),"#1388")))),(0,a.yg)("h3",m({},{id:"changes-57"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Schema parsing now uses a 2-pass loading phase so that type aliases can reference other types that are later defined in the same directory. Additionally, type definitions from already parsed schema dirs can be referenced from schema types that are parsed later. Types can also be redefined in later directories, but a type can not be defined twice in the same directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1331"}),"#1331"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"infer")," command has an improved heuristic for the number types ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"count"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"real"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1343"}),"#1343"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1356"}),"#1356"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/ngrodzitski"}),"@ngrodzitski"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The options ",(0,a.yg)("inlineCode",{parentName:"p"},"listen"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"read"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"schema"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"schema-file"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"type"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"uds")," can from now on be supplied to the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command directly. Similarly, the options ",(0,a.yg)("inlineCode",{parentName:"p"},"write")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"uds")," can be supplied to the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," command. All options can still be used after the format subcommand, but that usage is deprecated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1354"}),"#1354"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query normalizer interprets value predicates of type ",(0,a.yg)("inlineCode",{parentName:"p"},"subnet")," more broadly: given a subnet ",(0,a.yg)("inlineCode",{parentName:"p"},"S"),", the parser expands this to the expression ",(0,a.yg)("inlineCode",{parentName:"p"},":subnet == S || :addr in S"),". This change makes it easier to search for IP addresses belonging to a specific subnet.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1373"}),"#1373"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast help")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast documentation")," now goes to ",(0,a.yg)("em",{parentName:"p"},"stdout")," instead of to stderr. Erroneous invocations of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," also print the helptext, but in this case the output still goes to stderr to avoid interference with downstream tooling.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1385"}),"#1385")))),(0,a.yg)("h3",m({},{id:"experimental-features"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/Neo23x0/sigma"}),"Sigma")," rules are now a valid format to represent query expression. VAST parses the ",(0,a.yg)("inlineCode",{parentName:"li"},"detection")," attribute of a rule and translates it into a native query expression. To run a query using a Sigma rule, pass it on standard input, e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"vast export json < rule.yaml"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1379"}),"#1379"))),(0,a.yg)("h3",m({},{id:"features-72"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST rotates server logs by default. The new config options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.disable-log-rotation")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.log-rotation-threshold")," can be used to control this behaviour.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1223"}),"#1223"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1362"}),"#1362"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The meta index now stores partition synopses in separate files. This will decrease restart times for systems with large databases, slow disks and aggressive ",(0,a.yg)("inlineCode",{parentName:"p"},"readahead")," settings. A new config setting ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.meta-index-dir")," allows storing the meta index information in a separate directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1330"}),"#1330"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1376"}),"#1376"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON import now always relies upon ",(0,a.yg)("a",m({parentName:"p"},{href:"https://simdjson.org"}),"simdjson"),". The previously experimental ",(0,a.yg)("inlineCode",{parentName:"p"},"--simdjson")," option to the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import json|suricata|zeek-json")," commands no longer exist as the feature is considered stable.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1343"}),"#1343"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1356"}),"#1356"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/ngrodzitski"}),"@ngrodzitski"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.file-sink.real-time")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics.uds-sink.real-time")," enable real-time metrics reporting for the file sink and UDS sink respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1368"}),"#1368"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The type extractor in the expression language now works with user defined types. For example the type ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," is defined as ",(0,a.yg)("inlineCode",{parentName:"p"},"type port = count")," in the base schema. This type can now be queried with an expression like ",(0,a.yg)("inlineCode",{parentName:"p"},":port == 80"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1382"}),"#1382")))),(0,a.yg)("h3",m({},{id:"bug-fixes-101"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"An ordering issue introduced in ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/vast/pull/1295"}),"#1295")," that could lead to a segfault with long-running queries was reverted.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1381"}),"#1381"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A bug in the new simdjson based JSON reader introduced in ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/vast/pull/1356"}),"#1356")," could trigger an assertion in the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," process if an input field could not be converted to the field type in the target layout. This is no longer the case.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1386"}),"#1386")))),(0,a.yg)("h2",m({},{id:"20210128"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2021.01.28"}),"2021.01.28")),(0,a.yg)("h3",m({},{id:"breaking-changes-8"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new short options ",(0,a.yg)("inlineCode",{parentName:"p"},"-v"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-vv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-vvv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-qq"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"-qqq")," map onto the existing verbosity levels. The existing short syntax, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"-v debug"),", no longer works.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1244"}),"#1244"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The GitHub CI changed to Debian Buster and produces Debian artifacts instead of Ubuntu artifacts. Similarly, the Docker images we provide on ",(0,a.yg)("a",m({parentName:"p"},{href:"https://hub.docker.com/r/tenzir/vast"}),"Docker Hub")," use Debian Buster as base image. To build Docker images locally, users must set ",(0,a.yg)("inlineCode",{parentName:"p"},"DOCKER_BUILDKIT=1")," in the build environment.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1294"}),"#1294")))),(0,a.yg)("h3",m({},{id:"changes-58"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST preserves nested JSON objects in events instead of formatting them in a flattened form when exporting data with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export json"),". The old behavior can be enabled with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export json --flatten"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1257"}),"#1257"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1289"}),"#1289"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"vast start")," prints the endpoint it is listening on when providing the option ",(0,a.yg)("inlineCode",{parentName:"p"},"--print-endpoint"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1271"}),"#1271"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.schema-paths")," is renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.schema-dirs"),". The old option is deprecated and will be removed in a future release.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1287"}),"#1287")))),(0,a.yg)("h3",m({},{id:"experimental-features-1"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST features a new plugin framework to support efficient customization points at various places of the data processing pipeline. There exist several base classes that define an interface, e.g., for adding new commands or spawning a new actor that processes the incoming stream of data. The directory ",(0,a.yg)("inlineCode",{parentName:"p"},"examples/plugins/example")," contains an example plugin.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1208"}),"#1208"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1264"}),"#1264"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1275"}),"#1275"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1282"}),"#1282"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1285"}),"#1285"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1287"}),"#1287"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1302"}),"#1302"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1307"}),"#1307"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1316"}),"#1316"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST relies on ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/simdjson/simdjson"}),"simdjson")," for JSON parsing. The substantial gains in throughput shift the bottleneck of the ingest path from parsing input to indexing at the node. To use the (yet experimental) feature, use ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import json|suricata|zeek-json --simdjson"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1230"}),"#1230"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1246"}),"#1246"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1281"}),"#1281"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1314"}),"#1314"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1315"}),"#1315"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/ngrodzitski"}),"@ngrodzitski")))),(0,a.yg)("h3",m({},{id:"features-73"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"import zeek-json")," command allows for importing line-delimited Zeek JSON logs as produced by the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/corelight/json-streaming-logs"}),"json-streaming-logs")," package. Unlike stock Zeek JSON logs, where one file contains exactly one log type, the streaming format contains different log event types in a single stream and uses an additional ",(0,a.yg)("inlineCode",{parentName:"p"},"_path")," field to disambiguate the log type. For stock Zeek JSON logs, use the existing ",(0,a.yg)("inlineCode",{parentName:"p"},"import json")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"-t")," flag to specify the log type.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1259"}),"#1259"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST queries also accept ",(0,a.yg)("inlineCode",{parentName:"p"},"nanoseconds"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"microseconds"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"milliseconds")," ",(0,a.yg)("inlineCode",{parentName:"p"},"seconds")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"minutes")," as units for a duration.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1265"}),"#1265"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," contains detailed memory usage information about active and cached partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1297"}),"#1297"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST installations bundle a LICENSE.3rdparty file alongside the regular LICENSE file that lists all embedded code that is under a separate license.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1306"}),"#1306")))),(0,a.yg)("h3",m({},{id:"bug-fixes-102"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Invalid Arrow table slices read from disk no longer trigger a segmentation fault. Instead, the invalid on-disk state is ignored.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1247"}),"#1247"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Manually specified configuration files may reside in the default location directories. Configuration files can be symlinked.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1248"}),"#1248"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"For relocatable installations, the list of schema loading paths does not include a build-time configured path any more.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1249"}),"#1249"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Values in JSON fields that can't be converted to the type that is specified in the schema won't cause the containing event to be dropped any longer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1250"}),"#1250"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Line based imports correctly handle read timeouts that occur in the middle of a line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1276"}),"#1276"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Disk monitor quota settings not ending in a 'B' are no longer silently discarded.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1278"}),"#1278"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A potential race condition that could lead to a hanging export if a partition was persisted just as it was scanned no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1295"}),"#1295")))),(0,a.yg)("h2",m({},{id:"20201216"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.12.16"}),"2020.12.16")),(0,a.yg)("h3",m({},{id:"breaking-changes-9"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"splunk-to-vast")," script has a new name: ",(0,a.yg)("inlineCode",{parentName:"p"},"taxonomize"),". The script now also generates taxonomy declarations for Azure Sentinel.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1134"}),"#1134"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"CAF-encoded table slices no longer exist. As such, the option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.import.batch-encoding")," now only supports ",(0,a.yg)("inlineCode",{parentName:"p"},"arrow")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"msgpack")," as arguments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1142"}),"#1142"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The on-disk format for table slices now supports versioning of table slice encodings. This breaking change makes it so that adding further encodings or adding new versions of existing encodings is possible without breaking again in the future.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1143"}),"#1143"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1157"}),"#1157"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1160"}),"#1160"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1165"}),"#1165"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Archive segments no longer include an additional, unnecessary version identifier. We took the opportunity to clean this up bundled with the other recent breaking changes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1168"}),"#1168"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The build configuration of VAST received a major overhaul. Inclusion of libvast in other procects via ",(0,a.yg)("inlineCode",{parentName:"p"},"add_subdirectory(path/to/vast)")," is now easily possible. The names of all build options were aligned, and the new build summary shows all available options.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1175"}),"#1175"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," type is no longer a first-class type. The new way to represent transport-layer ports relies on ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," instead. In the schema, VAST ships with a new alias ",(0,a.yg)("inlineCode",{parentName:"p"},"type port = count")," to keep existing schema definitions in tact. However, this is a breaking change because the on-disk format and Arrow data representation changed. Queries with ",(0,a.yg)("inlineCode",{parentName:"p"},":port")," type extractors no longer work. Similarly, the syntax ",(0,a.yg)("inlineCode",{parentName:"p"},"53/udp")," no longer exists; use ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," syntax ",(0,a.yg)("inlineCode",{parentName:"p"},"53")," instead. Since most ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," occurrences do not carry a known transport-layer type, and the type information exists typically in a separate field, removing ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," as native type streamlines the data model.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1187"}),"#1187")))),(0,a.yg)("h3",m({},{id:"changes-59"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer requires you to manually remove a stale PID file from a no-longer running ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," process. Instead, VAST prints a warning and overwrites the old PID file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1128"}),"#1128"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST does not produce metrics by default any more. The option ",(0,a.yg)("inlineCode",{parentName:"p"},"--disable-metrics")," has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"--enable-metrics")," accordingly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1137"}),"#1137"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now processes the schema directory recursively, as opposed to stopping at nested directories.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1154"}),"#1154"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default segment size in the archive is now 1 GiB. This reduces fragmentation of the archive meta data and speeds up VAST startup time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1166"}),"#1166"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now listens on port 42000 instead of letting the operating system choose the port if the option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.endpoint")," specifies an endpoint without a port. To restore the old behavior, set the port to 0 explicitly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1170"}),"#1170"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Suricata schemas received an overhaul: there now exist ",(0,a.yg)("inlineCode",{parentName:"p"},"vlan")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"in_iface")," fields in all types. In addition, VAST ships with new types for ",(0,a.yg)("inlineCode",{parentName:"p"},"ikev2"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"nfs"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"snmp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"tftp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"rdp"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"sip")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"dcerpc"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"tls")," type gets support for the additional ",(0,a.yg)("inlineCode",{parentName:"p"},"sni")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"session_resumed")," fields.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1176"}),"#1176"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1180"}),"#1180"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1186"}),"#1186"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1237"}),"#1237"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/satta"}),"@satta"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Installed schema definitions now reside in ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir>/vast/schema/types"),", taxonomy definitions in ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir>/vast/schema/taxonomy"),", and concept definitions in ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir/vast/schema/concepts"),", as opposed to them all being in the schema directory directly. When overriding an existing installation, you ",(0,a.yg)("em",{parentName:"p"},"may")," have to delete the old schema definitions by hand.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1194"}),"#1194"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek")," export format now strips off the prefix ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.")," to ensure full compatibility with regular Zeek output. For all non-Zeek types, the prefix remains intact.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1205"}),"#1205")))),(0,a.yg)("h3",m({},{id:"experimental-features-2"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with its own taxonomy and basic concept definitions for Suricata, Zeek, and Sysmon.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1135"}),"#1135"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1150"}),"#1150"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query language now supports models. Models combine a list of concepts into a semantic unit that can be fulfiled by an event. If the type of an event contains a field for every concept in a model. Turn to ",(0,a.yg)("a",m({parentName:"p"},{href:"https://vast.io/docs/understand/data-model/taxonomies#models"}),"the documentation")," for more information.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1185"}),"#1185"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1228"}),"#1228"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The expression language gained support for the ",(0,a.yg)("inlineCode",{parentName:"p"},"#field")," meta extractor. It is the complement for ",(0,a.yg)("inlineCode",{parentName:"p"},"#type")," and uses suffix matching for field names at the layout level.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1228"}),"#1228")))),(0,a.yg)("h3",m({},{id:"features-74"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.client-log-file")," enables client-side logging. By default, VAST only writes log files for the server process.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1132"}),"#1132"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"--print-bytesizes")," of ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," prints information about the size of certain fields of the flatbuffers inside a VAST database directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1149"}),"#1149"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The storage required for index IP addresses has been optimized. This should  result in significantly reduced memory usage over time, as well as faster  restart times and reduced disk space requirements.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1172"}),"#1172"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1200"}),"#1200"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1216"}),"#1216"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new key 'meta-index-bytes' appears in the status output generated by ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1193"}),"#1193"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"dump")," command prints configuration and schema-related information. The implementation allows for printing all registered concepts and models, via ",(0,a.yg)("inlineCode",{parentName:"p"},"vast dump concepts")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast dump models"),". The flag to ",(0,a.yg)("inlineCode",{parentName:"p"},"--yaml")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"dump")," switches from JSON to YAML output, such that it confirms to the taxonomy configuration syntax.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1196"}),"#1196"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1233"}),"#1233"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"On Linux, VAST now contains a set of built-in USDT tracepoints that can be used by tools like ",(0,a.yg)("inlineCode",{parentName:"p"},"perf")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"bpftrace")," when debugging. Initially, we provide the two tracepoints ",(0,a.yg)("inlineCode",{parentName:"p"},"chunk_make")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"chunk_destroy"),", which trigger every time a ",(0,a.yg)("inlineCode",{parentName:"p"},"vast::chunk")," is created or destroyed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1206"}),"#1206"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Low-selectivity queries of string (in)equality queries now run up to 30x faster, thanks to more intelligent selection of relevant index partitions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1214"}),"#1214")))),(0,a.yg)("h3",m({},{id:"bug-fixes-103"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," no longer stalls when it doesn't receive any data for more than 10 seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1136"}),"#1136"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml.example")," contained syntax errors. The example config file now works again.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1145"}),"#1145"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer starts if the specified config file does not exist.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1147"}),"#1147"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed")," now contains informations about runnings sinks, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export <format> <query>")," processes.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1155"}),"#1155"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer blocks when an invalid query operation is issued.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1189"}),"#1189"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The type registry now detects and handles breaking changes in schemas, e.g., when a field type changes or a field is dropped from record.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1195"}),"#1195"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index now correctly drops further results when queries finish early, thus improving the performance of queries for a limited number of events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1209"}),"#1209"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index no longer crashes when too many parallel queries are running.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1210"}),"#1210"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index no longer causes exporters to deadlock when the meta index produces false positives.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1225"}),"#1225"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The summary log message of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export")," now contains the correct number of candidate events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1228"}),"#1228"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," command does not collect status information from sources and sinks any longer. They were often too busy to respond, leading to a long delay before the command completed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1234"}),"#1234"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Concepts that reference other concepts are now loaded correctly from their definition.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1236"}),"#1236")))),(0,a.yg)("h2",m({},{id:"20201029"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.10.29"}),"2020.10.29")),(0,a.yg)("h3",m({},{id:"changes-60"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new option ",(0,a.yg)("inlineCode",{parentName:"p"},"import.read-timeout")," allows for setting an input timeout for low volume sources. Reaching the timeout causes the current batch to be forwarded immediately. This behavior was previously controlled by ",(0,a.yg)("inlineCode",{parentName:"p"},"import.batch-timeout"),", which now only controls the maximum buffer time before the source forwards batches to the server.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1096"}),"#1096"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST will now warn if a client command connects to a server that runs on a different version of the vast binary.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1098"}),"#1098"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Log files are now less verbose because class and function names are not printed on every line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1107"}),"#1107"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default database directory moved to ",(0,a.yg)("inlineCode",{parentName:"p"},"/var/lib/vast")," for Linux deployments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1116"}),"#1116")))),(0,a.yg)("h3",m({},{id:"experimental-features-3"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query language now comes with support for concepts, the first part of taxonomies. Concepts is a mechanism to unify the various naming schemes of different data formats into a single, coherent nomenclature.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1102"}),"#1102"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new ",(0,a.yg)("em",{parentName:"p"},"disk monitor")," component can now monitor the database size and delete data that exceeds a specified threshold. Once VAST reaches the maximum amount of disk space, the disk monitor deletes the oldest data. The command-line options ",(0,a.yg)("inlineCode",{parentName:"p"},"--disk-quota-high"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"--disk-quota-low"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"--disk-quota-check-interval")," control the rotation behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1103"}),"#1103")))),(0,a.yg)("h3",m({},{id:"features-75"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When running VAST under systemd supervision, it is now possible to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"Type=notify")," directive in the unit file to let VAST notify the service manager when it becomes ready.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1091"}),"#1091"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new options ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.segments")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.max-segment-size")," control how the archive generates segments.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1103"}),"#1103"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new script ",(0,a.yg)("inlineCode",{parentName:"p"},"splunk-to-vast")," converts a splunk CIM model file in JSON to a VAST taxonomy. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"splunk-to-vast < Network_Traffic.json")," renders the concept definitions for the ",(0,a.yg)("em",{parentName:"p"},"Network Traffic")," datamodel. The generated taxonomy does not include field definitions, which users should add separately according to their data formats.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1121"}),"#1121"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The expression language now accepts records without field names. For example,",(0,a.yg)("inlineCode",{parentName:"p"},'id == <192.168.0.1, 41824, 143.51.53.13, 25, "tcp">')," is now valid syntax and instantiates a record with 5 fields. Note: expressions with records currently do not execute.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1129"}),"#1129")))),(0,a.yg)("h3",m({},{id:"bug-fixes-104"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The lookup for schema directories now happens in a fixed order.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1086"}),"#1086"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Sources that receive no or very little input do not block ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," any longer.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1096"}),"#1096"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status --detailed")," command now correctly shows the status of all sources, i.e., ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"vast spawn source")," commands.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1109"}),"#1109"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST no longer opens a random public port, which used to be enabled in the experimental VAST cluster mode in order to transparently establish a full mesh.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1110"}),"#1110"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," tool failed to print FlatBuffers schemas correctly. The output now renders correctly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1123"}),"#1123")))),(0,a.yg)("h2",m({},{id:"20200930"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.09.30"}),"2020.09.30")),(0,a.yg)("h3",m({},{id:"breaking-changes-10"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Data exported in the Apache Arrow format now contains the name of the payload record type in the metadata section of the schema.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1072"}),"#1072"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The persistent storage format of the index now uses FlatBuffers.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/863"}),"#863")))),(0,a.yg)("h3",m({},{id:"changes-61"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON export format now renders ",(0,a.yg)("inlineCode",{parentName:"p"},"duration")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"port")," fields using strings as opposed to numbers. This avoids a possible loss of information and enables users to re-use the output in follow-up queries directly.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1034"}),"#1034"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The delay between the periodic log messages for reporting the current event rates has been increased to 10 seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1035"}),"#1035"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The global VAST configuration now always resides in ",(0,a.yg)("inlineCode",{parentName:"p"},"<sysconfdir>/vast/vast.conf"),", and bundled schemas always in ",(0,a.yg)("inlineCode",{parentName:"p"},"<datadir>/vast/schema/"),". VAST no longer supports reading a ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.conf")," file in the current working directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1036"}),"#1036"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The proprietary VAST configuration file has changed to the more ops-friendly industry standard YAML. This change introduced also a new dependency: ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/jbeder/yaml-cpp"}),"yaml-cpp")," version 0.6.2 or greater. The top-level ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml.example")," illustrates how the new YAML config looks like. Please rename existing configuration files from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.conf")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml"),". VAST still reads ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.conf")," but will soon only look for ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yml")," files in available configuration file paths.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1045"}),"#1045"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1055"}),"#1055"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1059"}),"#1059"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1062"}),"#1062"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The options that affect batches in the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command received new, more user-facing names: ",(0,a.yg)("inlineCode",{parentName:"p"},"import.table-slice-type"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"import.table-slice-size"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"import.read-timeout")," are now called ",(0,a.yg)("inlineCode",{parentName:"p"},"import.batch-encoding"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"import.batch-size"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"import.read-timeout")," respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1058"}),"#1058"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All configuration options are now grouped into ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"caf")," sections, depending on whether they affect VAST itself or are handed through to the underlying actor framework CAF directly. Take a look at the bundled ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.yaml.example")," file for an explanation of the new layout.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1073"}),"#1073"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We refactored the index architecture to improve stability and responsiveness. This includes fixes for several shutdown issues.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/863"}),"#863")))),(0,a.yg)("h3",m({},{id:"experimental-features-4"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"vast get")," command has been added. It retrieves events from the database directly by their ids.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/938"}),"#938"))),(0,a.yg)("h3",m({},{id:"features-76"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports the XDG base directory specification: The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.conf")," is now found at ",(0,a.yg)("inlineCode",{parentName:"p"},"${XDG_CONFIG_HOME:-${HOME}/.config}/vast/vast.conf"),", and schema files at ",(0,a.yg)("inlineCode",{parentName:"p"},"${XDG_DATA_HOME:-${HOME}/.local/share}/vast/schema/"),". The user-specific configuration file takes precedence over the global configuration file in ",(0,a.yg)("inlineCode",{parentName:"p"},"<sysconfdir>/vast/vast.conf"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1036"}),"#1036"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now merges the contents of all used configuration files instead of using only the most user-specific file. The file specified using ",(0,a.yg)("inlineCode",{parentName:"p"},"--config")," takes the highest precedence, followed by the user-specific path ",(0,a.yg)("inlineCode",{parentName:"p"},"${XDG_CONFIG_HOME:-${HOME}/.config}/vast/vast.conf"),", and the compile-time path ",(0,a.yg)("inlineCode",{parentName:"p"},"<sysconfdir>/vast/vast.conf"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1040"}),"#1040"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with a new tool ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast")," to display information about the contents of a VAST database directory. See ",(0,a.yg)("inlineCode",{parentName:"p"},"lsvast --help")," for usage instructions.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/863"}),"#863"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output of the ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," command was restructured with a strong focus on usability. The new flags ",(0,a.yg)("inlineCode",{parentName:"p"},"--detailed")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--debug")," add additional content to the output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/995"}),"#995")))),(0,a.yg)("h3",m({},{id:"bug-fixes-105"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Stalled sources that were unable to generate new events no longer stop import processes from shutting down under rare circumstances.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1058"}),"#1058"))),(0,a.yg)("h2",m({},{id:"20200828"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.08.28"}),"2020.08.28")),(0,a.yg)("h3",m({},{id:"breaking-changes-11"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We now bundle a patched version of CAF, with a changed ABI. This means that if you're linking against the bundled CAF library, you also need to distribute that library so that VAST can use it at runtime. The versions are API compatible so linking against a system version of CAF is still possible and supported.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/1020"}),"#1020"))),(0,a.yg)("h3",m({},{id:"changes-62"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"set")," type has been removed. Experience with the data model showed that there is no strong use case to separate sets from vectors in the core. While this may be useful in programming languages, VAST deals with immutable data where set constraints have been enforced upstream. This change requires updating existing schemas by changing ",(0,a.yg)("inlineCode",{parentName:"p"},"set<T>")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vector<T>"),". In the query language, the new symbol for the empty ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"{-}")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"{}"),", as it now unambiguously identifies ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," instances.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1010"}),"#1010"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vector")," type has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),". In an effort to streamline the type system vocabulary, we favor ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," over ",(0,a.yg)("inlineCode",{parentName:"p"},"vector")," because it's closer to existing terminology (e.g., Apache Arrow). This change requires updating existing schemas by changing ",(0,a.yg)("inlineCode",{parentName:"p"},"vector<T>")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"list<T>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1016"}),"#1016"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The expression field parser now allows the '-' character.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/999"}),"#999")))),(0,a.yg)("h3",m({},{id:"features-77"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now writes a PID lock file on startup to prevent multiple server processes from accessing the same persistent state. The ",(0,a.yg)("inlineCode",{parentName:"p"},"pid.lock")," file resides in the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.db")," directory.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1001"}),"#1001"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default schema for Suricata has been updated to support the ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.ftp")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.ftp_data")," event types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1009"}),"#1009"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now prints the location of the configuration file that is used.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1009"}),"#1009")))),(0,a.yg)("h3",m({},{id:"bug-fixes-106"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The shutdown process of the server process could potentially hang forever. VAST now uses a 2-step procedure that first attempts to terminate all components cleanly. If that fails, it will attempt a hard kill afterwards, and if that fails after another timeout, the process will call ",(0,a.yg)("inlineCode",{parentName:"p"},"abort(3)"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1005"}),"#1005"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When continuous query in a client process terminated, the node did not clean up the corresponding server-side state. This memory leak no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1006"}),"#1006"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The port encoding for Arrow-encoded table slices is now host-independent and  always uses network-byte order.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1007"}),"#1007"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Importing JSON no longer fails for JSON fields containing ",(0,a.yg)("inlineCode",{parentName:"p"},"null")," when the corresponding VAST type in the schema is a non-trivial type like ",(0,a.yg)("inlineCode",{parentName:"p"},"vector<string>"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1009"}),"#1009"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some file descriptors remained open when they weren't needed any more. This descriptor leak has been fixed.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1018"}),"#1018"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When running VAST under heavy load, CAF stream slot ids could wrap around after a few days and deadlock the system. As a workaround, we extended the slot id bit width to make the time until this happens unrealistically large.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1020"}),"#1020"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Incomplete reads have not been handled properly, which manifested for files larger than 2GB. On macOS, writing files larger than 2GB may have failed previously. VAST now respects OS-specific constraints on the maximum block size.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1025"}),"#1025"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST would overwrite existing on-disk state data when encountering a partial read during startup. This state-corrupting behavior no longer exists.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1026"}),"#1026"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST did not terminate when a critical component failed during startup. VAST now binds the lifetime of the node to all critical components.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/1028"}),"#1028"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"MessagePack-encoded table slices now work correctly for nested container types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/984"}),"#984"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A bug in the expression parser prevented the correct parsing of fields starting with either 'F' or 'T'.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/999"}),"#999")))),(0,a.yg)("h2",m({},{id:"20200728"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.07.28"}),"2020.07.28")),(0,a.yg)("h3",m({},{id:"breaking-changes-12"}),"Breaking Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",m({parentName:"li"},{href:"https://google.github.io/flatbuffers/"}),"FlatBuffers")," is now a required  dependency for VAST. The archive and the segment store use FlatBuffers to store  and version their on-disk persistent state.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/972"}),"#972"))),(0,a.yg)("h3",m({},{id:"changes-63"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The suricata schema file contains new type definitions for the stats, krb5, smb, and ssh events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/954"}),"#954"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/986"}),"#986"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now recognizes ",(0,a.yg)("inlineCode",{parentName:"p"},"/etc/vast/schema")," as an additional default directory for schema files.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/980"}),"#980")))),(0,a.yg)("h3",m({},{id:"features-78"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Starting with this release, installing VAST on any Linux becomes significantly easier: A static binary will be provided with each release on the GitHub releases page.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/966"}),"#966"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"We open-sourced our ",(0,a.yg)("a",m({parentName:"p"},{href:"http://msgpack.org"}),"MessagePack"),"-based table slice implementation, which provides a compact row-oriented encoding of data. This encoding works well for binary formats (e.g., PCAP) and access patterns that involve materializing entire rows. The MessagePack table slice is the new default when Apache Arrow is unavailable. To enable parsing into MessagePack, you can pass ",(0,a.yg)("inlineCode",{parentName:"p"},"--table-slice-type=msgpack")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command, or set the configuration option ",(0,a.yg)("inlineCode",{parentName:"p"},"import.table-slice-type")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"'msgpack'"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/975"}),"#975")))),(0,a.yg)("h3",m({},{id:"bug-fixes-107"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The PCAP reader now correctly shows the amount of generated events.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/954"}),"#954"))),(0,a.yg)("h2",m({},{id:"20200625"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.06.25"}),"2020.06.25")),(0,a.yg)("h3",m({},{id:"changes-64"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The options ",(0,a.yg)("inlineCode",{parentName:"p"},"system.table-slice-type")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"system.table-slice-size")," have been removed, as they duplicated ",(0,a.yg)("inlineCode",{parentName:"p"},"import.table-slice-type")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"import.table-slice-size")," respectively.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/908"}),"#908"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/951"}),"#951"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The JSON export format now renders timestamps using strings instead of numbers in order to avoid possible loss of precision.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/909"}),"#909"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"default")," table slice type has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"caf"),". It has not been the default when built with Apache Arrow support for a while now, and the new name more accurately reflects what it is doing.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/948"}),"#948")))),(0,a.yg)("h3",m({},{id:"experimental-features-5"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST now supports aging out existing data. This feature currently only concerns data in the archive. The options ",(0,a.yg)("inlineCode",{parentName:"li"},"system.aging-frequency")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"system.aging-query")," configure a query that runs on a regular schedule to determine which events to delete. It is also possible to trigger an aging cycle manually.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/929"}),"#929"))),(0,a.yg)("h3",m({},{id:"features-79"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now has options to limit the amount of results produced by an invocation of ",(0,a.yg)("inlineCode",{parentName:"p"},"vast explore"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/882"}),"#882"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import json")," command's type restrictions are more relaxed now, and can additionally convert from JSON strings to VAST internal data types.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/891"}),"#891"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports ",(0,a.yg)("inlineCode",{parentName:"p"},"/etc/vast/vast.conf")," as an additional fallback for the configuration file. The following file locations are looked at in order: Path specified on the command line via ",(0,a.yg)("inlineCode",{parentName:"p"},"--config=path/to/vast.conf"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.conf")," in current working directory, ",(0,a.yg)("inlineCode",{parentName:"p"},"${INSTALL_PREFIX}/etc/vast/vast.conf"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"/etc/vast/vast.conf"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/898"}),"#898"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command gained a new ",(0,a.yg)("inlineCode",{parentName:"p"},"--read-timeout")," option that forces data to be forwarded to the importer regardless of the internal batching parameters and table slices being unfinished. This allows for reducing the latency between the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command and the node. The default timeout is 10 seconds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/916"}),"#916"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The output format for the ",(0,a.yg)("inlineCode",{parentName:"p"},"explore")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pivot")," commands can now be set using the ",(0,a.yg)("inlineCode",{parentName:"p"},"explore.format")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pivot.format")," options respectively. Both default to JSON.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/921"}),"#921"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The meta index now uses Bloom filters for equality queries involving IP addresses. This especially accelerates queries where the user wants to know whether a certain IP address exists in the entire database.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/931"}),"#931")))),(0,a.yg)("h3",m({},{id:"bug-fixes-108"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A use after free bug would sometimes crash the node while it was shutting down.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/896"}),"#896"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A bogus import process that assembled table slices with a greater number of events than expected by the node was able to lead to wrong query results.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/908"}),"#908"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export json")," command now correctly unescapes its output.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/910"}),"#910"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now correctly checks for control characters in inputs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/910"}),"#910")))),(0,a.yg)("h2",m({},{id:"20200528"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.05.28"}),"2020.05.28")),(0,a.yg)("h3",m({},{id:"changes-65"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The command line flag for disabling the accountant has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"--disable-metrics")," to more accurately reflect its intended purpose. The internal ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.statistics")," event has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.metrics"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/870"}),"#870"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Spreading a query over multiple command line arguments in commands like explore/export/pivot/etc. has been deprecated.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/878"}),"#878")))),(0,a.yg)("h3",m({},{id:"experimental-features-6"}),"Experimental Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Added a new ",(0,a.yg)("inlineCode",{parentName:"li"},"explore")," command to VAST that can be used to show data records within a certain time from the results of a query.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/873"}),"#873"),(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/877"}),"#877"))),(0,a.yg)("h3",m({},{id:"features-80"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All input parsers now support mixed ",(0,a.yg)("inlineCode",{parentName:"p"},"\\n")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"\\r\\n")," line endings.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/865"}),"#865"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When importing events of a new or updated type, VAST now only requires the type to be specified once (e.g., in a schema file). For consecutive imports, the event type does not need to be specified again. A list of registered types can now be viewed using ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," under the key ",(0,a.yg)("inlineCode",{parentName:"p"},"node.type-registry.types"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/875"}),"#875"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When importing JSON data without knowing the type of the imported events a priori, VAST now supports automatic event type deduction based on the JSON object keys in the data. VAST selects a type ",(0,a.yg)("em",{parentName:"p"},"iff")," the set of fields match a known type. The ",(0,a.yg)("inlineCode",{parentName:"p"},"--type")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"-t")," option to the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command restricts the matching to the set of types that share the provided prefix. Omitting ",(0,a.yg)("inlineCode",{parentName:"p"},"-t")," attempts to match JSON against all known types. If only a single variant of a type is matched, the import falls back to the old behavior and fills in ",(0,a.yg)("inlineCode",{parentName:"p"},"nil")," for mismatched keys.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/875"}),"#875"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now prints a message when it is waiting for user input to read a query from a terminal.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/878"}),"#878"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now ships with a schema suitable for Sysmon import.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/886"}),"#886")))),(0,a.yg)("h3",m({},{id:"bug-fixes-109"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The parser for Zeek tsv data used to ignore attributes that were defined for the Zeek-specific types in the schema files. It has been modified to respect and prefer the specified attributes for the fields that are present in the input data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/847"}),"#847"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a bug that caused ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," processes to produce ",(0,a.yg)("inlineCode",{parentName:"p"},"'default'")," table slices, despite having the ",(0,a.yg)("inlineCode",{parentName:"p"},"'arrow'")," type as the default.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/866"}),"#866"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a bug where setting the ",(0,a.yg)("inlineCode",{parentName:"p"},"logger.file-verbosity")," in the config file would not have an effect.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/866"}),"#866")))),(0,a.yg)("h2",m({},{id:"20200429"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.04.29"}),"2020.04.29")),(0,a.yg)("h3",m({},{id:"changes-66"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The index specific options ",(0,a.yg)("inlineCode",{parentName:"p"},"max-partition-size"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"max-resident-partitions"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"max-taste-partitions"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"max-queries")," can now be specified on the command line when starting a node.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/728"}),"#728"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default bind address has been changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"::")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"localhost"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/828"}),"#828"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"--skip-candidate-checks")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"-s")," for the ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," command was renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"--estimate")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"-e"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/843"}),"#843")))),(0,a.yg)("h3",m({},{id:"features-81"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Packet drop and discard statistics are now reported to the accountant for PCAP import, and are available using the keys ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap-reader.recv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap-reader.drop"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap-reader.ifdrop"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap-reader.discard"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap-reader.discard-rate")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.statistics")," event. If the number of dropped packets exceeds a configurable threshold, VAST additionally warns about packet drops on the command line.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/827"}),"#827"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/844"}),"#844"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Bash autocompletion for ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," is now available via the autocomplete script located at ",(0,a.yg)("inlineCode",{parentName:"p"},"scripts/vast-completions.bash")," in the VAST source tree.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/833"}),"#833")))),(0,a.yg)("h3",m({},{id:"bug-fixes-110"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Archive lookups are now interruptible. This change fixes an issue that caused consecutive exports to slow down the node, which improves the overall performance for larger databases considerably.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/825"}),"#825"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a crash when importing data while a continuous export was running for unrelated events.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/830"}),"#830"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"x != 80/tcp")," were falsely evaluated as ",(0,a.yg)("inlineCode",{parentName:"p"},"x != 80/? && x != ?/tcp"),". (The syntax in the second predicate does not yet exist; it only illustrates the bug.) Port inequality queries now correctly evaluate ",(0,a.yg)("inlineCode",{parentName:"p"},"x != 80/? || x != ?/tcp"),". E.g., the result now contains values like ",(0,a.yg)("inlineCode",{parentName:"p"},"80/udp")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"80/?"),", but also ",(0,a.yg)("inlineCode",{parentName:"p"},"8080/tcp"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/834"}),"#834"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Fixed a bug that could cause stalled input streams not to forward events to the index and archive components for the JSON, CSV, and Syslog readers, when the input stopped arriving but no EOF was sent. This is a follow-up to ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/vast/pull/750"}),"#750"),". A timeout now ensures that that the readers continue when some events were already handled, but the input appears to be stalled.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/835"}),"#835"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"For some queries, the index evaluated only a subset of all relevant partitions in a non-deterministic manner. Fixing a violated evaluation invariant now guarantees deterministic execution.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/842"}),"#842"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"stop")," command always returned immediately, regardless of whether it succeeded. It now blocks until the remote node shut down properly or returns an error exit code upon failure.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/849"}),"#849")))),(0,a.yg)("h2",m({},{id:"20200326"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.03.26"}),"2020.03.26")),(0,a.yg)("h3",m({},{id:"changes-67"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The VERBOSE log level has been added between INFO and DEBUG. This level is enabled at build time for all build types, making it possible to get more detailed logging output from release builds.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/787"}),"#787"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The internal statistics event type ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.account")," has been renamed to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.statistics")," for clarity.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/789"}),"#789"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The command line options prefix for changing CAF options was changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"--caf#")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"--caf."),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/797"}),"#797"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The log folder ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.log/")," in the current directory will not be created by  default any more. Users must explicitly set the ",(0,a.yg)("inlineCode",{parentName:"p"},"system.file-verbosity")," option  if they wish to keep the old behavior.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/803"}),"#803"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The config option ",(0,a.yg)("inlineCode",{parentName:"p"},"system.log-directory")," was deprecated and replaced by the new  option ",(0,a.yg)("inlineCode",{parentName:"p"},"system.log-file"),". All logs will now be written to a single file.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/806"}),"#806")))),(0,a.yg)("h3",m({},{id:"features-82"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import syslog")," command allows importing Syslog messages as defined in ",(0,a.yg)("a",m({parentName:"p"},{href:"https://tools.ietf.org/html/rfc5424"}),"RFC5424"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/770"}),"#770"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"--disable-community-id")," has been added to the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import pcap")," command for disabling the automatic computation of Community IDs.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/777"}),"#777"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Continuous export processes can now be stopped correctly. Before this change, the node showed an error message and the exporting process exited with a non-zero exit code.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/779"}),"#779"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The short option ",(0,a.yg)("inlineCode",{parentName:"p"},"-c")," for setting the configuration file has been removed. The long option ",(0,a.yg)("inlineCode",{parentName:"p"},"--config")," must now be used instead. This fixed a bug that did not allow for ",(0,a.yg)("inlineCode",{parentName:"p"},"-c")," to be used for continuous exports.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/781"}),"#781"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Expressions must now be parsed to the end of input. This fixes a bug that caused malformed queries to be evaluated until the parser failed. For example, the query ",(0,a.yg)("inlineCode",{parentName:"p"},'#type == "suricata.http" && .dest_port == 80')," was erroneously evaluated as ",(0,a.yg)("inlineCode",{parentName:"p"},'#type == "suricata.http"')," instead.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/791"}),"#791"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The hash index has been re-enabled after it was outfitted with a new ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/Tessil/robin-map/"}),"high-performance hash map")," implementation that increased performance to the point where it is on par with the regular index.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/796"}),"#796"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"An under-the-hood change to our parser-combinator framework makes sure that we do not discard possibly invalid input data up the the end of input. This uncovered a bug in our MRT/bgpdump integrations, which have thus been disabled (for now), and will be fixed at a later point in time.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/808"}),"#808")))),(0,a.yg)("h2",m({},{id:"20200227"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.02.27"}),"2020.02.27")),(0,a.yg)("h3",m({},{id:"changes-68"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The build system will from now on try use the CAF library from the system, if one is provided. If it is not found, the CAF submodule will be used as a fallback.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/740"}),"#740"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST now supports (and requires) Apache Arrow >= 0.16.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/751"}),"#751"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"--historical")," for export commands has been removed, as it was the  default already.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/754"}),"#754"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The option ",(0,a.yg)("inlineCode",{parentName:"p"},"--directory")," has been replaced by ",(0,a.yg)("inlineCode",{parentName:"p"},"--db-directory")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"log-directory"),", which set directories for persistent state and log files respectively. The default log file path has changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.db/log")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.log"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/758"}),"#758"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Hash indices have been disabled again due to a performance regression.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/765"}),"#765")))),(0,a.yg)("h3",m({},{id:"features-83"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"For users of the ",(0,a.yg)("a",m({parentName:"li"},{href:"https://nixos.org/nix/"}),"Nix")," package manager, expressions have been added to generate reproducible development environments with ",(0,a.yg)("inlineCode",{parentName:"li"},"nix-shell"),".\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/740"}),"#740"))),(0,a.yg)("h3",m({},{id:"bug-fixes-111"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Continuously importing events from a Zeek process with a low rate of emitted events resulted in a long delay until the data would be included in the result set of queries. This is because the import process would buffer up to 10,000 events before sending them to the server as a batch. The algorithm has been tuned to flush its buffers if no data is available for more than 500 milliseconds.\n",(0,a.yg)("a",m({parentName:"li"},{href:"https://github.com/tenzir/tenzir/pull/750"}),"#750"))),(0,a.yg)("h2",m({},{id:"20200131"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/tenzir/releases/tag/2020.01.31"}),"2020.01.31")),(0,a.yg)("h3",m({},{id:"changes-69"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import pcap")," command no longer takes interface names via ",(0,a.yg)("inlineCode",{parentName:"p"},"--read,-r"),", but instead from a separate option named ",(0,a.yg)("inlineCode",{parentName:"p"},"--interface,-i"),". This change has been made for consistency with other tools.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/641"}),"#641"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Record field names can now be entered as quoted strings in the schema and expression languages. This lifts a restriction where JSON fields with whitespaces or special characters could not be ingested.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/685"}),"#685"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Build configuration defaults have been adapated for a better user experience. Installations are now relocatable by default, which can be reverted by configuring with ",(0,a.yg)("inlineCode",{parentName:"p"},"--without-relocatable"),". Additionally, new sets of defaults named ",(0,a.yg)("inlineCode",{parentName:"p"},"--release")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--debug")," (renamed from ",(0,a.yg)("inlineCode",{parentName:"p"},"--dev-mode"),") have been added.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/695"}),"#695"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Two minor modifications were done in the parsing framework: (i) the parsers for enums and records now allow trailing separators, and (ii) the dash (",(0,a.yg)("inlineCode",{parentName:"p"},"-"),") was removed from the allowed characters of schema type names.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/706"}),"#706"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST is switching to a calendar-based versioning scheme starting with this release.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/739"}),"#739")))),(0,a.yg)("h3",m({},{id:"features-84"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When a record field has the ",(0,a.yg)("inlineCode",{parentName:"p"},"#index=hash")," attribute, VAST will choose an optimized index implementation. This new index type only supports (in)equality queries and is therefore intended to be used with opaque types, such as unique identifiers or random strings.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/632"}),"#632"),"\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/726"}),"#726"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Added ",(0,a.yg)("em",{parentName:"p"},"Apache Arrow")," as new export format. This allows users to export query results as Apache Arrow record batches for processing the results downstream, e.g., in Python or Spark.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/633"}),"#633"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import pcap")," command now takes an optional snapshot length via ",(0,a.yg)("inlineCode",{parentName:"p"},"--snaplen"),". If the snapshot length is set to snaplen, and snaplen is less than the size of a packet that is captured, only the first snaplen bytes of that packet will be captured and provided as packet data.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/642"}),"#642"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"An experimental new Python module enables querying VAST and processing results as ",(0,a.yg)("a",m({parentName:"p"},{href:"https://arrow.apache.org/docs/python/"}),"pyarrow")," tables.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/685"}),"#685"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The long option ",(0,a.yg)("inlineCode",{parentName:"p"},"--config"),", which sets an explicit path to the VAST configuration file, now also has the short option ",(0,a.yg)("inlineCode",{parentName:"p"},"-c"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/689"}),"#689"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"On FreeBSD, a VAST installation now includes an rc.d script that simpliefies spinning up a VAST node. CMake installs the script at ",(0,a.yg)("inlineCode",{parentName:"p"},"PREFIX/etc/rc.d/vast"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/693"}),"#693")))),(0,a.yg)("h3",m({},{id:"bug-fixes-112"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"In some cases it was possible that a source would connect to a node before it was fully initialized, resulting in a hanging ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import")," process.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/647"}),"#647"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"PCAP ingestion failed for traces containing VLAN tags. VAST now strips ",(0,a.yg)("a",m({parentName:"p"},{href:"https://en.wikipedia.org/wiki/IEEE_802.1Q"}),"IEEE 802.1Q")," headers instead of skipping VLAN-tagged packets.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/650"}),"#650"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Importing events over UDP with ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import <format> --listen :<port>/udp")," failed to register the accountant component. This caused an unexpected message warning to be printed on startup and resulted in losing import statistics. VAST now correctly registers the accountant.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/655"}),"#655"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The import process did not print statistics when importing events over UDP. Additionally, warnings about dropped UDP packets are no longer shown per packet, but rather periodically reported in a readable format.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/662"}),"#662"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A bug in the quoted string parser caused a parsing failure if an escape character occurred in the last position.\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/685"}),"#685"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A race condition in the index logic was able to lead to incomplete or empty result sets for ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/703"}),"#703"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The example configuration file contained an invalid section ",(0,a.yg)("inlineCode",{parentName:"p"},"vast"),". This has been changed to the correct name ",(0,a.yg)("inlineCode",{parentName:"p"},"system"),".\n",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pull/705"}),"#705")))),(0,a.yg)("h2",m({},{id:"02---20191030"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/vast/releases/tag/0.2"}),"0.2")," - 2019.10.30"),(0,a.yg)("h3",m({},{id:"changes-70"}),"Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query language has been extended to support expression of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"X == /pattern/"),", where ",(0,a.yg)("inlineCode",{parentName:"p"},"X")," is a compatible LHS extractor. Previously, patterns only supports the match operator ",(0,a.yg)("inlineCode",{parentName:"p"},"~"),". The two operators have the same semantics when one operand is a pattern.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"CAF and Broker are no longer required to be installed prior to building VAST. These dependencies are now tracked as git submodules to ensure version compatibility. Specifying a custom build is still possible via the CMake variables ",(0,a.yg)("inlineCode",{parentName:"p"},"CAF_ROOT_DIR")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BROKER_ROOT_DIR"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When exporting data in ",(0,a.yg)("inlineCode",{parentName:"p"},"pcap")," format, it is no longer necessary to manually restrict the query by adding the predicate ",(0,a.yg)("inlineCode",{parentName:"p"},'#type == "pcap.packet"')," to the expression. This now happens automatically because only this type contains the raw packet data.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When defining schema attributes in key-value pair form, the value no longer requires double-quotes. For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"#foo=x")," is now the same as ",(0,a.yg)("inlineCode",{parentName:"p"},'#foo="x"'),". The form without double-quotes consumes the input until the next space and does not support escaping. In case an attribute value contains whitespace, double-quotes must be provided, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},'#foo="x y z"'),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The PCAP packet type gained the additional field ",(0,a.yg)("inlineCode",{parentName:"p"},"community_id")," that contains the ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/corelight/community-id-spec"}),"Community ID")," flow hash. This identifier facilitates pivoting to a specific flow from data sources with connnection-level information, such Zeek or Suricata logs.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Log files generally have some notion of timestamp for recorded events. To make the query language more intuitive, the syntax for querying time points thus changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"#time")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp"),". For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"#time > 2019-07-02+12:00:00")," now reads ",(0,a.yg)("inlineCode",{parentName:"p"},"#timestamp > 2019-07-02+12:00:00"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Default schema definitions for certain ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," formats changed from hard-coded to runtime-evaluated. The default location of the schema definition files is ",(0,a.yg)("inlineCode",{parentName:"p"},"$(dirname vast-executable)"),"/../share/vast/schema. Currently this is used for the Suricata JSON log reader.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default directory name for persistent state changed from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.db"),". This makes it possible to run ",(0,a.yg)("inlineCode",{parentName:"p"},"./vast")," in the current directory without having to specify a different state directory on the command line.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Nested types are from now on accessed by the ",(0,a.yg)("inlineCode",{parentName:"p"},"."),"-syntax. This means VAST now has a unified syntax to select nested types and fields. For example, what used to be ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek::http")," is now just ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.http"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The (internal) option ",(0,a.yg)("inlineCode",{parentName:"p"},"--node")," for the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," commands has been renamed from ",(0,a.yg)("inlineCode",{parentName:"p"},"-n")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"-N"),", to allow usage of ",(0,a.yg)("inlineCode",{parentName:"p"},"-n")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"--max-events"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"To make the export option to limit the number of events to be exported more idiomatic, it has been renamed from ",(0,a.yg)("inlineCode",{parentName:"p"},"--events,e")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"--max-events,n"),". Now ",(0,a.yg)("inlineCode",{parentName:"p"},"vast export -n 42")," generates at most 42 events."))),(0,a.yg)("h3",m({},{id:"features-85"}),"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The default schema for Suricata has been updated to support the new ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.smtp")," event type in Suricata 5.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"export null")," command retrieves data, but never prints anything. Its main purpose is to make benchmarking VAST easier and faster.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"pivot")," command retrieves data of a related type. It inspects each event in a query result to find an event of the requested type. If a common field exists in the schema definition of the requested type, VAST will dynamically create a new query to fetch the contextual data according to the type relationship. For example, if two records ",(0,a.yg)("inlineCode",{parentName:"p"},"T")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"U")," share the same field ",(0,a.yg)("inlineCode",{parentName:"p"},"x"),", and the user requests to pivot via ",(0,a.yg)("inlineCode",{parentName:"p"},"T.x == 42"),", then VAST will fetch all data for ",(0,a.yg)("inlineCode",{parentName:"p"},"U.x == 42"),". An example use case would be to pivot from a Zeek or Suricata log entry to the corresponding PCAP packets. VAST uses the field ",(0,a.yg)("inlineCode",{parentName:"p"},"community_id")," to pivot between the logs and the packets. Pivoting is currently implemented for Suricata, Zeek (with ",(0,a.yg)("a",m({parentName:"p"},{href:"https://github.com/corelight/bro-community-id"}),"community ID computation")," enabled), and PCAP.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"infer")," command performs schema inference of input data. The command can deduce the input format and creates a schema definition that is sutable to use with the supplied data. Supported input types include Zeek TSV and JSONLD.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The newly added ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," comman allows counting hits for a query without exporting data.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Commands now support a ",(0,a.yg)("inlineCode",{parentName:"p"},"--documentation")," option, which returns Markdown-formatted documentation text.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A new schema for Argus CSV output has been added. It parses the output of ",(0,a.yg)("inlineCode",{parentName:"p"},"ra(1)"),", which produces CSV output when invoked with ",(0,a.yg)("inlineCode",{parentName:"p"},"-L 0 -c ,"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The schema language now supports comments. A double-slash (",(0,a.yg)("inlineCode",{parentName:"p"},"//"),") begins a comment. Comments last until the end of the line, i.e., until a newline character (",(0,a.yg)("inlineCode",{parentName:"p"},"\\n"),").")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command now supports CSV formatted data. The type for each column is automatically derived by matching the column names from the CSV header in the input with the available types from the schema definitions.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Configuring how much status information gets printed to STDERR previously required obscure config settings. From now on, users can simply use ",(0,a.yg)("inlineCode",{parentName:"p"},"--verbosity=<level>,-v <level>"),", where ",(0,a.yg)("inlineCode",{parentName:"p"},"<level>")," is one of ",(0,a.yg)("inlineCode",{parentName:"p"},"quiet"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"error"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"warn"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"info"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"debug"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"trace"),". However, ",(0,a.yg)("inlineCode",{parentName:"p"},"debug")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"trace")," are only available for debug builds (otherwise they fall back to log level ",(0,a.yg)("inlineCode",{parentName:"p"},"info"),").")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The query expression language now supports ",(0,a.yg)("em",{parentName:"p"},"data predicates"),", which are a shorthand for a type extractor in combination with an equality operator. For example, the data predicate ",(0,a.yg)("inlineCode",{parentName:"p"},"6.6.6.6")," is the same as ",(0,a.yg)("inlineCode",{parentName:"p"},":addr == 6.6.6.6"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," object in the output from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," has a new field ",(0,a.yg)("inlineCode",{parentName:"p"},"statistics")," for a high-level summary of the indexed data. Currently, there exists a nested ",(0,a.yg)("inlineCode",{parentName:"p"},"layouts")," objects with per-layout statistics about the number of events indexed.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"accountant")," object in the output from ",(0,a.yg)("inlineCode",{parentName:"p"},"vast status")," has a new field ",(0,a.yg)("inlineCode",{parentName:"p"},"log-file")," that points to the filesystem path of the accountant log file.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Data extractors in the query language can now contain a type prefix. This enables an easier way to extract data from a specific type. For example, a query to look for Zeek conn log entries with responder IP address 1.2.3.4 had to be written with two terms, ",(0,a.yg)("inlineCode",{parentName:"p"},"#type == zeek.conn && id.resp_h == 1.2.3.4"),", because the nested id record can occur in other types as well. Such queries can now written more tersely as ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek.conn.id.resp_h == 1.2.3.4"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST gained support for importing Suricata JSON logs. The import command has a new suricata format that can ingest EVE JSON output.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The data parser now supports ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"integer")," values according to the ",(0,a.yg)("em",{parentName:"p"},"International System for Units (SI)"),". For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"1k")," is equal to ",(0,a.yg)("inlineCode",{parentName:"p"},"1000")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"1Ki")," equal to ",(0,a.yg)("inlineCode",{parentName:"p"},"1024"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"VAST can now ingest JSON data. The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command gained the ",(0,a.yg)("inlineCode",{parentName:"p"},"json")," format, which allows for parsing line-delimited JSON (LDJSON) according to a user-selected type with ",(0,a.yg)("inlineCode",{parentName:"p"},"--type"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"--schema-file")," options can be used in conjunction to supply custom types. The JSON objects in the input must match the selected type, that is, the keys of the JSON object must be equal to the record field names and the object values must be convertible to the record field types.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"For symmetry to the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," command, the ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command gained the ",(0,a.yg)("inlineCode",{parentName:"p"},"--max-events,n")," option to limit the number of events that will be imported.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," command gained the ",(0,a.yg)("inlineCode",{parentName:"p"},"--listen,l")," option to receive input from the network. Currently only UDP is supported. Previously, one had to use a clever netcat pipe with enough receive buffer to achieve the same effect, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"nc -I 1500 -p 4200 | vast import pcap"),". Now this pipe degenerates to ",(0,a.yg)("inlineCode",{parentName:"p"},"vast import pcap -l"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The new ",(0,a.yg)("inlineCode",{parentName:"p"},"--disable-accounting")," option shuts off periodic gathering of system telemetry in the accountant actor. This also disables output in the ",(0,a.yg)("inlineCode",{parentName:"p"},"accounting.log"),"."))),(0,a.yg)("h3",m({},{id:"bug-fixes-113"}),"Bug Fixes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The user environments ",(0,a.yg)("inlineCode",{parentName:"p"},"LDFLAGS")," were erroneously passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"ar"),". Instead, the user environments ",(0,a.yg)("inlineCode",{parentName:"p"},"ARFLAGS")," are now used.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Exporting data with ",(0,a.yg)("inlineCode",{parentName:"p"},"export -n <count>")," crashed when ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," was a multiple of the table slice size. The command now works as expected.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries of the form ",(0,a.yg)("inlineCode",{parentName:"p"},"#type ~ /pattern/")," used to be rejected erroneously. The validation code has been corrected and such queries are now working as expected.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When specifying ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," types in the schema, ingestion failed because there did not exist an implementation for such types. It is now possible to use define enumerations in schema as expected and query them as strings.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Queries with the less ",(0,a.yg)("inlineCode",{parentName:"p"},"<")," or greater ",(0,a.yg)("inlineCode",{parentName:"p"},">")," operators produced off-by-one results for the ",(0,a.yg)("inlineCode",{parentName:"p"},"duration")," when the query contained a finer resolution than the index. The operator now works as expected.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Timestamps were always printed in millisecond resolution, which lead to loss of precision when the internal representation had a higher resolution. Timestamps are now rendered up to nanosecond resolution - the maximum resolution supported.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All query expressions in the form ",(0,a.yg)("inlineCode",{parentName:"p"},"#type != X")," were falsely evaluated as ",(0,a.yg)("inlineCode",{parentName:"p"},"#type == X")," and consequently produced wrong results. These expressions now behave as expected.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Parsers for reading log input that relied on recursive rules leaked memory by creating cycling references. All recursive parsers have been updated to break such cycles and thus no longer leak memory.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Zeek reader failed upon encountering logs with a ",(0,a.yg)("inlineCode",{parentName:"p"},"double")," column, as it occurs in ",(0,a.yg)("inlineCode",{parentName:"p"},"capture_loss.log"),". The Zeek parser generator has been fixed to handle such types correctly.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Some queries returned duplicate events because the archive did not filter the result set properly. This no longer occurs after fixing the table slice filtering logic.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," data parser did not parse negative values correctly. It was not possible to parse strings of the form ",(0,a.yg)("inlineCode",{parentName:"p"},'"{-42 -> T}"')," because the parser attempted to parse the token for the empty map ",(0,a.yg)("inlineCode",{parentName:"p"},'"{-}"')," instead.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The CSV printer of the ",(0,a.yg)("inlineCode",{parentName:"p"},"export")," command used to insert 2 superfluous fields when formatting an event: The internal event ID and a deprecated internal timestamp value. Both fields have been removed from the output, bringing it into line with the other output formats.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When a node terminates during an import, the client process remained unaffected and kept processing input. Now the client terminates when a remote node terminates.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Evaluation of predicates with negations return incorrect results. For example, the expression ",(0,a.yg)("inlineCode",{parentName:"p"},":addr !in 10.0.0.0/8")," created a disjunction of all fields to which ",(0,a.yg)("inlineCode",{parentName:"p"},":addr")," resolved, without properly applying De-Morgan. The same bug also existed for key extractors. De-Morgan is now applied properly for the operations ",(0,a.yg)("inlineCode",{parentName:"p"},"!in")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"!~"),"."))),(0,a.yg)("h2",m({},{id:"01---20190228"}),(0,a.yg)("a",m({parentName:"h2"},{href:"https://github.com/tenzir/vast/releases/tag/0.1"}),"0.1")," - 2019.02.28"),(0,a.yg)("p",null,"This is the first official release."))}v.isMDXComponent=!0}}]);